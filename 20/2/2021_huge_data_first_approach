{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPntPRHk9yn7jk5N2P0Zxlf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlexAlexeyuk/Alexander.Alexeyuk/blob/master/20/2/2021_huge_data_first_approach\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e7N__IbNkrUH",
        "outputId": "d4a87d36-e3e1-41af-fcfa-c140904ad46f"
      },
      "source": [
        "import pandas as pd\r\n",
        "import numpy as np\r\n",
        "!pip install sdv"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: sdv in /usr/local/lib/python3.6/dist-packages (0.7.0)\n",
            "Requirement already satisfied: sdmetrics<0.2.0,>=0.1.2 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.1.3)\n",
            "Requirement already satisfied: graphviz<1,>=0.13.2 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.16)\n",
            "Requirement already satisfied: deepecho<0.2,>=0.1.4 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.1.4)\n",
            "Requirement already satisfied: pandas<1.1.5,>=1.1 in /usr/local/lib/python3.6/dist-packages (from sdv) (1.1.4)\n",
            "Requirement already satisfied: ctgan<0.4,>=0.3.1 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.3.1)\n",
            "Requirement already satisfied: rdt<0.4,>=0.2.10 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.3.0)\n",
            "Requirement already satisfied: numpy<2,>=1.18.0 in /usr/local/lib/python3.6/dist-packages (from sdv) (1.19.5)\n",
            "Requirement already satisfied: copulas<0.5,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.4.0)\n",
            "Requirement already satisfied: scipy<1.6,>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from sdv) (1.4.1)\n",
            "Requirement already satisfied: sktime<0.6,>=0.4 in /usr/local/lib/python3.6/dist-packages (from sdmetrics<0.2.0,>=0.1.2->sdv) (0.5.3)\n",
            "Requirement already satisfied: pomegranate<0.13.5,>=0.13.0 in /usr/local/lib/python3.6/dist-packages (from sdmetrics<0.2.0,>=0.1.2->sdv) (0.13.4)\n",
            "Requirement already satisfied: scikit-learn<1,>=0.20 in /usr/local/lib/python3.6/dist-packages (from sdmetrics<0.2.0,>=0.1.2->sdv) (0.22.2.post1)\n",
            "Requirement already satisfied: torch<2,>=1 in /usr/local/lib/python3.6/dist-packages (from sdmetrics<0.2.0,>=0.1.2->sdv) (1.7.0+cu101)\n",
            "Requirement already satisfied: tqdm<5,>=4 in /usr/local/lib/python3.6/dist-packages (from deepecho<0.2,>=0.1.4->sdv) (4.41.1)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas<1.1.5,>=1.1->sdv) (2018.9)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.6/dist-packages (from pandas<1.1.5,>=1.1->sdv) (2.8.1)\n",
            "Requirement already satisfied: torchvision<1,>=0.4.2 in /usr/local/lib/python3.6/dist-packages (from ctgan<0.4,>=0.3.1->sdv) (0.8.1+cu101)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.6/dist-packages (from ctgan<0.4,>=0.3.1->sdv) (20.9)\n",
            "Requirement already satisfied: Faker<4.15,>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from rdt<0.4,>=0.2.10->sdv) (4.14.2)\n",
            "Requirement already satisfied: matplotlib<3.2.2,>=2.2.2 in /usr/local/lib/python3.6/dist-packages (from copulas<0.5,>=0.4.0->sdv) (3.2.1)\n",
            "Requirement already satisfied: statsmodels>=0.12.1 in /usr/local/lib/python3.6/dist-packages (from sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (0.12.2)\n",
            "Requirement already satisfied: numba>=0.50 in /usr/local/lib/python3.6/dist-packages (from sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (0.51.2)\n",
            "Requirement already satisfied: wheel in /usr/local/lib/python3.6/dist-packages (from sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (0.36.2)\n",
            "Requirement already satisfied: joblib>=0.9.0b4 in /usr/local/lib/python3.6/dist-packages (from pomegranate<0.13.5,>=0.13.0->sdmetrics<0.2.0,>=0.1.2->sdv) (1.0.0)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.6/dist-packages (from pomegranate<0.13.5,>=0.13.0->sdmetrics<0.2.0,>=0.1.2->sdv) (3.13)\n",
            "Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.6/dist-packages (from pomegranate<0.13.5,>=0.13.0->sdmetrics<0.2.0,>=0.1.2->sdv) (2.5)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.6/dist-packages (from torch<2,>=1->sdmetrics<0.2.0,>=0.1.2->sdv) (3.7.4.3)\n",
            "Requirement already satisfied: dataclasses in /usr/local/lib/python3.6/dist-packages (from torch<2,>=1->sdmetrics<0.2.0,>=0.1.2->sdv) (0.8)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from torch<2,>=1->sdmetrics<0.2.0,>=0.1.2->sdv) (0.16.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.7.3->pandas<1.1.5,>=1.1->sdv) (1.15.0)\n",
            "Requirement already satisfied: pillow>=4.1.1 in /usr/local/lib/python3.6/dist-packages (from torchvision<1,>=0.4.2->ctgan<0.4,>=0.3.1->sdv) (7.0.0)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.6/dist-packages (from packaging->ctgan<0.4,>=0.3.1->sdv) (2.4.7)\n",
            "Requirement already satisfied: text-unidecode==1.3 in /usr/local/lib/python3.6/dist-packages (from Faker<4.15,>=1.0.1->rdt<0.4,>=0.2.10->sdv) (1.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib<3.2.2,>=2.2.2->copulas<0.5,>=0.4.0->sdv) (0.10.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib<3.2.2,>=2.2.2->copulas<0.5,>=0.4.0->sdv) (1.3.1)\n",
            "Requirement already satisfied: patsy>=0.5 in /usr/local/lib/python3.6/dist-packages (from statsmodels>=0.12.1->sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (0.5.1)\n",
            "Requirement already satisfied: llvmlite<0.35,>=0.34.0.dev0 in /usr/local/lib/python3.6/dist-packages (from numba>=0.50->sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (0.34.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from numba>=0.50->sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (53.0.0)\n",
            "Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx>=2.0->pomegranate<0.13.5,>=0.13.0->sdmetrics<0.2.0,>=0.1.2->sdv) (4.4.2)\n",
            "Requirement already satisfied: sdv in /usr/local/lib/python3.6/dist-packages (0.7.0)\n",
            "Requirement already satisfied: sdmetrics<0.2.0,>=0.1.2 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.1.3)\n",
            "Requirement already satisfied: graphviz<1,>=0.13.2 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.16)\n",
            "Requirement already satisfied: copulas<0.5,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.4.0)\n",
            "Requirement already satisfied: numpy<2,>=1.18.0 in /usr/local/lib/python3.6/dist-packages (from sdv) (1.19.5)\n",
            "Requirement already satisfied: pandas<1.1.5,>=1.1 in /usr/local/lib/python3.6/dist-packages (from sdv) (1.1.4)\n",
            "Requirement already satisfied: deepecho<0.2,>=0.1.4 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.1.4)\n",
            "Requirement already satisfied: scipy<1.6,>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from sdv) (1.4.1)\n",
            "Requirement already satisfied: rdt<0.4,>=0.2.10 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.3.0)\n",
            "Requirement already satisfied: ctgan<0.4,>=0.3.1 in /usr/local/lib/python3.6/dist-packages (from sdv) (0.3.1)\n",
            "Requirement already satisfied: sktime<0.6,>=0.4 in /usr/local/lib/python3.6/dist-packages (from sdmetrics<0.2.0,>=0.1.2->sdv) (0.5.3)\n",
            "Requirement already satisfied: scikit-learn<1,>=0.20 in /usr/local/lib/python3.6/dist-packages (from sdmetrics<0.2.0,>=0.1.2->sdv) (0.22.2.post1)\n",
            "Requirement already satisfied: pomegranate<0.13.5,>=0.13.0 in /usr/local/lib/python3.6/dist-packages (from sdmetrics<0.2.0,>=0.1.2->sdv) (0.13.4)\n",
            "Requirement already satisfied: torch<2,>=1 in /usr/local/lib/python3.6/dist-packages (from sdmetrics<0.2.0,>=0.1.2->sdv) (1.7.0+cu101)\n",
            "Requirement already satisfied: matplotlib<3.2.2,>=2.2.2 in /usr/local/lib/python3.6/dist-packages (from copulas<0.5,>=0.4.0->sdv) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.6/dist-packages (from pandas<1.1.5,>=1.1->sdv) (2.8.1)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas<1.1.5,>=1.1->sdv) (2018.9)\n",
            "Requirement already satisfied: tqdm<5,>=4 in /usr/local/lib/python3.6/dist-packages (from deepecho<0.2,>=0.1.4->sdv) (4.41.1)\n",
            "Requirement already satisfied: Faker<4.15,>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from rdt<0.4,>=0.2.10->sdv) (4.14.2)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.6/dist-packages (from ctgan<0.4,>=0.3.1->sdv) (20.9)\n",
            "Requirement already satisfied: torchvision<1,>=0.4.2 in /usr/local/lib/python3.6/dist-packages (from ctgan<0.4,>=0.3.1->sdv) (0.8.1+cu101)\n",
            "Requirement already satisfied: wheel in /usr/local/lib/python3.6/dist-packages (from sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (0.36.2)\n",
            "Requirement already satisfied: statsmodels>=0.12.1 in /usr/local/lib/python3.6/dist-packages (from sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (0.12.2)\n",
            "Requirement already satisfied: numba>=0.50 in /usr/local/lib/python3.6/dist-packages (from sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (0.51.2)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn<1,>=0.20->sdmetrics<0.2.0,>=0.1.2->sdv) (1.0.0)\n",
            "Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.6/dist-packages (from pomegranate<0.13.5,>=0.13.0->sdmetrics<0.2.0,>=0.1.2->sdv) (2.5)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.6/dist-packages (from pomegranate<0.13.5,>=0.13.0->sdmetrics<0.2.0,>=0.1.2->sdv) (3.13)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from torch<2,>=1->sdmetrics<0.2.0,>=0.1.2->sdv) (0.16.0)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.6/dist-packages (from torch<2,>=1->sdmetrics<0.2.0,>=0.1.2->sdv) (3.7.4.3)\n",
            "Requirement already satisfied: dataclasses in /usr/local/lib/python3.6/dist-packages (from torch<2,>=1->sdmetrics<0.2.0,>=0.1.2->sdv) (0.8)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib<3.2.2,>=2.2.2->copulas<0.5,>=0.4.0->sdv) (2.4.7)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib<3.2.2,>=2.2.2->copulas<0.5,>=0.4.0->sdv) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib<3.2.2,>=2.2.2->copulas<0.5,>=0.4.0->sdv) (0.10.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.7.3->pandas<1.1.5,>=1.1->sdv) (1.15.0)\n",
            "Requirement already satisfied: text-unidecode==1.3 in /usr/local/lib/python3.6/dist-packages (from Faker<4.15,>=1.0.1->rdt<0.4,>=0.2.10->sdv) (1.3)\n",
            "Requirement already satisfied: pillow>=4.1.1 in /usr/local/lib/python3.6/dist-packages (from torchvision<1,>=0.4.2->ctgan<0.4,>=0.3.1->sdv) (7.0.0)\n",
            "Requirement already satisfied: patsy>=0.5 in /usr/local/lib/python3.6/dist-packages (from statsmodels>=0.12.1->sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (0.5.1)\n",
            "Requirement already satisfied: llvmlite<0.35,>=0.34.0.dev0 in /usr/local/lib/python3.6/dist-packages (from numba>=0.50->sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (0.34.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from numba>=0.50->sktime<0.6,>=0.4->sdmetrics<0.2.0,>=0.1.2->sdv) (53.0.0)\n",
            "Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx>=2.0->pomegranate<0.13.5,>=0.13.0->sdmetrics<0.2.0,>=0.1.2->sdv) (4.4.2)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        },
        "id": "6lJ_jQZflWcQ",
        "outputId": "8d52fa89-4b59-454b-fd7c-d62f6656db3f"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "df  = pd.read_csv('/content/Covid_Data_Proc_2.csv')\r\n",
        "df = df.drop(['Unnamed: 0', 'ID','Hemoglobin',\r\n",
        "              'Diagnosis', 'Treatment', 'Min_Cratinine', \r\n",
        "              'COVID-19', 'Pneumonia','L/Pl_Ratio', \"GFR\"], axis = 1)\r\n",
        "df[\"RF\"] = df[\"RF\"].astype('category')\r\n",
        "df['Gender'] = df['Gender'].map({'male':1, 'female': 0})\r\n",
        "df = pd.get_dummies(df)\r\n",
        "df[['RF_0.0',\t'RF_1.0',\t'RF_2.0',\t'RF_3.0']]= df[['RF_0.0',\t'RF_1.0',\t'RF_2.0',\t'RF_3.0']].astype('int')\r\n",
        "df = df.round(2)\r\n",
        "df.head(76)"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Max_Procalcitonine</th>\n",
              "      <th>Max_Platlets</th>\n",
              "      <th>Min_Platlets</th>\n",
              "      <th>Init_ESR</th>\n",
              "      <th>Max_ESR</th>\n",
              "      <th>Init_Fibrinogen</th>\n",
              "      <th>Max_Fibrinogen</th>\n",
              "      <th>Initial_LDH</th>\n",
              "      <th>Max_LDH</th>\n",
              "      <th>Max_Leucocytes</th>\n",
              "      <th>Min_Leucocytes</th>\n",
              "      <th>Max_Creatinine</th>\n",
              "      <th>Gender</th>\n",
              "      <th>initial_CRP</th>\n",
              "      <th>Max_CRP</th>\n",
              "      <th>Severity</th>\n",
              "      <th>IHD</th>\n",
              "      <th>COPD</th>\n",
              "      <th>Bronchial_asthma</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Diabetes</th>\n",
              "      <th>ALT</th>\n",
              "      <th>AST</th>\n",
              "      <th>duration</th>\n",
              "      <th>Age</th>\n",
              "      <th>Max_Creatinine_mg_dl</th>\n",
              "      <th>RF_0.0</th>\n",
              "      <th>RF_1.0</th>\n",
              "      <th>RF_2.0</th>\n",
              "      <th>RF_3.0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.10</td>\n",
              "      <td>269.0</td>\n",
              "      <td>194.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>3.90</td>\n",
              "      <td>6.93</td>\n",
              "      <td>923.0</td>\n",
              "      <td>923.0</td>\n",
              "      <td>10.02</td>\n",
              "      <td>7.39</td>\n",
              "      <td>107.0</td>\n",
              "      <td>0</td>\n",
              "      <td>68.90</td>\n",
              "      <td>68.90</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>381.4</td>\n",
              "      <td>61.6</td>\n",
              "      <td>27</td>\n",
              "      <td>82</td>\n",
              "      <td>0.95</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.05</td>\n",
              "      <td>282.0</td>\n",
              "      <td>260.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>5.50</td>\n",
              "      <td>6.04</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.14</td>\n",
              "      <td>2.64</td>\n",
              "      <td>78.0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.00</td>\n",
              "      <td>36.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>51</td>\n",
              "      <td>34</td>\n",
              "      <td>0.69</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.20</td>\n",
              "      <td>440.0</td>\n",
              "      <td>149.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.59</td>\n",
              "      <td>5.80</td>\n",
              "      <td>656.0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.74</td>\n",
              "      <td>61.50</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>17</td>\n",
              "      <td>66</td>\n",
              "      <td>5.81</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.23</td>\n",
              "      <td>228.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>7.64</td>\n",
              "      <td>7.64</td>\n",
              "      <td>481.0</td>\n",
              "      <td>504.0</td>\n",
              "      <td>10.65</td>\n",
              "      <td>4.11</td>\n",
              "      <td>59.0</td>\n",
              "      <td>0</td>\n",
              "      <td>113.50</td>\n",
              "      <td>124.20</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>23</td>\n",
              "      <td>72</td>\n",
              "      <td>0.52</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.07</td>\n",
              "      <td>236.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1.20</td>\n",
              "      <td>5.98</td>\n",
              "      <td>533.0</td>\n",
              "      <td>533.0</td>\n",
              "      <td>13.88</td>\n",
              "      <td>4.94</td>\n",
              "      <td>107.0</td>\n",
              "      <td>1</td>\n",
              "      <td>36.10</td>\n",
              "      <td>171.60</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>30</td>\n",
              "      <td>68</td>\n",
              "      <td>0.95</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>0.37</td>\n",
              "      <td>234.0</td>\n",
              "      <td>234.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>8.32</td>\n",
              "      <td>8.91</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.90</td>\n",
              "      <td>9.43</td>\n",
              "      <td>151.0</td>\n",
              "      <td>1</td>\n",
              "      <td>170.00</td>\n",
              "      <td>170.00</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>147.0</td>\n",
              "      <td>32</td>\n",
              "      <td>63</td>\n",
              "      <td>1.34</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>0.14</td>\n",
              "      <td>233.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.25</td>\n",
              "      <td>1.49</td>\n",
              "      <td>84.0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.00</td>\n",
              "      <td>12.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>77.0</td>\n",
              "      <td>24</td>\n",
              "      <td>53</td>\n",
              "      <td>0.74</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>0.07</td>\n",
              "      <td>551.0</td>\n",
              "      <td>327.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>9.62</td>\n",
              "      <td>9.62</td>\n",
              "      <td>493.0</td>\n",
              "      <td>493.0</td>\n",
              "      <td>24.88</td>\n",
              "      <td>7.39</td>\n",
              "      <td>99.0</td>\n",
              "      <td>1</td>\n",
              "      <td>4.15</td>\n",
              "      <td>4.15</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46.0</td>\n",
              "      <td>46.7</td>\n",
              "      <td>13</td>\n",
              "      <td>67</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>0.07</td>\n",
              "      <td>249.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.19</td>\n",
              "      <td>5.18</td>\n",
              "      <td>93.0</td>\n",
              "      <td>1</td>\n",
              "      <td>27.20</td>\n",
              "      <td>27.20</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>53.2</td>\n",
              "      <td>18.7</td>\n",
              "      <td>9</td>\n",
              "      <td>65</td>\n",
              "      <td>0.82</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>0.07</td>\n",
              "      <td>180.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>6.04</td>\n",
              "      <td>6.04</td>\n",
              "      <td>452.0</td>\n",
              "      <td>452.0</td>\n",
              "      <td>4.66</td>\n",
              "      <td>4.66</td>\n",
              "      <td>96.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.62</td>\n",
              "      <td>2.62</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>83.8</td>\n",
              "      <td>31.7</td>\n",
              "      <td>9</td>\n",
              "      <td>70</td>\n",
              "      <td>0.85</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>76 rows × 30 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "    Max_Procalcitonine  Max_Platlets  Min_Platlets  ...  RF_1.0  RF_2.0  RF_3.0\n",
              "0                 0.10         269.0         194.0  ...       0       0       0\n",
              "1                 0.05         282.0         260.0  ...       0       0       0\n",
              "2                 0.20         440.0         149.0  ...       1       0       0\n",
              "3                 0.23         228.0         180.0  ...       0       0       0\n",
              "4                 0.07         236.0         113.0  ...       0       1       0\n",
              "..                 ...           ...           ...  ...     ...     ...     ...\n",
              "71                0.37         234.0         234.0  ...       0       1       0\n",
              "72                0.14         233.0         140.0  ...       1       0       0\n",
              "73                0.07         551.0         327.0  ...       1       0       0\n",
              "74                0.07         249.0         184.0  ...       1       0       0\n",
              "75                0.07         180.0         180.0  ...       0       0       0\n",
              "\n",
              "[76 rows x 30 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cbXjNU3qqksI",
        "outputId": "d71d1283-52ce-4c08-9686-b02db94dc5b1"
      },
      "source": [
        "df.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 76 entries, 0 to 75\n",
            "Data columns (total 30 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   Max_Procalcitonine    76 non-null     float64\n",
            " 1   Max_Platlets          76 non-null     float64\n",
            " 2   Min_Platlets          76 non-null     float64\n",
            " 3   Init_ESR              76 non-null     float64\n",
            " 4   Max_ESR               76 non-null     float64\n",
            " 5   Init_Fibrinogen       76 non-null     float64\n",
            " 6   Max_Fibrinogen        76 non-null     float64\n",
            " 7   Initial_LDH           76 non-null     float64\n",
            " 8   Max_LDH               76 non-null     float64\n",
            " 9   Max_Leucocytes        76 non-null     float64\n",
            " 10  Min_Leucocytes        76 non-null     float64\n",
            " 11  Max_Creatinine        76 non-null     float64\n",
            " 12  Gender                76 non-null     int64  \n",
            " 13  initial_CRP           76 non-null     float64\n",
            " 14  Max_CRP               76 non-null     float64\n",
            " 15  Severity              76 non-null     int64  \n",
            " 16  IHD                   76 non-null     int64  \n",
            " 17  COPD                  76 non-null     int64  \n",
            " 18  Bronchial_asthma      76 non-null     int64  \n",
            " 19  Obesity               76 non-null     int64  \n",
            " 20  Diabetes              76 non-null     int64  \n",
            " 21  ALT                   76 non-null     float64\n",
            " 22  AST                   76 non-null     float64\n",
            " 23  duration              76 non-null     int64  \n",
            " 24  Age                   76 non-null     int64  \n",
            " 25  Max_Creatinine_mg_dl  76 non-null     float64\n",
            " 26  RF_0.0                76 non-null     int64  \n",
            " 27  RF_1.0                76 non-null     int64  \n",
            " 28  RF_2.0                76 non-null     int64  \n",
            " 29  RF_3.0                76 non-null     int64  \n",
            "dtypes: float64(17), int64(13)\n",
            "memory usage: 17.9 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yteHtuAQlWhd"
      },
      "source": [
        "from sdv.tabular import GaussianCopula\r\n",
        "model1 = GaussianCopula()\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WtchjSfNlWnZ",
        "outputId": "764dc7f1-b9ab-481f-8b50-b9f8a5e7f330"
      },
      "source": [
        "model1.fit(df)\r\n",
        "new_data_1 = model1.sample(20000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/scipy/stats/_continuous_distns.py:547: RuntimeWarning: invalid value encountered in sqrt\n",
            "  sk = 2*(b-a)*np.sqrt(a + b + 1) / (a + b + 2) / np.sqrt(a*b)\n",
            "/usr/local/lib/python3.6/dist-packages/scipy/optimize/minpack.py:162: RuntimeWarning: The iteration is not making good progress, as measured by the \n",
            "  improvement from the last ten iterations.\n",
            "  warnings.warn(msg, RuntimeWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/scipy/stats/_continuous_distns.py:4798: RuntimeWarning: divide by zero encountered in true_divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.6/dist-packages/scipy/stats/_distn_infrastructure.py:2407: RuntimeWarning: invalid value encountered in double_scalars\n",
            "  Lhat = muhat - Shat*mu\n",
            "/usr/local/lib/python3.6/dist-packages/scipy/stats/_continuous_distns.py:4789: RuntimeWarning: divide by zero encountered in power\n",
            "  return cd2*x**(c-1)\n",
            "/usr/local/lib/python3.6/dist-packages/scipy/optimize/minpack.py:162: RuntimeWarning: The iteration is not making good progress, as measured by the \n",
            "  improvement from the last five Jacobian evaluations.\n",
            "  warnings.warn(msg, RuntimeWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "d22mkS0kty9k",
        "outputId": "497c4111-7740-4e50-b8ff-34676691798f"
      },
      "source": [
        "\r\n",
        "new_data_1 = new_data_1[(new_data_1['Max_Platlets'] > 25 )\r\n",
        "                        & (new_data_1['Min_Platlets'] > 25)\r\n",
        "                        &  (new_data_1['Init_Fibrinogen'] > 2 )\r\n",
        "                        & (new_data_1['Init_Fibrinogen'] < 10)\r\n",
        "                        &  (new_data_1['Max_Fibrinogen'] > 2 )\r\n",
        "                        & (new_data_1['Max_Fibrinogen'] < 10)\r\n",
        "\r\n",
        "                        &  (new_data_1['Initial_LDH'] > 100 )\r\n",
        "                        & (new_data_1['Initial_LDH'] < 2000)\r\n",
        "                        &  (new_data_1['Max_LDH'] > 130 )\r\n",
        "                        & (new_data_1['Max_LDH'] < 2000)\r\n",
        "\r\n",
        "                        & (new_data_1['Min_Leucocytes']  >.9)\r\n",
        "                        & (new_data_1['Min_Leucocytes']  <30)\r\n",
        "                        & (new_data_1['Max_Leucocytes']  >.4)\r\n",
        "                        & (new_data_1['Max_Leucocytes']  < 40)\r\n",
        "                        & (new_data_1['Max_Creatinine']  > 60)\r\n",
        "                        & (new_data_1['Max_Creatinine']  < 800)\r\n",
        "                         & (new_data_1['initial_CRP']  > 6)\r\n",
        "                         & (new_data_1['initial_CRP']  < 255)\r\n",
        "                         & (new_data_1['Max_CRP']  > 30)\r\n",
        "                         & (new_data_1['Max_CRP']  < 300)\r\n",
        "\r\n",
        "                          & (new_data_1['ALT']  > 20)\r\n",
        "                         & (new_data_1['ALT']  < 350)\r\n",
        "                         & (new_data_1['AST']  > 30)\r\n",
        "                         & (new_data_1['AST']  < 400)\r\n",
        "                         \r\n",
        "                         & (new_data_1['Age']  > 20)\r\n",
        "                         & (new_data_1['Age']  < 90)\r\n",
        "                         & (new_data_1['IHD']  <=1)\r\n",
        "                         & (new_data_1['IHD']  >= 0)\r\n",
        "                         & (new_data_1['IHD']  <=1)\r\n",
        "                         & (new_data_1['IHD']  >= 0)\r\n",
        "                         & (new_data_1['COPD']  <=1)\r\n",
        "                         & (new_data_1['COPD']  >= 0)\r\n",
        "                         & (new_data_1['Diabetes']  <=1)\r\n",
        "                         & (new_data_1['Diabetes']  >= 0)\r\n",
        "                         & (new_data_1['Obesity']  <=1)\r\n",
        "                         & (new_data_1['Obesity']  >= 0)\r\n",
        "                         & (new_data_1['Bronchial_asthma']  <=1)\r\n",
        "                         & (new_data_1['Bronchial_asthma']  >= 0)\r\n",
        "                         & (new_data_1['Max_Procalcitonine']  > 0.07)\r\n",
        "                         & (new_data_1['Max_Procalcitonine']  < 2.4)\r\n",
        "                         & (new_data_1['duration']  > 4)\r\n",
        "                         & (new_data_1['duration']  < 32)\r\n",
        "                         & (new_data_1['RF_0.0']   >=0)\r\n",
        "                          & (new_data_1['RF_1.0']   >=0)\r\n",
        "                          & (new_data_1['RF_2.0']   >=0)\r\n",
        "                          & (new_data_1['RF_3.0']   >=0)\r\n",
        "                          & (new_data_1['RF_0.0']  <=1)\r\n",
        "                          & (new_data_1['RF_1.0']   <=1)\r\n",
        "                          & (new_data_1['RF_2.0']   <=1)\r\n",
        "                          & (new_data_1['RF_3.0']   <=1)\r\n",
        "                          & (new_data_1['Gender']   >=0)\r\n",
        "                          & (new_data_1['Gender']   <=1)\r\n",
        "                           & (new_data_1['Severity']   >=0)\r\n",
        "                          & (new_data_1['Severity']   <=1)]\r\n",
        "\r\n",
        "new_data_1.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Max_Procalcitonine</th>\n",
              "      <th>Max_Platlets</th>\n",
              "      <th>Min_Platlets</th>\n",
              "      <th>Init_ESR</th>\n",
              "      <th>Max_ESR</th>\n",
              "      <th>Init_Fibrinogen</th>\n",
              "      <th>Max_Fibrinogen</th>\n",
              "      <th>Initial_LDH</th>\n",
              "      <th>Max_LDH</th>\n",
              "      <th>Max_Leucocytes</th>\n",
              "      <th>Min_Leucocytes</th>\n",
              "      <th>Max_Creatinine</th>\n",
              "      <th>Gender</th>\n",
              "      <th>initial_CRP</th>\n",
              "      <th>Max_CRP</th>\n",
              "      <th>Severity</th>\n",
              "      <th>IHD</th>\n",
              "      <th>COPD</th>\n",
              "      <th>Bronchial_asthma</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Diabetes</th>\n",
              "      <th>ALT</th>\n",
              "      <th>AST</th>\n",
              "      <th>duration</th>\n",
              "      <th>Age</th>\n",
              "      <th>Max_Creatinine_mg_dl</th>\n",
              "      <th>RF_0.0</th>\n",
              "      <th>RF_1.0</th>\n",
              "      <th>RF_2.0</th>\n",
              "      <th>RF_3.0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.0</td>\n",
              "      <td>1983.0</td>\n",
              "      <td>1983.0</td>\n",
              "      <td>1983.0</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.0</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "      <td>1983.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.189259</td>\n",
              "      <td>312.304750</td>\n",
              "      <td>180.764773</td>\n",
              "      <td>27.007308</td>\n",
              "      <td>38.831831</td>\n",
              "      <td>5.739629</td>\n",
              "      <td>7.660545</td>\n",
              "      <td>562.181549</td>\n",
              "      <td>777.692888</td>\n",
              "      <td>12.727724</td>\n",
              "      <td>5.967045</td>\n",
              "      <td>114.034239</td>\n",
              "      <td>0.552194</td>\n",
              "      <td>103.836608</td>\n",
              "      <td>146.055134</td>\n",
              "      <td>0.569844</td>\n",
              "      <td>0.510338</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>89.711303</td>\n",
              "      <td>53.643610</td>\n",
              "      <td>18.887040</td>\n",
              "      <td>63.716087</td>\n",
              "      <td>1.009749</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.272315</td>\n",
              "      <td>0.461926</td>\n",
              "      <td>0.006051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.127019</td>\n",
              "      <td>105.957716</td>\n",
              "      <td>69.208558</td>\n",
              "      <td>15.397508</td>\n",
              "      <td>15.820513</td>\n",
              "      <td>1.886378</td>\n",
              "      <td>1.506235</td>\n",
              "      <td>226.767498</td>\n",
              "      <td>317.988539</td>\n",
              "      <td>5.049612</td>\n",
              "      <td>2.421200</td>\n",
              "      <td>54.786519</td>\n",
              "      <td>0.497394</td>\n",
              "      <td>69.978584</td>\n",
              "      <td>71.342820</td>\n",
              "      <td>0.495223</td>\n",
              "      <td>0.500019</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>48.124530</td>\n",
              "      <td>23.273490</td>\n",
              "      <td>6.529862</td>\n",
              "      <td>12.838419</td>\n",
              "      <td>0.482696</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.445263</td>\n",
              "      <td>0.498674</td>\n",
              "      <td>0.077575</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.070009</td>\n",
              "      <td>26.838339</td>\n",
              "      <td>26.302431</td>\n",
              "      <td>0.003754</td>\n",
              "      <td>0.065787</td>\n",
              "      <td>2.005026</td>\n",
              "      <td>2.092351</td>\n",
              "      <td>100.495657</td>\n",
              "      <td>133.969697</td>\n",
              "      <td>0.422227</td>\n",
              "      <td>0.963751</td>\n",
              "      <td>60.600414</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6.199149</td>\n",
              "      <td>30.016243</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.068334</td>\n",
              "      <td>30.015813</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>0.526164</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.101546</td>\n",
              "      <td>241.194328</td>\n",
              "      <td>128.321760</td>\n",
              "      <td>14.844201</td>\n",
              "      <td>27.632511</td>\n",
              "      <td>4.322841</td>\n",
              "      <td>6.811602</td>\n",
              "      <td>397.564901</td>\n",
              "      <td>536.350427</td>\n",
              "      <td>9.740100</td>\n",
              "      <td>4.406641</td>\n",
              "      <td>91.434590</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>39.028290</td>\n",
              "      <td>82.456039</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>61.325682</td>\n",
              "      <td>38.975768</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>54.000000</td>\n",
              "      <td>0.809576</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.148227</td>\n",
              "      <td>311.919856</td>\n",
              "      <td>178.977384</td>\n",
              "      <td>25.841757</td>\n",
              "      <td>38.983150</td>\n",
              "      <td>5.723026</td>\n",
              "      <td>7.908961</td>\n",
              "      <td>552.392416</td>\n",
              "      <td>757.595347</td>\n",
              "      <td>12.174483</td>\n",
              "      <td>5.791493</td>\n",
              "      <td>103.836982</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>94.985831</td>\n",
              "      <td>144.594631</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>77.392340</td>\n",
              "      <td>47.676778</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>64.000000</td>\n",
              "      <td>0.919770</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.227867</td>\n",
              "      <td>382.090346</td>\n",
              "      <td>228.345676</td>\n",
              "      <td>37.698738</td>\n",
              "      <td>51.136036</td>\n",
              "      <td>7.154398</td>\n",
              "      <td>8.786997</td>\n",
              "      <td>704.342726</td>\n",
              "      <td>997.393220</td>\n",
              "      <td>15.110866</td>\n",
              "      <td>7.364289</td>\n",
              "      <td>119.702343</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>165.628148</td>\n",
              "      <td>210.843566</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>101.522449</td>\n",
              "      <td>60.440772</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>73.500000</td>\n",
              "      <td>1.059673</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.100085</td>\n",
              "      <td>727.697475</td>\n",
              "      <td>441.496703</td>\n",
              "      <td>64.854890</td>\n",
              "      <td>68.967051</td>\n",
              "      <td>9.945990</td>\n",
              "      <td>9.993877</td>\n",
              "      <td>1289.665249</td>\n",
              "      <td>1908.206371</td>\n",
              "      <td>38.935112</td>\n",
              "      <td>28.372417</td>\n",
              "      <td>742.526086</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>237.636620</td>\n",
              "      <td>264.694890</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>348.259297</td>\n",
              "      <td>355.423130</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>6.758127</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Max_Procalcitonine  Max_Platlets  ...       RF_2.0       RF_3.0\n",
              "count         1983.000000   1983.000000  ...  1983.000000  1983.000000\n",
              "mean             0.189259    312.304750  ...     0.461926     0.006051\n",
              "std              0.127019    105.957716  ...     0.498674     0.077575\n",
              "min              0.070009     26.838339  ...     0.000000     0.000000\n",
              "25%              0.101546    241.194328  ...     0.000000     0.000000\n",
              "50%              0.148227    311.919856  ...     0.000000     0.000000\n",
              "75%              0.227867    382.090346  ...     1.000000     0.000000\n",
              "max              1.100085    727.697475  ...     1.000000     1.000000\n",
              "\n",
              "[8 rows x 30 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ljEqLro2vOd_"
      },
      "source": [
        "data1 = new_data_1.copy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u8Jq1V6Yve0N"
      },
      "source": [
        "data1.to_csv('First_model_data.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rcJQZiFgoBcK",
        "outputId": "1e3d3cf5-048f-4fbc-8913-274c3598db44"
      },
      "source": [
        "from sdv.tabular import CTGAN\r\n",
        "model2 = CTGAN()\r\n",
        "model2.fit(df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:267: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
            "  % (init + 1), ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:267: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
            "  % (init + 1), ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:267: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
            "  % (init + 1), ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "mvFgT8LzlW0D",
        "outputId": "786db387-0ac6-4034-a985-b9ec6f1581f7"
      },
      "source": [
        "new_data_1 = model2.sample(120000)\r\n",
        "\r\n",
        "new_data_1 = new_data_1[(new_data_1['Max_Platlets'] > 25 )\r\n",
        "                        & (new_data_1['Min_Platlets'] > 25)\r\n",
        "                        &  (new_data_1['Init_Fibrinogen'] > 2 )\r\n",
        "                        & (new_data_1['Init_Fibrinogen'] < 10)\r\n",
        "                        &  (new_data_1['Max_Fibrinogen'] > 2 )\r\n",
        "                        & (new_data_1['Max_Fibrinogen'] < 10)\r\n",
        "\r\n",
        "                        &  (new_data_1['Initial_LDH'] > 100 )\r\n",
        "                        & (new_data_1['Initial_LDH'] < 2000)\r\n",
        "                        &  (new_data_1['Max_LDH'] > 130 )\r\n",
        "                        & (new_data_1['Max_LDH'] < 2000)\r\n",
        "\r\n",
        "                        & (new_data_1['Min_Leucocytes']  >.9)\r\n",
        "                        & (new_data_1['Min_Leucocytes']  <30)\r\n",
        "                        & (new_data_1['Max_Leucocytes']  >.4)\r\n",
        "                        & (new_data_1['Max_Leucocytes']  < 40)\r\n",
        "                        & (new_data_1['Max_Creatinine']  > 60)\r\n",
        "                        & (new_data_1['Max_Creatinine']  < 800)\r\n",
        "                         & (new_data_1['initial_CRP']  > 6)\r\n",
        "                         & (new_data_1['initial_CRP']  < 255)\r\n",
        "                         & (new_data_1['Max_CRP']  > 30)\r\n",
        "                         & (new_data_1['Max_CRP']  < 300)\r\n",
        "\r\n",
        "                          & (new_data_1['ALT']  > 20)\r\n",
        "                         & (new_data_1['ALT']  < 350)\r\n",
        "                         & (new_data_1['AST']  > 30)\r\n",
        "                         & (new_data_1['AST']  < 400)\r\n",
        "                         \r\n",
        "                         & (new_data_1['Age']  > 20)\r\n",
        "                         & (new_data_1['Age']  < 90)\r\n",
        "                         & (new_data_1['IHD']  <=1)\r\n",
        "                         & (new_data_1['IHD']  >= 0)\r\n",
        "                         & (new_data_1['IHD']  <=1)\r\n",
        "                         & (new_data_1['IHD']  >= 0)\r\n",
        "                         & (new_data_1['COPD']  <=1)\r\n",
        "                         & (new_data_1['COPD']  >= 0)\r\n",
        "                         & (new_data_1['Diabetes']  <=1)\r\n",
        "                         & (new_data_1['Diabetes']  >= 0)\r\n",
        "                         & (new_data_1['Obesity']  <=1)\r\n",
        "                         & (new_data_1['Obesity']  >= 0)\r\n",
        "                         & (new_data_1['Bronchial_asthma']  <=1)\r\n",
        "                         & (new_data_1['Bronchial_asthma']  >= 0)\r\n",
        "                         & (new_data_1['Max_Procalcitonine']  > 0.07)\r\n",
        "                         & (new_data_1['Max_Procalcitonine']  < 2.4)\r\n",
        "                         & (new_data_1['duration']  > 4)\r\n",
        "                         & (new_data_1['duration']  < 32)\r\n",
        "                         & (new_data_1['RF_0.0']   >=0)\r\n",
        "                          & (new_data_1['RF_1.0']   >=0)\r\n",
        "                          & (new_data_1['RF_2.0']   >=0)\r\n",
        "                          & (new_data_1['RF_3.0']   >=0)\r\n",
        "                          & (new_data_1['RF_0.0']  <=1)\r\n",
        "                          & (new_data_1['RF_1.0']   <=1)\r\n",
        "                          & (new_data_1['RF_2.0']   <=1)\r\n",
        "                          & (new_data_1['RF_3.0']   <=1)\r\n",
        "                          & (new_data_1['Gender']   >=0)\r\n",
        "                          & (new_data_1['Gender']   <=1)\r\n",
        "                           & (new_data_1['Severity']   >=0)\r\n",
        "                          & (new_data_1['Severity']   <=1)]\r\n",
        "\r\n",
        "new_data_1.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Max_Procalcitonine</th>\n",
              "      <th>Max_Platlets</th>\n",
              "      <th>Min_Platlets</th>\n",
              "      <th>Init_ESR</th>\n",
              "      <th>Max_ESR</th>\n",
              "      <th>Init_Fibrinogen</th>\n",
              "      <th>Max_Fibrinogen</th>\n",
              "      <th>Initial_LDH</th>\n",
              "      <th>Max_LDH</th>\n",
              "      <th>Max_Leucocytes</th>\n",
              "      <th>Min_Leucocytes</th>\n",
              "      <th>Max_Creatinine</th>\n",
              "      <th>Gender</th>\n",
              "      <th>initial_CRP</th>\n",
              "      <th>Max_CRP</th>\n",
              "      <th>Severity</th>\n",
              "      <th>IHD</th>\n",
              "      <th>COPD</th>\n",
              "      <th>Bronchial_asthma</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Diabetes</th>\n",
              "      <th>ALT</th>\n",
              "      <th>AST</th>\n",
              "      <th>duration</th>\n",
              "      <th>Age</th>\n",
              "      <th>Max_Creatinine_mg_dl</th>\n",
              "      <th>RF_0.0</th>\n",
              "      <th>RF_1.0</th>\n",
              "      <th>RF_2.0</th>\n",
              "      <th>RF_3.0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.0</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>44.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.234795</td>\n",
              "      <td>361.585868</td>\n",
              "      <td>272.480885</td>\n",
              "      <td>25.233647</td>\n",
              "      <td>49.641190</td>\n",
              "      <td>5.785485</td>\n",
              "      <td>5.845744</td>\n",
              "      <td>593.902757</td>\n",
              "      <td>594.468489</td>\n",
              "      <td>11.832351</td>\n",
              "      <td>5.221151</td>\n",
              "      <td>168.803196</td>\n",
              "      <td>0.181818</td>\n",
              "      <td>69.918180</td>\n",
              "      <td>157.568415</td>\n",
              "      <td>0.136364</td>\n",
              "      <td>0.159091</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.136364</td>\n",
              "      <td>0.068182</td>\n",
              "      <td>0.090909</td>\n",
              "      <td>120.085431</td>\n",
              "      <td>78.090738</td>\n",
              "      <td>17.454545</td>\n",
              "      <td>61.159091</td>\n",
              "      <td>2.276420</td>\n",
              "      <td>0.272727</td>\n",
              "      <td>0.045455</td>\n",
              "      <td>0.386364</td>\n",
              "      <td>0.113636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.176529</td>\n",
              "      <td>153.406195</td>\n",
              "      <td>129.432685</td>\n",
              "      <td>19.162966</td>\n",
              "      <td>17.642892</td>\n",
              "      <td>2.031520</td>\n",
              "      <td>2.069305</td>\n",
              "      <td>293.535196</td>\n",
              "      <td>318.690947</td>\n",
              "      <td>7.590909</td>\n",
              "      <td>4.184769</td>\n",
              "      <td>132.028300</td>\n",
              "      <td>0.390154</td>\n",
              "      <td>53.895226</td>\n",
              "      <td>74.825600</td>\n",
              "      <td>0.347142</td>\n",
              "      <td>0.369989</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.347142</td>\n",
              "      <td>0.254972</td>\n",
              "      <td>0.290803</td>\n",
              "      <td>79.395617</td>\n",
              "      <td>60.647075</td>\n",
              "      <td>7.375177</td>\n",
              "      <td>14.858939</td>\n",
              "      <td>1.801630</td>\n",
              "      <td>0.450511</td>\n",
              "      <td>0.210707</td>\n",
              "      <td>0.492545</td>\n",
              "      <td>0.321038</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.070451</td>\n",
              "      <td>54.510605</td>\n",
              "      <td>43.443884</td>\n",
              "      <td>-13.242592</td>\n",
              "      <td>11.362473</td>\n",
              "      <td>2.049049</td>\n",
              "      <td>2.099371</td>\n",
              "      <td>104.005979</td>\n",
              "      <td>152.515442</td>\n",
              "      <td>1.211967</td>\n",
              "      <td>1.129444</td>\n",
              "      <td>60.470986</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6.151335</td>\n",
              "      <td>34.994920</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>27.069394</td>\n",
              "      <td>31.322096</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>0.561509</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.111715</td>\n",
              "      <td>241.582172</td>\n",
              "      <td>193.067967</td>\n",
              "      <td>13.269983</td>\n",
              "      <td>38.946404</td>\n",
              "      <td>4.310634</td>\n",
              "      <td>4.102694</td>\n",
              "      <td>413.685864</td>\n",
              "      <td>322.555952</td>\n",
              "      <td>6.015328</td>\n",
              "      <td>2.302526</td>\n",
              "      <td>86.046489</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>23.310572</td>\n",
              "      <td>94.728968</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>58.835707</td>\n",
              "      <td>48.493174</td>\n",
              "      <td>12.750000</td>\n",
              "      <td>51.500000</td>\n",
              "      <td>1.125700</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.189049</td>\n",
              "      <td>383.858413</td>\n",
              "      <td>228.002503</td>\n",
              "      <td>23.106489</td>\n",
              "      <td>53.481652</td>\n",
              "      <td>5.662627</td>\n",
              "      <td>6.002584</td>\n",
              "      <td>541.765947</td>\n",
              "      <td>546.685030</td>\n",
              "      <td>11.545462</td>\n",
              "      <td>4.114854</td>\n",
              "      <td>122.571561</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>54.779144</td>\n",
              "      <td>143.225783</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>94.120839</td>\n",
              "      <td>59.943239</td>\n",
              "      <td>17.500000</td>\n",
              "      <td>64.000000</td>\n",
              "      <td>1.607336</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.263167</td>\n",
              "      <td>474.569540</td>\n",
              "      <td>345.167495</td>\n",
              "      <td>36.148796</td>\n",
              "      <td>62.005393</td>\n",
              "      <td>7.492291</td>\n",
              "      <td>7.409720</td>\n",
              "      <td>696.628128</td>\n",
              "      <td>867.953424</td>\n",
              "      <td>15.872110</td>\n",
              "      <td>6.492766</td>\n",
              "      <td>208.064699</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>106.924889</td>\n",
              "      <td>223.802188</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>180.047745</td>\n",
              "      <td>68.011767</td>\n",
              "      <td>22.250000</td>\n",
              "      <td>70.500000</td>\n",
              "      <td>2.498949</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.754890</td>\n",
              "      <td>673.321915</td>\n",
              "      <td>602.769198</td>\n",
              "      <td>75.523536</td>\n",
              "      <td>77.192267</td>\n",
              "      <td>9.924272</td>\n",
              "      <td>9.757172</td>\n",
              "      <td>1279.758363</td>\n",
              "      <td>1351.317255</td>\n",
              "      <td>39.145654</td>\n",
              "      <td>16.040289</td>\n",
              "      <td>708.265809</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>210.039978</td>\n",
              "      <td>299.552226</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>341.517655</td>\n",
              "      <td>286.520836</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>7.665509</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Max_Procalcitonine  Max_Platlets  ...     RF_2.0     RF_3.0\n",
              "count           44.000000     44.000000  ...  44.000000  44.000000\n",
              "mean             0.234795    361.585868  ...   0.386364   0.113636\n",
              "std              0.176529    153.406195  ...   0.492545   0.321038\n",
              "min              0.070451     54.510605  ...   0.000000   0.000000\n",
              "25%              0.111715    241.582172  ...   0.000000   0.000000\n",
              "50%              0.189049    383.858413  ...   0.000000   0.000000\n",
              "75%              0.263167    474.569540  ...   1.000000   0.000000\n",
              "max              0.754890    673.321915  ...   1.000000   1.000000\n",
              "\n",
              "[8 rows x 30 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rZLG5mKalW5A"
      },
      "source": [
        "data2 = new_data_1.copy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VgxD7XUWlW9k"
      },
      "source": [
        "data2.to_csv('Second_model_data.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TdlOJUvllXDH"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gQj2tSRJlXHo",
        "outputId": "272b82b1-84ba-4b0d-b069-05fd89fb01ec"
      },
      "source": [
        "from sdv.tabular import CTGAN\r\n",
        "\r\n",
        "model2 = CTGAN()\r\n",
        "model2.fit(df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:267: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
            "  % (init + 1), ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:267: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
            "  % (init + 1), ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:267: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
            "  % (init + 1), ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7ws8EC2vlXNx"
      },
      "source": [
        "new_data_1 = model2.sample(40000)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "ZCC3Kca1lXSY",
        "outputId": "7abed36a-9562-47f5-952b-1017bf308397"
      },
      "source": [
        "new_data_1 = new_data_1[(new_data_1['Max_Platlets'] > 25 )\r\n",
        "                        & (new_data_1['Min_Platlets'] > 25)\r\n",
        "                        &  (new_data_1['Init_Fibrinogen'] > 2 )\r\n",
        "                        & (new_data_1['Init_Fibrinogen'] < 10)\r\n",
        "                        &  (new_data_1['Max_Fibrinogen'] > 2 )\r\n",
        "                        & (new_data_1['Max_Fibrinogen'] < 10)\r\n",
        "\r\n",
        "                        &  (new_data_1['Initial_LDH'] > 100 )\r\n",
        "                        & (new_data_1['Initial_LDH'] < 2000)\r\n",
        "                        &  (new_data_1['Max_LDH'] > 130 )\r\n",
        "                        & (new_data_1['Max_LDH'] < 2000)\r\n",
        "\r\n",
        "                        & (new_data_1['Min_Leucocytes']  >.9)\r\n",
        "                        & (new_data_1['Min_Leucocytes']  <30)\r\n",
        "                        & (new_data_1['Max_Leucocytes']  >.4)\r\n",
        "                        & (new_data_1['Max_Leucocytes']  < 40)\r\n",
        "                        & (new_data_1['Max_Creatinine']  > 60)\r\n",
        "                        & (new_data_1['Max_Creatinine']  < 800)\r\n",
        "                         & (new_data_1['initial_CRP']  > 6)\r\n",
        "                         & (new_data_1['initial_CRP']  < 255)\r\n",
        "                         & (new_data_1['Max_CRP']  > 30)\r\n",
        "                         & (new_data_1['Max_CRP']  < 300)\r\n",
        "\r\n",
        "                          & (new_data_1['ALT']  > 20)\r\n",
        "                         & (new_data_1['ALT']  < 350)\r\n",
        "                         & (new_data_1['AST']  > 30)\r\n",
        "                         & (new_data_1['AST']  < 400)\r\n",
        "                         \r\n",
        "                         & (new_data_1['Age']  > 20)\r\n",
        "                         & (new_data_1['Age']  < 90)\r\n",
        "                         & (new_data_1['IHD']  <=1)\r\n",
        "                         & (new_data_1['IHD']  >= 0)\r\n",
        "                         & (new_data_1['IHD']  <=1)\r\n",
        "                         & (new_data_1['IHD']  >= 0)\r\n",
        "                         & (new_data_1['COPD']  <=1)\r\n",
        "                         & (new_data_1['COPD']  >= 0)\r\n",
        "                         & (new_data_1['Diabetes']  <=1)\r\n",
        "                         & (new_data_1['Diabetes']  >= 0)\r\n",
        "                         & (new_data_1['Obesity']  <=1)\r\n",
        "                         & (new_data_1['Obesity']  >= 0)\r\n",
        "                         & (new_data_1['Bronchial_asthma']  <=1)\r\n",
        "                         & (new_data_1['Bronchial_asthma']  >= 0)\r\n",
        "                         & (new_data_1['Max_Procalcitonine']  > 0.07)\r\n",
        "                         & (new_data_1['Max_Procalcitonine']  < 2.4)\r\n",
        "                         & (new_data_1['duration']  > 4)\r\n",
        "                         & (new_data_1['duration']  < 32)\r\n",
        "                         & (new_data_1['RF_0.0']   >=0)\r\n",
        "                          & (new_data_1['RF_1.0']   >=0)\r\n",
        "                          & (new_data_1['RF_2.0']   >=0)\r\n",
        "                          & (new_data_1['RF_3.0']   >=0)\r\n",
        "                          & (new_data_1['RF_0.0']  <=1)\r\n",
        "                          & (new_data_1['RF_1.0']   <=1)\r\n",
        "                          & (new_data_1['RF_2.0']   <=1)\r\n",
        "                          & (new_data_1['RF_3.0']   <=1)\r\n",
        "                          & (new_data_1['Gender']   >=0)\r\n",
        "                          & (new_data_1['Gender']   <=1)\r\n",
        "                           & (new_data_1['Severity']   >=0)\r\n",
        "                          & (new_data_1['Severity']   <=1)]\r\n",
        "\r\n",
        "new_data_1.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Max_Procalcitonine</th>\n",
              "      <th>Max_Platlets</th>\n",
              "      <th>Min_Platlets</th>\n",
              "      <th>Init_ESR</th>\n",
              "      <th>Max_ESR</th>\n",
              "      <th>Init_Fibrinogen</th>\n",
              "      <th>Max_Fibrinogen</th>\n",
              "      <th>Initial_LDH</th>\n",
              "      <th>Max_LDH</th>\n",
              "      <th>Max_Leucocytes</th>\n",
              "      <th>Min_Leucocytes</th>\n",
              "      <th>Max_Creatinine</th>\n",
              "      <th>Gender</th>\n",
              "      <th>initial_CRP</th>\n",
              "      <th>Max_CRP</th>\n",
              "      <th>Severity</th>\n",
              "      <th>IHD</th>\n",
              "      <th>COPD</th>\n",
              "      <th>Bronchial_asthma</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Diabetes</th>\n",
              "      <th>ALT</th>\n",
              "      <th>AST</th>\n",
              "      <th>duration</th>\n",
              "      <th>Age</th>\n",
              "      <th>Max_Creatinine_mg_dl</th>\n",
              "      <th>RF_0.0</th>\n",
              "      <th>RF_1.0</th>\n",
              "      <th>RF_2.0</th>\n",
              "      <th>RF_3.0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.00000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>94.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.253019</td>\n",
              "      <td>283.620562</td>\n",
              "      <td>208.882608</td>\n",
              "      <td>23.065860</td>\n",
              "      <td>37.025542</td>\n",
              "      <td>5.479910</td>\n",
              "      <td>5.734070</td>\n",
              "      <td>530.880334</td>\n",
              "      <td>703.320987</td>\n",
              "      <td>13.225815</td>\n",
              "      <td>7.482607</td>\n",
              "      <td>185.405847</td>\n",
              "      <td>0.074468</td>\n",
              "      <td>103.997397</td>\n",
              "      <td>151.547997</td>\n",
              "      <td>0.138298</td>\n",
              "      <td>0.468085</td>\n",
              "      <td>0.031915</td>\n",
              "      <td>0.053191</td>\n",
              "      <td>0.074468</td>\n",
              "      <td>0.159574</td>\n",
              "      <td>119.348854</td>\n",
              "      <td>84.501067</td>\n",
              "      <td>17.148936</td>\n",
              "      <td>70.085106</td>\n",
              "      <td>1.834123</td>\n",
              "      <td>0.212766</td>\n",
              "      <td>0.12766</td>\n",
              "      <td>0.234043</td>\n",
              "      <td>0.074468</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.244465</td>\n",
              "      <td>145.600887</td>\n",
              "      <td>108.993124</td>\n",
              "      <td>17.663006</td>\n",
              "      <td>18.755419</td>\n",
              "      <td>2.017795</td>\n",
              "      <td>2.192272</td>\n",
              "      <td>254.908466</td>\n",
              "      <td>355.547925</td>\n",
              "      <td>7.341348</td>\n",
              "      <td>4.972140</td>\n",
              "      <td>150.079780</td>\n",
              "      <td>0.263939</td>\n",
              "      <td>71.755421</td>\n",
              "      <td>78.392743</td>\n",
              "      <td>0.347063</td>\n",
              "      <td>0.501656</td>\n",
              "      <td>0.176716</td>\n",
              "      <td>0.225618</td>\n",
              "      <td>0.263939</td>\n",
              "      <td>0.368175</td>\n",
              "      <td>73.744073</td>\n",
              "      <td>57.273627</td>\n",
              "      <td>6.460729</td>\n",
              "      <td>13.255682</td>\n",
              "      <td>1.548400</td>\n",
              "      <td>0.411458</td>\n",
              "      <td>0.33550</td>\n",
              "      <td>0.425669</td>\n",
              "      <td>0.263939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.071008</td>\n",
              "      <td>32.659821</td>\n",
              "      <td>33.820322</td>\n",
              "      <td>-16.793014</td>\n",
              "      <td>-5.072886</td>\n",
              "      <td>2.008458</td>\n",
              "      <td>2.051115</td>\n",
              "      <td>113.265146</td>\n",
              "      <td>134.785661</td>\n",
              "      <td>0.616765</td>\n",
              "      <td>0.984290</td>\n",
              "      <td>62.084978</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>13.238526</td>\n",
              "      <td>33.522992</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>24.658135</td>\n",
              "      <td>32.610192</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>-0.507450</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.098786</td>\n",
              "      <td>183.572846</td>\n",
              "      <td>138.648170</td>\n",
              "      <td>12.405763</td>\n",
              "      <td>23.441375</td>\n",
              "      <td>4.062731</td>\n",
              "      <td>3.955335</td>\n",
              "      <td>350.337917</td>\n",
              "      <td>416.753595</td>\n",
              "      <td>7.441499</td>\n",
              "      <td>3.671372</td>\n",
              "      <td>114.810750</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>43.985906</td>\n",
              "      <td>76.039637</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>65.536419</td>\n",
              "      <td>47.396307</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>62.250000</td>\n",
              "      <td>1.030876</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.130876</td>\n",
              "      <td>266.229792</td>\n",
              "      <td>185.395694</td>\n",
              "      <td>21.992064</td>\n",
              "      <td>38.068617</td>\n",
              "      <td>5.242860</td>\n",
              "      <td>5.555510</td>\n",
              "      <td>493.054737</td>\n",
              "      <td>701.512268</td>\n",
              "      <td>13.870995</td>\n",
              "      <td>6.335873</td>\n",
              "      <td>138.598323</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>80.822172</td>\n",
              "      <td>137.680458</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>101.823274</td>\n",
              "      <td>63.123871</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>73.000000</td>\n",
              "      <td>1.323700</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.316454</td>\n",
              "      <td>375.558644</td>\n",
              "      <td>263.226952</td>\n",
              "      <td>37.336879</td>\n",
              "      <td>51.239444</td>\n",
              "      <td>6.826720</td>\n",
              "      <td>7.594230</td>\n",
              "      <td>714.277885</td>\n",
              "      <td>934.397067</td>\n",
              "      <td>18.587114</td>\n",
              "      <td>9.639401</td>\n",
              "      <td>176.500711</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>167.968547</td>\n",
              "      <td>223.664748</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>163.731877</td>\n",
              "      <td>90.816795</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>1.593874</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.005102</td>\n",
              "      <td>639.860373</td>\n",
              "      <td>572.597407</td>\n",
              "      <td>61.252901</td>\n",
              "      <td>71.944452</td>\n",
              "      <td>9.741591</td>\n",
              "      <td>9.936727</td>\n",
              "      <td>1333.365596</td>\n",
              "      <td>1937.651057</td>\n",
              "      <td>29.674007</td>\n",
              "      <td>22.908654</td>\n",
              "      <td>792.095423</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>252.482242</td>\n",
              "      <td>292.646253</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>325.745270</td>\n",
              "      <td>293.604881</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>88.000000</td>\n",
              "      <td>6.941879</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Max_Procalcitonine  Max_Platlets  ...     RF_2.0     RF_3.0\n",
              "count           94.000000     94.000000  ...  94.000000  94.000000\n",
              "mean             0.253019    283.620562  ...   0.234043   0.074468\n",
              "std              0.244465    145.600887  ...   0.425669   0.263939\n",
              "min              0.071008     32.659821  ...   0.000000   0.000000\n",
              "25%              0.098786    183.572846  ...   0.000000   0.000000\n",
              "50%              0.130876    266.229792  ...   0.000000   0.000000\n",
              "75%              0.316454    375.558644  ...   0.000000   0.000000\n",
              "max              1.005102    639.860373  ...   1.000000   1.000000\n",
              "\n",
              "[8 rows x 30 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZQ93GK0elXaH"
      },
      "source": [
        "data3 = new_data_1.copy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n7COdl7RlXgx"
      },
      "source": [
        "data3.to_csv('Third_mpodel_data.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vg6j6TcFlXn7"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0I7kzz6NlXs9",
        "outputId": "72a30123-caae-4d13-b0cb-ec27544d6db8"
      },
      "source": [
        "from sdv.tabular import TVAE\r\n",
        "\r\n",
        "model = TVAE()\r\n",
        "model.fit(df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:267: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
            "  % (init + 1), ConvergenceWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/mixture/_base.py:147: ConvergenceWarning: Number of distinct clusters (2) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  random_state=random_state).fit(X).labels_\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qF6FQPhRlX0j"
      },
      "source": [
        "new_data_1 = model.sample(50000)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "5aaYoYjGlX7V",
        "outputId": "3f2f6c50-4938-447b-f74f-8ae8d2163d9f"
      },
      "source": [
        "new_data_1 = new_data_1[(new_data_1['Max_Platlets'] > 25 )\r\n",
        "                        & (new_data_1['Min_Platlets'] > 25)\r\n",
        "                        &  (new_data_1['Init_Fibrinogen'] > 2 )\r\n",
        "                        & (new_data_1['Init_Fibrinogen'] < 10)\r\n",
        "                        &  (new_data_1['Max_Fibrinogen'] > 2 )\r\n",
        "                        & (new_data_1['Max_Fibrinogen'] < 10)\r\n",
        "\r\n",
        "                        &  (new_data_1['Initial_LDH'] > 100 )\r\n",
        "                        & (new_data_1['Initial_LDH'] < 2000)\r\n",
        "                        &  (new_data_1['Max_LDH'] > 130 )\r\n",
        "                        & (new_data_1['Max_LDH'] < 2000)\r\n",
        "\r\n",
        "                        & (new_data_1['Min_Leucocytes']  >.9)\r\n",
        "                        & (new_data_1['Min_Leucocytes']  <30)\r\n",
        "                        & (new_data_1['Max_Leucocytes']  >.4)\r\n",
        "                        & (new_data_1['Max_Leucocytes']  < 40)\r\n",
        "                        & (new_data_1['Max_Creatinine']  > 60)\r\n",
        "                        & (new_data_1['Max_Creatinine']  < 800)\r\n",
        "                         & (new_data_1['initial_CRP']  > 6)\r\n",
        "                         & (new_data_1['initial_CRP']  < 255)\r\n",
        "                         & (new_data_1['Max_CRP']  > 30)\r\n",
        "                         & (new_data_1['Max_CRP']  < 300)\r\n",
        "\r\n",
        "                          & (new_data_1['ALT']  > 20)\r\n",
        "                         & (new_data_1['ALT']  < 350)\r\n",
        "                         & (new_data_1['AST']  > 30)\r\n",
        "                         & (new_data_1['AST']  < 400)\r\n",
        "                         \r\n",
        "                         & (new_data_1['Age']  > 20)\r\n",
        "                         & (new_data_1['Age']  < 90)\r\n",
        "                         & (new_data_1['IHD']  <=1)\r\n",
        "                         & (new_data_1['IHD']  >= 0)\r\n",
        "                         & (new_data_1['IHD']  <=1)\r\n",
        "                         & (new_data_1['IHD']  >= 0)\r\n",
        "                         & (new_data_1['COPD']  <=1)\r\n",
        "                         & (new_data_1['COPD']  >= 0)\r\n",
        "                         & (new_data_1['Diabetes']  <=1)\r\n",
        "                         & (new_data_1['Diabetes']  >= 0)\r\n",
        "                         & (new_data_1['Obesity']  <=1)\r\n",
        "                         & (new_data_1['Obesity']  >= 0)\r\n",
        "                         & (new_data_1['Bronchial_asthma']  <=1)\r\n",
        "                         & (new_data_1['Bronchial_asthma']  >= 0)\r\n",
        "                         & (new_data_1['Max_Procalcitonine']  > 0.07)\r\n",
        "                         & (new_data_1['Max_Procalcitonine']  < 2.4)\r\n",
        "                         & (new_data_1['duration']  > 4)\r\n",
        "                         & (new_data_1['duration']  < 32)\r\n",
        "                         & (new_data_1['RF_0.0']   >=0)\r\n",
        "                          & (new_data_1['RF_1.0']   >=0)\r\n",
        "                          & (new_data_1['RF_2.0']   >=0)\r\n",
        "                          & (new_data_1['RF_3.0']   >=0)\r\n",
        "                          & (new_data_1['RF_0.0']  <=1)\r\n",
        "                          & (new_data_1['RF_1.0']   <=1)\r\n",
        "                          & (new_data_1['RF_2.0']   <=1)\r\n",
        "                          & (new_data_1['RF_3.0']   <=1)\r\n",
        "                          & (new_data_1['Gender']   >=0)\r\n",
        "                          & (new_data_1['Gender']   <=1)\r\n",
        "                           & (new_data_1['Severity']   >=0)\r\n",
        "                          & (new_data_1['Severity']   <=1)]\r\n",
        "\r\n",
        "new_data_1.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Max_Procalcitonine</th>\n",
              "      <th>Max_Platlets</th>\n",
              "      <th>Min_Platlets</th>\n",
              "      <th>Init_ESR</th>\n",
              "      <th>Max_ESR</th>\n",
              "      <th>Init_Fibrinogen</th>\n",
              "      <th>Max_Fibrinogen</th>\n",
              "      <th>Initial_LDH</th>\n",
              "      <th>Max_LDH</th>\n",
              "      <th>Max_Leucocytes</th>\n",
              "      <th>Min_Leucocytes</th>\n",
              "      <th>Max_Creatinine</th>\n",
              "      <th>Gender</th>\n",
              "      <th>initial_CRP</th>\n",
              "      <th>Max_CRP</th>\n",
              "      <th>Severity</th>\n",
              "      <th>IHD</th>\n",
              "      <th>COPD</th>\n",
              "      <th>Bronchial_asthma</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Diabetes</th>\n",
              "      <th>ALT</th>\n",
              "      <th>AST</th>\n",
              "      <th>duration</th>\n",
              "      <th>Age</th>\n",
              "      <th>Max_Creatinine_mg_dl</th>\n",
              "      <th>RF_0.0</th>\n",
              "      <th>RF_1.0</th>\n",
              "      <th>RF_2.0</th>\n",
              "      <th>RF_3.0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.0</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.0</td>\n",
              "      <td>455.000000</td>\n",
              "      <td>455.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.386338</td>\n",
              "      <td>272.991073</td>\n",
              "      <td>243.512027</td>\n",
              "      <td>35.802978</td>\n",
              "      <td>44.946722</td>\n",
              "      <td>5.026581</td>\n",
              "      <td>5.722059</td>\n",
              "      <td>547.508535</td>\n",
              "      <td>604.904392</td>\n",
              "      <td>13.327089</td>\n",
              "      <td>4.321269</td>\n",
              "      <td>180.226381</td>\n",
              "      <td>0.606593</td>\n",
              "      <td>125.546297</td>\n",
              "      <td>76.609696</td>\n",
              "      <td>0.147253</td>\n",
              "      <td>0.138462</td>\n",
              "      <td>0.294505</td>\n",
              "      <td>0.017582</td>\n",
              "      <td>0.006593</td>\n",
              "      <td>0.0</td>\n",
              "      <td>55.990353</td>\n",
              "      <td>53.251078</td>\n",
              "      <td>25.540659</td>\n",
              "      <td>54.593407</td>\n",
              "      <td>0.923476</td>\n",
              "      <td>0.052747</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.114286</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.205192</td>\n",
              "      <td>74.932566</td>\n",
              "      <td>69.631252</td>\n",
              "      <td>13.097798</td>\n",
              "      <td>11.330529</td>\n",
              "      <td>1.356881</td>\n",
              "      <td>2.192660</td>\n",
              "      <td>206.368371</td>\n",
              "      <td>217.105474</td>\n",
              "      <td>3.132034</td>\n",
              "      <td>1.385246</td>\n",
              "      <td>131.230188</td>\n",
              "      <td>0.489043</td>\n",
              "      <td>45.250347</td>\n",
              "      <td>58.766017</td>\n",
              "      <td>0.354748</td>\n",
              "      <td>0.345764</td>\n",
              "      <td>0.456322</td>\n",
              "      <td>0.131573</td>\n",
              "      <td>0.081021</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39.581669</td>\n",
              "      <td>35.017593</td>\n",
              "      <td>5.169590</td>\n",
              "      <td>6.262921</td>\n",
              "      <td>0.373357</td>\n",
              "      <td>0.223775</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.318508</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.070989</td>\n",
              "      <td>27.380485</td>\n",
              "      <td>115.368634</td>\n",
              "      <td>12.698456</td>\n",
              "      <td>10.361228</td>\n",
              "      <td>2.219719</td>\n",
              "      <td>2.043650</td>\n",
              "      <td>100.881774</td>\n",
              "      <td>137.316848</td>\n",
              "      <td>5.740623</td>\n",
              "      <td>1.002554</td>\n",
              "      <td>60.344698</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>10.855703</td>\n",
              "      <td>30.008551</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.020941</td>\n",
              "      <td>30.085242</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>0.188863</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.113772</td>\n",
              "      <td>228.000611</td>\n",
              "      <td>183.086629</td>\n",
              "      <td>25.316169</td>\n",
              "      <td>38.436987</td>\n",
              "      <td>4.070039</td>\n",
              "      <td>3.923907</td>\n",
              "      <td>444.847166</td>\n",
              "      <td>456.580210</td>\n",
              "      <td>11.133924</td>\n",
              "      <td>3.325584</td>\n",
              "      <td>83.889589</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>91.629345</td>\n",
              "      <td>36.743106</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>37.371640</td>\n",
              "      <td>37.814190</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>0.797067</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.445899</td>\n",
              "      <td>276.600858</td>\n",
              "      <td>227.897332</td>\n",
              "      <td>32.004911</td>\n",
              "      <td>48.867374</td>\n",
              "      <td>4.983365</td>\n",
              "      <td>5.649169</td>\n",
              "      <td>525.946909</td>\n",
              "      <td>609.022492</td>\n",
              "      <td>13.358740</td>\n",
              "      <td>4.323584</td>\n",
              "      <td>107.923652</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>122.207380</td>\n",
              "      <td>45.696484</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>47.686486</td>\n",
              "      <td>43.533838</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>54.000000</td>\n",
              "      <td>0.873807</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.553876</td>\n",
              "      <td>320.185041</td>\n",
              "      <td>298.943512</td>\n",
              "      <td>47.404418</td>\n",
              "      <td>52.864659</td>\n",
              "      <td>5.929623</td>\n",
              "      <td>7.515613</td>\n",
              "      <td>708.560002</td>\n",
              "      <td>733.438724</td>\n",
              "      <td>15.259827</td>\n",
              "      <td>5.214827</td>\n",
              "      <td>286.395224</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>154.000725</td>\n",
              "      <td>99.140627</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>60.585912</td>\n",
              "      <td>49.849732</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>59.000000</td>\n",
              "      <td>0.950945</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.754231</td>\n",
              "      <td>500.193976</td>\n",
              "      <td>426.710265</td>\n",
              "      <td>67.771448</td>\n",
              "      <td>62.237080</td>\n",
              "      <td>9.181714</td>\n",
              "      <td>9.998107</td>\n",
              "      <td>1014.359489</td>\n",
              "      <td>1204.579415</td>\n",
              "      <td>22.767736</td>\n",
              "      <td>10.120474</td>\n",
              "      <td>572.987592</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>245.573591</td>\n",
              "      <td>248.637988</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>345.486946</td>\n",
              "      <td>217.449589</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>4.482477</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Max_Procalcitonine  Max_Platlets  ...      RF_2.0  RF_3.0\n",
              "count          455.000000    455.000000  ...  455.000000   455.0\n",
              "mean             0.386338    272.991073  ...    0.114286     0.0\n",
              "std              0.205192     74.932566  ...    0.318508     0.0\n",
              "min              0.070989     27.380485  ...    0.000000     0.0\n",
              "25%              0.113772    228.000611  ...    0.000000     0.0\n",
              "50%              0.445899    276.600858  ...    0.000000     0.0\n",
              "75%              0.553876    320.185041  ...    0.000000     0.0\n",
              "max              0.754231    500.193976  ...    1.000000     0.0\n",
              "\n",
              "[8 rows x 30 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OI8HyA0qlYCQ"
      },
      "source": [
        "data4 = new_data_1.copy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ifd_WoeUlYKe"
      },
      "source": [
        "data4.to_csv('Fourth_model_data.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0ikXXtsDlYP3"
      },
      "source": [
        "df1 = pd.read_csv('/content/First_model_data.csv')\r\n",
        "df2 = pd.read_csv('/content/Second_model_data.csv')\r\n",
        "df3 = pd.read_csv('/content/Third_mpodel_data.csv')\r\n",
        "df4 = pd.read_csv('/content/Fourth_model_data.csv')"
      ],
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vRNuVbfRlYTW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "9e9cfa24-ff9e-4774-b296-69cdeec30115"
      },
      "source": [
        "df1['Max_Procalcitonine'].hist()"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f638e5630f0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tBu6iPKslYXP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "187f15d2-0c77-4b6e-f4f2-93b3488b3b7c"
      },
      "source": [
        "df2['Max_Procalcitonine'].hist()"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f638e504f98>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "BGyctLiV4eRV",
        "outputId": "c2184342-0a60-46a8-861f-d078bb8a601a"
      },
      "source": [
        "df3['Max_Procalcitonine'].hist()"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f638e03f668>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "gGJMqVqS4hhI",
        "outputId": "5e67888f-9aff-4269-e851-7d53b7c77a2b"
      },
      "source": [
        "df4['Max_Procalcitonine'].hist()"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f638e007f98>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "NwlS4q8M4ixW",
        "outputId": "f987e3c9-e4b0-43f2-8416-401e84c7169b"
      },
      "source": [
        "df5 = df.append(df4)\r\n",
        "df5['Max_Procalcitonine'].hist()"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f638de57a90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "tkkYhjKI4kid",
        "outputId": "d04efa52-9d1f-4bf4-83b3-b5dadf34a76d"
      },
      "source": [
        "df6 = df5.append(df1)\r\n",
        "df6['Max_Procalcitonine'].hist()"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f638de1e0f0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 92
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cFZXBfTC48Rb"
      },
      "source": [
        "df7 = df6.append(df2).append(df3)"
      ],
      "execution_count": 94,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "BCJNILYX5Bdj",
        "outputId": "287f06b2-dae4-4bd6-fe63-175175f8e077"
      },
      "source": [
        "df7['Max_Procalcitonine'].hist()"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f638ddcb748>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 95
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-TvZN1E35rQT"
      },
      "source": [
        "dataFrame = df7.copy()"
      ],
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ogoD_aWE5rXi"
      },
      "source": [
        ""
      ],
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g9TV-C7L5rgf"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lcny73GF5rmT"
      },
      "source": [
        "# # т.к. в наших данных есть параметр \"креатинин\", для того, чтобы улучшить данные, давайте высчитаем скорость клубочковой\r\n",
        "# фильтрации. Однако, для начала надо перевести мкмоль на литр в милиграммы на децилитр по формуле\r\n",
        "# мкмоль на литр / 113\r\n",
        "dataFrame['Max_Creatinine_mg_dl'] = dataFrame['Max_Creatinine'] / 113 "
      ],
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qi6Y0rh_5VNS"
      },
      "source": [
        "# т.к. в наших данных есть параметр \"креатинин\", для того, чтобы улучшить данные, давайте высчитаем скорость клубочковой\r\n",
        "# фильтрации\r\n",
        "if dataFrame.Gender.all() == 'male':\r\n",
        "    if dataFrame.Max_Creatinine_mg_dl.all() < .9:\r\n",
        "        dataFrame['GFR'] = 141 * (((dataFrame['Max_Creatinine_mg_dl'] /\r\n",
        "                                    0.9)) ** (-0.411)) * 0.993 ** dataFrame['Age']\r\n",
        "    else:\r\n",
        "        dataFrame['GFR'] = 141 * (((hf['Max_Creatinine_mg_dl'] /\r\n",
        "                                    0.9)) ** (-1.209)) * 0.993 ** dataFrame['Age']\r\n",
        "else:\r\n",
        "    if dataFrame.Max_Creatinine_mg_dl.all() < .7:\r\n",
        "        dataFrame['GFR'] = 144 * (((dataFrame['Max_Creatinine_mg_dl'] / \r\n",
        "                                    0.7)) ** (-0.329)) * 0.993 ** dataFrame['Age']\r\n",
        "    else:\r\n",
        "        dataFrame['GFR'] = 144 * (((dataFrame['Max_Creatinine_mg_dl'] / \r\n",
        "                                    0.7)) ** (-1.209)) * 0.993 ** dataFrame['Age']"
      ],
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g5rh43Rk5zKf"
      },
      "source": [
        "dataFrame[\"L/Pl_Ratio\"] = dataFrame['Max_Procalcitonine'] * 100 - 24"
      ],
      "execution_count": 99,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xCGGJYF36FJH"
      },
      "source": [
        "import tensorflow as tf\r\n",
        "from tensorflow import keras\r\n",
        "\r\n",
        "import os\r\n",
        "import tempfile\r\n",
        "\r\n",
        "import matplotlib as mpl\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import numpy as np\r\n",
        "import pandas as pd\r\n",
        "import seaborn as sns\r\n",
        "\r\n",
        "import sklearn\r\n",
        "from sklearn.metrics import confusion_matrix\r\n",
        "from sklearn.model_selection import train_test_split\r\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OiUKNIv06Mpe"
      },
      "source": [
        "mpl.rcParams['figure.figsize'] = (12, 10)\r\n",
        "colors = plt.rcParams['axes.prop_cycle'].by_key()['color']"
      ],
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rDBTFAUC6PLF"
      },
      "source": [
        "def ind_ab(x):\r\n",
        "  if x > .4:\r\n",
        "    return 1\r\n",
        "  else:\r\n",
        "    return 0"
      ],
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hfe5KNGJ6RoG"
      },
      "source": [
        "dataFrame['Ab_ind'] = dataFrame['Max_Procalcitonine'].apply(ind_ab)"
      ],
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wcKa3ZWo6WHR"
      },
      "source": [
        "dataFrame = dataFrame.drop(['Max_Procalcitonine'], axis=1)"
      ],
      "execution_count": 104,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c2FHEsEM6bz8",
        "outputId": "67e60a69-c284-4119-f70b-bdb25a44ed8d"
      },
      "source": [
        "neg, pos = np.bincount(dataFrame['Ab_ind'])\r\n",
        "total = neg + pos\r\n",
        "print('Examples:\\n    Total: {}\\n    Positive: {} ({:.2f}% of total)\\n'.format(\r\n",
        "    total, pos, 100 * pos / total))"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Examples:\n",
            "    Total: 2652\n",
            "    Positive: 442 (16.67% of total)\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wk3TwVae6f_m"
      },
      "source": [
        "cleaned_df = dataFrame.copy()\r\n"
      ],
      "execution_count": 106,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RNGEg89A6vuY"
      },
      "source": [
        "cleaned_df = cleaned_df.round(2)\r\n",
        "cleaned_df = cleaned_df.reset_index()"
      ],
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Iu06nJ4K7MU6"
      },
      "source": [
        "def clean_dataset(df):\r\n",
        "    assert isinstance(df, pd.DataFrame), \"df needs to be a pd.DataFrame\"\r\n",
        "    df.dropna(inplace=True)\r\n",
        "    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\r\n",
        "    return df[indices_to_keep].astype(np.float64)"
      ],
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 438
        },
        "id": "WIbfuH_S7Ne0",
        "outputId": "09583d02-4f00-4e74-cf0c-efdb072d9d7a"
      },
      "source": [
        "clean_dataset(cleaned_df)"
      ],
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Max_Platlets</th>\n",
              "      <th>Min_Platlets</th>\n",
              "      <th>Init_ESR</th>\n",
              "      <th>Max_ESR</th>\n",
              "      <th>Init_Fibrinogen</th>\n",
              "      <th>Max_Fibrinogen</th>\n",
              "      <th>Initial_LDH</th>\n",
              "      <th>Max_LDH</th>\n",
              "      <th>Max_Leucocytes</th>\n",
              "      <th>Min_Leucocytes</th>\n",
              "      <th>Max_Creatinine</th>\n",
              "      <th>Gender</th>\n",
              "      <th>initial_CRP</th>\n",
              "      <th>Max_CRP</th>\n",
              "      <th>Severity</th>\n",
              "      <th>IHD</th>\n",
              "      <th>COPD</th>\n",
              "      <th>Bronchial_asthma</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Diabetes</th>\n",
              "      <th>ALT</th>\n",
              "      <th>AST</th>\n",
              "      <th>duration</th>\n",
              "      <th>Age</th>\n",
              "      <th>Max_Creatinine_mg_dl</th>\n",
              "      <th>RF_0.0</th>\n",
              "      <th>RF_1.0</th>\n",
              "      <th>RF_2.0</th>\n",
              "      <th>RF_3.0</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>GFR</th>\n",
              "      <th>L/Pl_Ratio</th>\n",
              "      <th>Ab_ind</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>0.0</td>\n",
              "      <td>360.03</td>\n",
              "      <td>198.84</td>\n",
              "      <td>25.79</td>\n",
              "      <td>61.75</td>\n",
              "      <td>8.32</td>\n",
              "      <td>5.98</td>\n",
              "      <td>644.84</td>\n",
              "      <td>616.60</td>\n",
              "      <td>11.11</td>\n",
              "      <td>2.55</td>\n",
              "      <td>105.84</td>\n",
              "      <td>0.0</td>\n",
              "      <td>170.87</td>\n",
              "      <td>137.96</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39.90</td>\n",
              "      <td>30.87</td>\n",
              "      <td>31.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0.94</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>87.06</td>\n",
              "      <td>23.99</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>1.0</td>\n",
              "      <td>352.03</td>\n",
              "      <td>223.59</td>\n",
              "      <td>52.29</td>\n",
              "      <td>60.90</td>\n",
              "      <td>3.52</td>\n",
              "      <td>2.04</td>\n",
              "      <td>573.41</td>\n",
              "      <td>785.90</td>\n",
              "      <td>19.73</td>\n",
              "      <td>1.40</td>\n",
              "      <td>315.84</td>\n",
              "      <td>0.0</td>\n",
              "      <td>129.96</td>\n",
              "      <td>36.63</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>60.50</td>\n",
              "      <td>33.96</td>\n",
              "      <td>28.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>2.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>381.0</td>\n",
              "      <td>62.49</td>\n",
              "      <td>-14.53</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>2.0</td>\n",
              "      <td>293.92</td>\n",
              "      <td>169.91</td>\n",
              "      <td>44.86</td>\n",
              "      <td>46.92</td>\n",
              "      <td>4.44</td>\n",
              "      <td>4.95</td>\n",
              "      <td>767.30</td>\n",
              "      <td>916.68</td>\n",
              "      <td>11.77</td>\n",
              "      <td>6.55</td>\n",
              "      <td>122.20</td>\n",
              "      <td>1.0</td>\n",
              "      <td>89.88</td>\n",
              "      <td>52.61</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>61.35</td>\n",
              "      <td>37.91</td>\n",
              "      <td>30.0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1.08</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>503.0</td>\n",
              "      <td>89.71</td>\n",
              "      <td>15.52</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>3.0</td>\n",
              "      <td>284.43</td>\n",
              "      <td>213.23</td>\n",
              "      <td>51.23</td>\n",
              "      <td>22.81</td>\n",
              "      <td>4.41</td>\n",
              "      <td>4.29</td>\n",
              "      <td>648.07</td>\n",
              "      <td>665.75</td>\n",
              "      <td>19.21</td>\n",
              "      <td>4.46</td>\n",
              "      <td>102.21</td>\n",
              "      <td>1.0</td>\n",
              "      <td>94.47</td>\n",
              "      <td>37.68</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>61.72</td>\n",
              "      <td>41.83</td>\n",
              "      <td>28.0</td>\n",
              "      <td>57.0</td>\n",
              "      <td>0.90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>525.0</td>\n",
              "      <td>88.68</td>\n",
              "      <td>29.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>4.0</td>\n",
              "      <td>332.54</td>\n",
              "      <td>160.85</td>\n",
              "      <td>18.84</td>\n",
              "      <td>49.46</td>\n",
              "      <td>7.71</td>\n",
              "      <td>6.68</td>\n",
              "      <td>473.70</td>\n",
              "      <td>282.68</td>\n",
              "      <td>12.94</td>\n",
              "      <td>2.56</td>\n",
              "      <td>423.69</td>\n",
              "      <td>0.0</td>\n",
              "      <td>154.65</td>\n",
              "      <td>42.22</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>34.54</td>\n",
              "      <td>40.68</td>\n",
              "      <td>17.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>3.75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>542.0</td>\n",
              "      <td>60.43</td>\n",
              "      <td>30.58</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2647</th>\n",
              "      <td>89.0</td>\n",
              "      <td>377.05</td>\n",
              "      <td>114.26</td>\n",
              "      <td>6.60</td>\n",
              "      <td>38.72</td>\n",
              "      <td>2.34</td>\n",
              "      <td>8.44</td>\n",
              "      <td>322.19</td>\n",
              "      <td>879.17</td>\n",
              "      <td>14.73</td>\n",
              "      <td>2.37</td>\n",
              "      <td>260.45</td>\n",
              "      <td>0.0</td>\n",
              "      <td>252.48</td>\n",
              "      <td>171.62</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>35.27</td>\n",
              "      <td>91.77</td>\n",
              "      <td>21.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>2.30</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>38822.0</td>\n",
              "      <td>59.09</td>\n",
              "      <td>-14.12</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2648</th>\n",
              "      <td>90.0</td>\n",
              "      <td>33.96</td>\n",
              "      <td>189.31</td>\n",
              "      <td>29.94</td>\n",
              "      <td>21.28</td>\n",
              "      <td>2.01</td>\n",
              "      <td>3.51</td>\n",
              "      <td>753.88</td>\n",
              "      <td>160.46</td>\n",
              "      <td>15.35</td>\n",
              "      <td>12.27</td>\n",
              "      <td>157.92</td>\n",
              "      <td>0.0</td>\n",
              "      <td>162.55</td>\n",
              "      <td>171.02</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>89.04</td>\n",
              "      <td>216.53</td>\n",
              "      <td>12.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1.40</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>38902.0</td>\n",
              "      <td>87.83</td>\n",
              "      <td>-16.09</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2649</th>\n",
              "      <td>91.0</td>\n",
              "      <td>401.37</td>\n",
              "      <td>373.75</td>\n",
              "      <td>48.17</td>\n",
              "      <td>10.74</td>\n",
              "      <td>5.71</td>\n",
              "      <td>5.56</td>\n",
              "      <td>426.52</td>\n",
              "      <td>413.61</td>\n",
              "      <td>19.53</td>\n",
              "      <td>6.93</td>\n",
              "      <td>173.74</td>\n",
              "      <td>0.0</td>\n",
              "      <td>88.34</td>\n",
              "      <td>265.60</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>65.43</td>\n",
              "      <td>138.34</td>\n",
              "      <td>20.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>1.54</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39189.0</td>\n",
              "      <td>63.37</td>\n",
              "      <td>-11.12</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2650</th>\n",
              "      <td>92.0</td>\n",
              "      <td>220.22</td>\n",
              "      <td>183.06</td>\n",
              "      <td>14.35</td>\n",
              "      <td>34.55</td>\n",
              "      <td>6.85</td>\n",
              "      <td>5.80</td>\n",
              "      <td>496.68</td>\n",
              "      <td>817.29</td>\n",
              "      <td>21.72</td>\n",
              "      <td>8.30</td>\n",
              "      <td>145.47</td>\n",
              "      <td>0.0</td>\n",
              "      <td>120.92</td>\n",
              "      <td>120.41</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>69.34</td>\n",
              "      <td>78.76</td>\n",
              "      <td>19.0</td>\n",
              "      <td>73.0</td>\n",
              "      <td>1.29</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39430.0</td>\n",
              "      <td>70.57</td>\n",
              "      <td>-5.12</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2651</th>\n",
              "      <td>93.0</td>\n",
              "      <td>485.96</td>\n",
              "      <td>212.53</td>\n",
              "      <td>17.16</td>\n",
              "      <td>55.44</td>\n",
              "      <td>4.96</td>\n",
              "      <td>7.59</td>\n",
              "      <td>113.27</td>\n",
              "      <td>434.90</td>\n",
              "      <td>2.77</td>\n",
              "      <td>8.45</td>\n",
              "      <td>111.73</td>\n",
              "      <td>0.0</td>\n",
              "      <td>48.07</td>\n",
              "      <td>49.69</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>104.50</td>\n",
              "      <td>94.58</td>\n",
              "      <td>7.0</td>\n",
              "      <td>86.0</td>\n",
              "      <td>0.99</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39452.0</td>\n",
              "      <td>70.25</td>\n",
              "      <td>-14.97</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2576 rows × 34 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      index  Max_Platlets  Min_Platlets  ...    GFR  L/Pl_Ratio  Ab_ind\n",
              "76      0.0        360.03        198.84  ...  87.06       23.99     1.0\n",
              "77      1.0        352.03        223.59  ...  62.49      -14.53     0.0\n",
              "78      2.0        293.92        169.91  ...  89.71       15.52     0.0\n",
              "79      3.0        284.43        213.23  ...  88.68       29.00     1.0\n",
              "80      4.0        332.54        160.85  ...  60.43       30.58     1.0\n",
              "...     ...           ...           ...  ...    ...         ...     ...\n",
              "2647   89.0        377.05        114.26  ...  59.09      -14.12     0.0\n",
              "2648   90.0         33.96        189.31  ...  87.83      -16.09     0.0\n",
              "2649   91.0        401.37        373.75  ...  63.37      -11.12     0.0\n",
              "2650   92.0        220.22        183.06  ...  70.57       -5.12     0.0\n",
              "2651   93.0        485.96        212.53  ...  70.25      -14.97     0.0\n",
              "\n",
              "[2576 rows x 34 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S_bBoD1w6kzt"
      },
      "source": [
        "# Use a utility from sklearn to split and shuffle our dataset.\r\n",
        "train_df, test_df = train_test_split(cleaned_df, test_size=0.2)\r\n",
        "train_df, val_df = train_test_split(train_df, test_size=0.2)\r\n",
        "\r\n",
        "# Form np arrays of labels and features.\r\n",
        "train_labels = np.array(train_df.pop('Ab_ind'))\r\n",
        "bool_train_labels = train_labels != 0\r\n",
        "val_labels = np.array(val_df.pop('Ab_ind'))\r\n",
        "test_labels = np.array(test_df.pop('Ab_ind'))\r\n",
        "\r\n",
        "train_features = np.array(train_df)\r\n",
        "val_features = np.array(val_df)\r\n",
        "test_features = np.array(test_df)"
      ],
      "execution_count": 117,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KYfJSYe06oEP",
        "outputId": "835fd3a4-eeac-49d4-c8b8-283e5173fe4e"
      },
      "source": [
        "scaler = StandardScaler()\r\n",
        "train_features = scaler.fit_transform(train_features)\r\n",
        "\r\n",
        "val_features = scaler.transform(val_features)\r\n",
        "test_features = scaler.transform(test_features)\r\n",
        "\r\n",
        "train_features = np.clip(train_features, -5, 5)\r\n",
        "val_features = np.clip(val_features, -5, 5)\r\n",
        "test_features = np.clip(test_features, -5, 5)\r\n",
        "\r\n",
        "\r\n",
        "print('Training labels shape:', train_labels.shape)\r\n",
        "print('Validation labels shape:', val_labels.shape)\r\n",
        "print('Test labels shape:', test_labels.shape)\r\n",
        "\r\n",
        "print('Training features shape:', train_features.shape)\r\n",
        "print('Validation features shape:', val_features.shape)\r\n",
        "print('Test features shape:', test_features.shape)"
      ],
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training labels shape: (1648,)\n",
            "Validation labels shape: (412,)\n",
            "Test labels shape: (516,)\n",
            "Training features shape: (1648, 33)\n",
            "Validation features shape: (412, 33)\n",
            "Test features shape: (516, 33)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 956
        },
        "id": "hyZkeMD66qNr",
        "outputId": "1cefe4e1-64f6-4aff-c179-28e3010366e1"
      },
      "source": [
        "pos_df = pd.DataFrame(train_features[ bool_train_labels], columns=train_df.columns)\r\n",
        "neg_df = pd.DataFrame(train_features[~bool_train_labels], columns=train_df.columns)\r\n",
        "\r\n",
        "sns.jointplot(pos_df['Max_Platlets'], pos_df['Max_Creatinine'],\r\n",
        "              kind='hex', xlim=(-5,5), ylim=(-5,5))\r\n",
        "plt.suptitle(\"Positive distribution\")\r\n",
        "\r\n",
        "sns.jointplot(neg_df['Max_Platlets'], neg_df['Max_Creatinine'],\r\n",
        "              kind='hex', xlim=(-5,5), ylim=(-5,5))\r\n",
        "_ = plt.suptitle(\"Negative distribution\")"
      ],
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x432 with 3 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x432 with 3 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HiZVyroG7VXB"
      },
      "source": [
        "METRICS = [\r\n",
        "      keras.metrics.TruePositives(name='tp'),\r\n",
        "      keras.metrics.FalsePositives(name='fp'),\r\n",
        "      keras.metrics.TrueNegatives(name='tn'),\r\n",
        "      keras.metrics.FalseNegatives(name='fn'), \r\n",
        "      keras.metrics.BinaryAccuracy(name='accuracy'),\r\n",
        "      keras.metrics.Precision(name='precision'),\r\n",
        "      keras.metrics.Recall(name='recall'),\r\n",
        "      keras.metrics.AUC(name='auc'),\r\n",
        "]\r\n",
        "\r\n",
        "def make_model(metrics=METRICS, output_bias=None):\r\n",
        "  if output_bias is not None:\r\n",
        "    output_bias = tf.keras.initializers.Constant(output_bias)\r\n",
        "  model = keras.Sequential([\r\n",
        "      keras.layers.Dense(\r\n",
        "          16, activation='relu',\r\n",
        "          input_shape=(train_features.shape[-1],)),\r\n",
        "      keras.layers.Dropout(0.5),\r\n",
        "      keras.layers.Dense(1, activation='sigmoid',\r\n",
        "                         bias_initializer=output_bias),\r\n",
        "  ])\r\n",
        "\r\n",
        "  model.compile(\r\n",
        "      optimizer=keras.optimizers.Adam(lr=1e-3),\r\n",
        "      loss=keras.losses.BinaryCrossentropy(),\r\n",
        "      metrics=metrics)\r\n",
        "\r\n",
        "  return model"
      ],
      "execution_count": 120,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bYeBPGZ57aWu"
      },
      "source": [
        "EPOCHS = 100\r\n",
        "BATCH_SIZE = 2048\r\n",
        "\r\n",
        "early_stopping = tf.keras.callbacks.EarlyStopping(\r\n",
        "    monitor='val_auc', \r\n",
        "    verbose=1,\r\n",
        "    patience=10,\r\n",
        "    mode='max',\r\n",
        "    restore_best_weights=True)"
      ],
      "execution_count": 121,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_4tlIXAN7cNM",
        "outputId": "2449fe64-2ff8-431f-f163-6a0811a861f5"
      },
      "source": [
        "model = make_model()\r\n",
        "model.summary()"
      ],
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense (Dense)                (None, 16)                544       \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 16)                0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 17        \n",
            "=================================================================\n",
            "Total params: 561\n",
            "Trainable params: 561\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2VVtXoH17eFC",
        "outputId": "e067de1c-c454-4338-e08b-f3c8eebe61ba"
      },
      "source": [
        "results = model.evaluate(train_features, train_labels, batch_size=BATCH_SIZE, verbose=0)\r\n",
        "print(\"Loss: {:0.4f}\".format(results[0]))"
      ],
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Loss: 2.2487\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GFKQggYZ7g0d",
        "outputId": "0e22e5ac-dfdd-4816-da91-666fec1c364d"
      },
      "source": [
        "initial_bias = np.log([pos/neg])\r\n",
        "initial_bias"
      ],
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-1.60943791])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "byyOytXK7izb",
        "outputId": "dfe8500b-8b35-442a-dcf0-4e6f0547c221"
      },
      "source": [
        "model = make_model(output_bias=initial_bias)\r\n",
        "model.predict(train_features[:10])"
      ],
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.30487305],\n",
              "       [0.17071885],\n",
              "       [0.1639758 ],\n",
              "       [0.088034  ],\n",
              "       [0.0354684 ],\n",
              "       [0.4053998 ],\n",
              "       [0.1218718 ],\n",
              "       [0.17038453],\n",
              "       [0.10596728],\n",
              "       [0.14458203]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VwMLaJng7kwD",
        "outputId": "49439480-5626-4561-9d10-a374ff75705a"
      },
      "source": [
        "results = model.evaluate(train_features, train_labels, batch_size=BATCH_SIZE, verbose=0)\r\n",
        "print(\"Loss: {:0.4f}\".format(results[0]))"
      ],
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Loss: 0.5061\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ez9F8WeR7m_Z"
      },
      "source": [
        "initial_weights = os.path.join(tempfile.mkdtemp(), 'initial_weights')\r\n",
        "model.save_weights(initial_weights)"
      ],
      "execution_count": 127,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0Dv-2d2n7pPn"
      },
      "source": [
        "model = make_model()\r\n",
        "model.load_weights(initial_weights)\r\n",
        "model.layers[-1].bias.assign([0.0])\r\n",
        "zero_bias_history = model.fit(\r\n",
        "    train_features,\r\n",
        "    train_labels,\r\n",
        "    batch_size=BATCH_SIZE,\r\n",
        "    epochs=20,\r\n",
        "    validation_data=(val_features, val_labels), \r\n",
        "    verbose=0)"
      ],
      "execution_count": 128,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LkBEv3l17rq9"
      },
      "source": [
        "model = make_model()\r\n",
        "model.load_weights(initial_weights)\r\n",
        "careful_bias_history = model.fit(\r\n",
        "    train_features,\r\n",
        "    train_labels,\r\n",
        "    batch_size=BATCH_SIZE,\r\n",
        "    epochs=20,\r\n",
        "    validation_data=(val_features, val_labels), \r\n",
        "    verbose=0)"
      ],
      "execution_count": 129,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1UKZjyJ-7uO1"
      },
      "source": [
        "def plot_loss(history, label, n):\r\n",
        "  # Use a log scale on y-axis to show the wide range of values.\r\n",
        "  plt.semilogy(history.epoch, history.history['loss'],\r\n",
        "               color=colors[n], label='Train ' + label)\r\n",
        "  plt.semilogy(history.epoch, history.history['val_loss'],\r\n",
        "               color=colors[n], label='Val ' + label,\r\n",
        "               linestyle=\"--\")\r\n",
        "  plt.xlabel('Epoch')\r\n",
        "  plt.ylabel('Loss')"
      ],
      "execution_count": 130,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "2yyi-PmA7xMn",
        "outputId": "f25e9526-0488-4dd0-aa5e-36033cd88fab"
      },
      "source": [
        "plot_loss(zero_bias_history, \"Zero Bias\", 0)\r\n",
        "plot_loss(careful_bias_history, \"Careful Bias\", 1)"
      ],
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dckRGd4h7zQk",
        "outputId": "cd0ce52b-7bae-4cde-f9d4-9904c7fd985f"
      },
      "source": [
        "model = make_model()\r\n",
        "model.load_weights(initial_weights)\r\n",
        "baseline_history = model.fit(\r\n",
        "    train_features,\r\n",
        "    train_labels,\r\n",
        "    batch_size=BATCH_SIZE,\r\n",
        "    epochs=EPOCHS,\r\n",
        "    callbacks=[early_stopping],\r\n",
        "    validation_data=(val_features, val_labels))"
      ],
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "1/1 [==============================] - 3s 3s/step - loss: 0.6091 - tp: 32.0000 - fp: 170.0000 - tn: 1542.0000 - fn: 316.0000 - accuracy: 0.7641 - precision: 0.1584 - recall: 0.0920 - auc: 0.5115 - val_loss: 0.5271 - val_tp: 2.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 72.0000 - val_accuracy: 0.7961 - val_precision: 0.1429 - val_recall: 0.0270 - val_auc: 0.4878\n",
            "Epoch 2/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.5875 - tp: 38.0000 - fp: 137.0000 - tn: 1237.0000 - fn: 236.0000 - accuracy: 0.7737 - precision: 0.2171 - recall: 0.1387 - auc: 0.4984 - val_loss: 0.5218 - val_tp: 1.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 73.0000 - val_accuracy: 0.7937 - val_precision: 0.0769 - val_recall: 0.0135 - val_auc: 0.4981\n",
            "Epoch 3/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 0.5566 - tp: 29.0000 - fp: 124.0000 - tn: 1250.0000 - fn: 245.0000 - accuracy: 0.7761 - precision: 0.1895 - recall: 0.1058 - auc: 0.5363 - val_loss: 0.5166 - val_tp: 1.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 73.0000 - val_accuracy: 0.7937 - val_precision: 0.0769 - val_recall: 0.0135 - val_auc: 0.5087\n",
            "Epoch 4/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 0.6015 - tp: 21.0000 - fp: 143.0000 - tn: 1231.0000 - fn: 253.0000 - accuracy: 0.7597 - precision: 0.1280 - recall: 0.0766 - auc: 0.4790 - val_loss: 0.5114 - val_tp: 1.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 73.0000 - val_accuracy: 0.7985 - val_precision: 0.0909 - val_recall: 0.0135 - val_auc: 0.5190\n",
            "Epoch 5/100\n",
            "1/1 [==============================] - 0s 48ms/step - loss: 0.5662 - tp: 34.0000 - fp: 129.0000 - tn: 1245.0000 - fn: 240.0000 - accuracy: 0.7761 - precision: 0.2086 - recall: 0.1241 - auc: 0.5147 - val_loss: 0.5063 - val_tp: 1.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 73.0000 - val_accuracy: 0.7985 - val_precision: 0.0909 - val_recall: 0.0135 - val_auc: 0.5312\n",
            "Epoch 6/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 0.5533 - tp: 28.0000 - fp: 130.0000 - tn: 1244.0000 - fn: 246.0000 - accuracy: 0.7718 - precision: 0.1772 - recall: 0.1022 - auc: 0.5293 - val_loss: 0.5012 - val_tp: 1.0000 - val_fp: 9.0000 - val_tn: 329.0000 - val_fn: 73.0000 - val_accuracy: 0.8010 - val_precision: 0.1000 - val_recall: 0.0135 - val_auc: 0.5428\n",
            "Epoch 7/100\n",
            "1/1 [==============================] - 0s 51ms/step - loss: 0.5747 - tp: 23.0000 - fp: 116.0000 - tn: 1258.0000 - fn: 251.0000 - accuracy: 0.7773 - precision: 0.1655 - recall: 0.0839 - auc: 0.4937 - val_loss: 0.4963 - val_tp: 1.0000 - val_fp: 8.0000 - val_tn: 330.0000 - val_fn: 73.0000 - val_accuracy: 0.8034 - val_precision: 0.1111 - val_recall: 0.0135 - val_auc: 0.5541\n",
            "Epoch 8/100\n",
            "1/1 [==============================] - 0s 52ms/step - loss: 0.5581 - tp: 32.0000 - fp: 116.0000 - tn: 1258.0000 - fn: 242.0000 - accuracy: 0.7828 - precision: 0.2162 - recall: 0.1168 - auc: 0.5234 - val_loss: 0.4914 - val_tp: 1.0000 - val_fp: 8.0000 - val_tn: 330.0000 - val_fn: 73.0000 - val_accuracy: 0.8034 - val_precision: 0.1111 - val_recall: 0.0135 - val_auc: 0.5675\n",
            "Epoch 9/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 0.5318 - tp: 26.0000 - fp: 113.0000 - tn: 1261.0000 - fn: 248.0000 - accuracy: 0.7809 - precision: 0.1871 - recall: 0.0949 - auc: 0.5641 - val_loss: 0.4867 - val_tp: 1.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 73.0000 - val_accuracy: 0.8058 - val_precision: 0.1250 - val_recall: 0.0135 - val_auc: 0.5807\n",
            "Epoch 10/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 0.5489 - tp: 31.0000 - fp: 107.0000 - tn: 1267.0000 - fn: 243.0000 - accuracy: 0.7876 - precision: 0.2246 - recall: 0.1131 - auc: 0.5295 - val_loss: 0.4822 - val_tp: 1.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 73.0000 - val_accuracy: 0.8058 - val_precision: 0.1250 - val_recall: 0.0135 - val_auc: 0.5904\n",
            "Epoch 11/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.5391 - tp: 36.0000 - fp: 115.0000 - tn: 1259.0000 - fn: 238.0000 - accuracy: 0.7858 - precision: 0.2384 - recall: 0.1314 - auc: 0.5491 - val_loss: 0.4777 - val_tp: 1.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 73.0000 - val_accuracy: 0.8083 - val_precision: 0.1429 - val_recall: 0.0135 - val_auc: 0.6025\n",
            "Epoch 12/100\n",
            "1/1 [==============================] - 0s 61ms/step - loss: 0.5240 - tp: 30.0000 - fp: 94.0000 - tn: 1280.0000 - fn: 244.0000 - accuracy: 0.7949 - precision: 0.2419 - recall: 0.1095 - auc: 0.5558 - val_loss: 0.4735 - val_tp: 1.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 73.0000 - val_accuracy: 0.8083 - val_precision: 0.1429 - val_recall: 0.0135 - val_auc: 0.6149\n",
            "Epoch 13/100\n",
            "1/1 [==============================] - 0s 60ms/step - loss: 0.5115 - tp: 37.0000 - fp: 111.0000 - tn: 1263.0000 - fn: 237.0000 - accuracy: 0.7888 - precision: 0.2500 - recall: 0.1350 - auc: 0.5895 - val_loss: 0.4693 - val_tp: 1.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 73.0000 - val_accuracy: 0.8107 - val_precision: 0.1667 - val_recall: 0.0135 - val_auc: 0.6255\n",
            "Epoch 14/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 0.5039 - tp: 38.0000 - fp: 92.0000 - tn: 1282.0000 - fn: 236.0000 - accuracy: 0.8010 - precision: 0.2923 - recall: 0.1387 - auc: 0.5985 - val_loss: 0.4651 - val_tp: 1.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 73.0000 - val_accuracy: 0.8107 - val_precision: 0.1667 - val_recall: 0.0135 - val_auc: 0.6345\n",
            "Epoch 15/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.5104 - tp: 43.0000 - fp: 111.0000 - tn: 1263.0000 - fn: 231.0000 - accuracy: 0.7925 - precision: 0.2792 - recall: 0.1569 - auc: 0.6016 - val_loss: 0.4611 - val_tp: 1.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 73.0000 - val_accuracy: 0.8107 - val_precision: 0.1667 - val_recall: 0.0135 - val_auc: 0.6439\n",
            "Epoch 16/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.5135 - tp: 38.0000 - fp: 90.0000 - tn: 1284.0000 - fn: 236.0000 - accuracy: 0.8022 - precision: 0.2969 - recall: 0.1387 - auc: 0.5766 - val_loss: 0.4572 - val_tp: 1.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 73.0000 - val_accuracy: 0.8131 - val_precision: 0.2000 - val_recall: 0.0135 - val_auc: 0.6542\n",
            "Epoch 17/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.5171 - tp: 35.0000 - fp: 106.0000 - tn: 1268.0000 - fn: 239.0000 - accuracy: 0.7907 - precision: 0.2482 - recall: 0.1277 - auc: 0.5750 - val_loss: 0.4534 - val_tp: 1.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 73.0000 - val_accuracy: 0.8131 - val_precision: 0.2000 - val_recall: 0.0135 - val_auc: 0.6634\n",
            "Epoch 18/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.4839 - tp: 38.0000 - fp: 83.0000 - tn: 1291.0000 - fn: 236.0000 - accuracy: 0.8064 - precision: 0.3140 - recall: 0.1387 - auc: 0.6133 - val_loss: 0.4497 - val_tp: 1.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 73.0000 - val_accuracy: 0.8131 - val_precision: 0.2000 - val_recall: 0.0135 - val_auc: 0.6745\n",
            "Epoch 19/100\n",
            "1/1 [==============================] - 0s 63ms/step - loss: 0.5036 - tp: 35.0000 - fp: 86.0000 - tn: 1288.0000 - fn: 239.0000 - accuracy: 0.8028 - precision: 0.2893 - recall: 0.1277 - auc: 0.5992 - val_loss: 0.4461 - val_tp: 1.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 73.0000 - val_accuracy: 0.8131 - val_precision: 0.2000 - val_recall: 0.0135 - val_auc: 0.6830\n",
            "Epoch 20/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 0.5030 - tp: 39.0000 - fp: 89.0000 - tn: 1285.0000 - fn: 235.0000 - accuracy: 0.8034 - precision: 0.3047 - recall: 0.1423 - auc: 0.5959 - val_loss: 0.4425 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.6917\n",
            "Epoch 21/100\n",
            "1/1 [==============================] - 0s 46ms/step - loss: 0.4908 - tp: 38.0000 - fp: 88.0000 - tn: 1286.0000 - fn: 236.0000 - accuracy: 0.8034 - precision: 0.3016 - recall: 0.1387 - auc: 0.6098 - val_loss: 0.4391 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7021\n",
            "Epoch 22/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.4941 - tp: 38.0000 - fp: 84.0000 - tn: 1290.0000 - fn: 236.0000 - accuracy: 0.8058 - precision: 0.3115 - recall: 0.1387 - auc: 0.6041 - val_loss: 0.4358 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7096\n",
            "Epoch 23/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.4849 - tp: 35.0000 - fp: 72.0000 - tn: 1302.0000 - fn: 239.0000 - accuracy: 0.8113 - precision: 0.3271 - recall: 0.1277 - auc: 0.6093 - val_loss: 0.4325 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7171\n",
            "Epoch 24/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.4922 - tp: 34.0000 - fp: 83.0000 - tn: 1291.0000 - fn: 240.0000 - accuracy: 0.8040 - precision: 0.2906 - recall: 0.1241 - auc: 0.6075 - val_loss: 0.4294 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7226\n",
            "Epoch 25/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.4820 - tp: 29.0000 - fp: 79.0000 - tn: 1295.0000 - fn: 245.0000 - accuracy: 0.8034 - precision: 0.2685 - recall: 0.1058 - auc: 0.6272 - val_loss: 0.4263 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7323\n",
            "Epoch 26/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.4479 - tp: 55.0000 - fp: 77.0000 - tn: 1297.0000 - fn: 219.0000 - accuracy: 0.8204 - precision: 0.4167 - recall: 0.2007 - auc: 0.6664 - val_loss: 0.4233 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7382\n",
            "Epoch 27/100\n",
            "1/1 [==============================] - 0s 61ms/step - loss: 0.4669 - tp: 50.0000 - fp: 74.0000 - tn: 1300.0000 - fn: 224.0000 - accuracy: 0.8192 - precision: 0.4032 - recall: 0.1825 - auc: 0.6508 - val_loss: 0.4204 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7438\n",
            "Epoch 28/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 0.4693 - tp: 41.0000 - fp: 75.0000 - tn: 1299.0000 - fn: 233.0000 - accuracy: 0.8131 - precision: 0.3534 - recall: 0.1496 - auc: 0.6420 - val_loss: 0.4175 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7491\n",
            "Epoch 29/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.4587 - tp: 43.0000 - fp: 67.0000 - tn: 1307.0000 - fn: 231.0000 - accuracy: 0.8192 - precision: 0.3909 - recall: 0.1569 - auc: 0.6559 - val_loss: 0.4148 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7552\n",
            "Epoch 30/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.4467 - tp: 49.0000 - fp: 66.0000 - tn: 1308.0000 - fn: 225.0000 - accuracy: 0.8234 - precision: 0.4261 - recall: 0.1788 - auc: 0.6770 - val_loss: 0.4121 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7631\n",
            "Epoch 31/100\n",
            "1/1 [==============================] - 0s 67ms/step - loss: 0.4552 - tp: 48.0000 - fp: 68.0000 - tn: 1306.0000 - fn: 226.0000 - accuracy: 0.8216 - precision: 0.4138 - recall: 0.1752 - auc: 0.6630 - val_loss: 0.4095 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7676\n",
            "Epoch 32/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.4650 - tp: 45.0000 - fp: 63.0000 - tn: 1311.0000 - fn: 229.0000 - accuracy: 0.8228 - precision: 0.4167 - recall: 0.1642 - auc: 0.6472 - val_loss: 0.4069 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7720\n",
            "Epoch 33/100\n",
            "1/1 [==============================] - 0s 52ms/step - loss: 0.4346 - tp: 62.0000 - fp: 60.0000 - tn: 1314.0000 - fn: 212.0000 - accuracy: 0.8350 - precision: 0.5082 - recall: 0.2263 - auc: 0.6889 - val_loss: 0.4044 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7770\n",
            "Epoch 34/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 0.4394 - tp: 57.0000 - fp: 70.0000 - tn: 1304.0000 - fn: 217.0000 - accuracy: 0.8258 - precision: 0.4488 - recall: 0.2080 - auc: 0.6874 - val_loss: 0.4019 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7812\n",
            "Epoch 35/100\n",
            "1/1 [==============================] - 0s 240ms/step - loss: 0.4605 - tp: 49.0000 - fp: 75.0000 - tn: 1299.0000 - fn: 225.0000 - accuracy: 0.8180 - precision: 0.3952 - recall: 0.1788 - auc: 0.6648 - val_loss: 0.3996 - val_tp: 2.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 72.0000 - val_accuracy: 0.8155 - val_precision: 0.3333 - val_recall: 0.0270 - val_auc: 0.7854\n",
            "Epoch 36/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.4446 - tp: 62.0000 - fp: 64.0000 - tn: 1310.0000 - fn: 212.0000 - accuracy: 0.8325 - precision: 0.4921 - recall: 0.2263 - auc: 0.6856 - val_loss: 0.3973 - val_tp: 4.0000 - val_fp: 4.0000 - val_tn: 334.0000 - val_fn: 70.0000 - val_accuracy: 0.8204 - val_precision: 0.5000 - val_recall: 0.0541 - val_auc: 0.7881\n",
            "Epoch 37/100\n",
            "1/1 [==============================] - 0s 57ms/step - loss: 0.4339 - tp: 56.0000 - fp: 65.0000 - tn: 1309.0000 - fn: 218.0000 - accuracy: 0.8283 - precision: 0.4628 - recall: 0.2044 - auc: 0.6880 - val_loss: 0.3951 - val_tp: 5.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 69.0000 - val_accuracy: 0.8204 - val_precision: 0.5000 - val_recall: 0.0676 - val_auc: 0.7928\n",
            "Epoch 38/100\n",
            "1/1 [==============================] - 0s 60ms/step - loss: 0.4384 - tp: 56.0000 - fp: 61.0000 - tn: 1313.0000 - fn: 218.0000 - accuracy: 0.8307 - precision: 0.4786 - recall: 0.2044 - auc: 0.6832 - val_loss: 0.3929 - val_tp: 6.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 68.0000 - val_accuracy: 0.8228 - val_precision: 0.5455 - val_recall: 0.0811 - val_auc: 0.7974\n",
            "Epoch 39/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.4143 - tp: 63.0000 - fp: 46.0000 - tn: 1328.0000 - fn: 211.0000 - accuracy: 0.8441 - precision: 0.5780 - recall: 0.2299 - auc: 0.7208 - val_loss: 0.3908 - val_tp: 6.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 68.0000 - val_accuracy: 0.8228 - val_precision: 0.5455 - val_recall: 0.0811 - val_auc: 0.7999\n",
            "Epoch 40/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.4204 - tp: 56.0000 - fp: 61.0000 - tn: 1313.0000 - fn: 218.0000 - accuracy: 0.8307 - precision: 0.4786 - recall: 0.2044 - auc: 0.7196 - val_loss: 0.3887 - val_tp: 6.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 68.0000 - val_accuracy: 0.8228 - val_precision: 0.5455 - val_recall: 0.0811 - val_auc: 0.8033\n",
            "Epoch 41/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.4190 - tp: 65.0000 - fp: 55.0000 - tn: 1319.0000 - fn: 209.0000 - accuracy: 0.8398 - precision: 0.5417 - recall: 0.2372 - auc: 0.7226 - val_loss: 0.3867 - val_tp: 6.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 68.0000 - val_accuracy: 0.8228 - val_precision: 0.5455 - val_recall: 0.0811 - val_auc: 0.8068\n",
            "Epoch 42/100\n",
            "1/1 [==============================] - 0s 51ms/step - loss: 0.4215 - tp: 62.0000 - fp: 59.0000 - tn: 1315.0000 - fn: 212.0000 - accuracy: 0.8356 - precision: 0.5124 - recall: 0.2263 - auc: 0.7116 - val_loss: 0.3847 - val_tp: 6.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 68.0000 - val_accuracy: 0.8228 - val_precision: 0.5455 - val_recall: 0.0811 - val_auc: 0.8099\n",
            "Epoch 43/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.4300 - tp: 47.0000 - fp: 61.0000 - tn: 1313.0000 - fn: 227.0000 - accuracy: 0.8252 - precision: 0.4352 - recall: 0.1715 - auc: 0.7037 - val_loss: 0.3828 - val_tp: 6.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 68.0000 - val_accuracy: 0.8228 - val_precision: 0.5455 - val_recall: 0.0811 - val_auc: 0.8132\n",
            "Epoch 44/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.4241 - tp: 54.0000 - fp: 65.0000 - tn: 1309.0000 - fn: 220.0000 - accuracy: 0.8271 - precision: 0.4538 - recall: 0.1971 - auc: 0.7049 - val_loss: 0.3810 - val_tp: 7.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 67.0000 - val_accuracy: 0.8252 - val_precision: 0.5833 - val_recall: 0.0946 - val_auc: 0.8158\n",
            "Epoch 45/100\n",
            "1/1 [==============================] - 0s 67ms/step - loss: 0.4166 - tp: 62.0000 - fp: 57.0000 - tn: 1317.0000 - fn: 212.0000 - accuracy: 0.8368 - precision: 0.5210 - recall: 0.2263 - auc: 0.7201 - val_loss: 0.3791 - val_tp: 8.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 66.0000 - val_accuracy: 0.8277 - val_precision: 0.6154 - val_recall: 0.1081 - val_auc: 0.8199\n",
            "Epoch 46/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.4115 - tp: 63.0000 - fp: 46.0000 - tn: 1328.0000 - fn: 211.0000 - accuracy: 0.8441 - precision: 0.5780 - recall: 0.2299 - auc: 0.7234 - val_loss: 0.3774 - val_tp: 8.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 66.0000 - val_accuracy: 0.8277 - val_precision: 0.6154 - val_recall: 0.1081 - val_auc: 0.8228\n",
            "Epoch 47/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.4020 - tp: 72.0000 - fp: 58.0000 - tn: 1316.0000 - fn: 202.0000 - accuracy: 0.8422 - precision: 0.5538 - recall: 0.2628 - auc: 0.7486 - val_loss: 0.3756 - val_tp: 8.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 66.0000 - val_accuracy: 0.8277 - val_precision: 0.6154 - val_recall: 0.1081 - val_auc: 0.8254\n",
            "Epoch 48/100\n",
            "1/1 [==============================] - 0s 57ms/step - loss: 0.4030 - tp: 60.0000 - fp: 43.0000 - tn: 1331.0000 - fn: 214.0000 - accuracy: 0.8441 - precision: 0.5825 - recall: 0.2190 - auc: 0.7423 - val_loss: 0.3739 - val_tp: 8.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 66.0000 - val_accuracy: 0.8277 - val_precision: 0.6154 - val_recall: 0.1081 - val_auc: 0.8282\n",
            "Epoch 49/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.4100 - tp: 76.0000 - fp: 59.0000 - tn: 1315.0000 - fn: 198.0000 - accuracy: 0.8441 - precision: 0.5630 - recall: 0.2774 - auc: 0.7384 - val_loss: 0.3722 - val_tp: 8.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 66.0000 - val_accuracy: 0.8252 - val_precision: 0.5714 - val_recall: 0.1081 - val_auc: 0.8295\n",
            "Epoch 50/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 0.4027 - tp: 62.0000 - fp: 59.0000 - tn: 1315.0000 - fn: 212.0000 - accuracy: 0.8356 - precision: 0.5124 - recall: 0.2263 - auc: 0.7383 - val_loss: 0.3706 - val_tp: 8.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 66.0000 - val_accuracy: 0.8252 - val_precision: 0.5714 - val_recall: 0.1081 - val_auc: 0.8315\n",
            "Epoch 51/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.4213 - tp: 72.0000 - fp: 66.0000 - tn: 1308.0000 - fn: 202.0000 - accuracy: 0.8374 - precision: 0.5217 - recall: 0.2628 - auc: 0.7103 - val_loss: 0.3690 - val_tp: 8.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 66.0000 - val_accuracy: 0.8228 - val_precision: 0.5333 - val_recall: 0.1081 - val_auc: 0.8345\n",
            "Epoch 52/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.4054 - tp: 71.0000 - fp: 59.0000 - tn: 1315.0000 - fn: 203.0000 - accuracy: 0.8410 - precision: 0.5462 - recall: 0.2591 - auc: 0.7310 - val_loss: 0.3674 - val_tp: 9.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 65.0000 - val_accuracy: 0.8252 - val_precision: 0.5625 - val_recall: 0.1216 - val_auc: 0.8364\n",
            "Epoch 53/100\n",
            "1/1 [==============================] - 0s 57ms/step - loss: 0.4063 - tp: 66.0000 - fp: 60.0000 - tn: 1314.0000 - fn: 208.0000 - accuracy: 0.8374 - precision: 0.5238 - recall: 0.2409 - auc: 0.7386 - val_loss: 0.3658 - val_tp: 9.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 65.0000 - val_accuracy: 0.8252 - val_precision: 0.5625 - val_recall: 0.1216 - val_auc: 0.8381\n",
            "Epoch 54/100\n",
            "1/1 [==============================] - 0s 65ms/step - loss: 0.4084 - tp: 58.0000 - fp: 43.0000 - tn: 1331.0000 - fn: 216.0000 - accuracy: 0.8428 - precision: 0.5743 - recall: 0.2117 - auc: 0.7231 - val_loss: 0.3643 - val_tp: 9.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 65.0000 - val_accuracy: 0.8252 - val_precision: 0.5625 - val_recall: 0.1216 - val_auc: 0.8404\n",
            "Epoch 55/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.4170 - tp: 69.0000 - fp: 68.0000 - tn: 1306.0000 - fn: 205.0000 - accuracy: 0.8343 - precision: 0.5036 - recall: 0.2518 - auc: 0.7268 - val_loss: 0.3628 - val_tp: 9.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 65.0000 - val_accuracy: 0.8252 - val_precision: 0.5625 - val_recall: 0.1216 - val_auc: 0.8429\n",
            "Epoch 56/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.3805 - tp: 64.0000 - fp: 49.0000 - tn: 1325.0000 - fn: 210.0000 - accuracy: 0.8428 - precision: 0.5664 - recall: 0.2336 - auc: 0.7769 - val_loss: 0.3613 - val_tp: 9.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 65.0000 - val_accuracy: 0.8252 - val_precision: 0.5625 - val_recall: 0.1216 - val_auc: 0.8445\n",
            "Epoch 57/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.3902 - tp: 72.0000 - fp: 50.0000 - tn: 1324.0000 - fn: 202.0000 - accuracy: 0.8471 - precision: 0.5902 - recall: 0.2628 - auc: 0.7584 - val_loss: 0.3598 - val_tp: 9.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 65.0000 - val_accuracy: 0.8252 - val_precision: 0.5625 - val_recall: 0.1216 - val_auc: 0.8472\n",
            "Epoch 58/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.3778 - tp: 71.0000 - fp: 40.0000 - tn: 1334.0000 - fn: 203.0000 - accuracy: 0.8525 - precision: 0.6396 - recall: 0.2591 - auc: 0.7768 - val_loss: 0.3584 - val_tp: 9.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 65.0000 - val_accuracy: 0.8252 - val_precision: 0.5625 - val_recall: 0.1216 - val_auc: 0.8485\n",
            "Epoch 59/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.3905 - tp: 71.0000 - fp: 40.0000 - tn: 1334.0000 - fn: 203.0000 - accuracy: 0.8525 - precision: 0.6396 - recall: 0.2591 - auc: 0.7537 - val_loss: 0.3570 - val_tp: 10.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 64.0000 - val_accuracy: 0.8301 - val_precision: 0.6250 - val_recall: 0.1351 - val_auc: 0.8497\n",
            "Epoch 60/100\n",
            "1/1 [==============================] - 0s 69ms/step - loss: 0.3895 - tp: 79.0000 - fp: 49.0000 - tn: 1325.0000 - fn: 195.0000 - accuracy: 0.8519 - precision: 0.6172 - recall: 0.2883 - auc: 0.7573 - val_loss: 0.3556 - val_tp: 10.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 64.0000 - val_accuracy: 0.8301 - val_precision: 0.6250 - val_recall: 0.1351 - val_auc: 0.8518\n",
            "Epoch 61/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.3711 - tp: 84.0000 - fp: 43.0000 - tn: 1331.0000 - fn: 190.0000 - accuracy: 0.8586 - precision: 0.6614 - recall: 0.3066 - auc: 0.7848 - val_loss: 0.3542 - val_tp: 11.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 63.0000 - val_accuracy: 0.8325 - val_precision: 0.6471 - val_recall: 0.1486 - val_auc: 0.8530\n",
            "Epoch 62/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.3836 - tp: 67.0000 - fp: 41.0000 - tn: 1333.0000 - fn: 207.0000 - accuracy: 0.8495 - precision: 0.6204 - recall: 0.2445 - auc: 0.7609 - val_loss: 0.3528 - val_tp: 11.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 63.0000 - val_accuracy: 0.8325 - val_precision: 0.6471 - val_recall: 0.1486 - val_auc: 0.8545\n",
            "Epoch 63/100\n",
            "1/1 [==============================] - 0s 61ms/step - loss: 0.3935 - tp: 75.0000 - fp: 50.0000 - tn: 1324.0000 - fn: 199.0000 - accuracy: 0.8489 - precision: 0.6000 - recall: 0.2737 - auc: 0.7526 - val_loss: 0.3515 - val_tp: 12.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 62.0000 - val_accuracy: 0.8350 - val_precision: 0.6667 - val_recall: 0.1622 - val_auc: 0.8560\n",
            "Epoch 64/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.3776 - tp: 78.0000 - fp: 45.0000 - tn: 1329.0000 - fn: 196.0000 - accuracy: 0.8538 - precision: 0.6341 - recall: 0.2847 - auc: 0.7811 - val_loss: 0.3502 - val_tp: 12.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 62.0000 - val_accuracy: 0.8374 - val_precision: 0.7059 - val_recall: 0.1622 - val_auc: 0.8578\n",
            "Epoch 65/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 0.3883 - tp: 74.0000 - fp: 46.0000 - tn: 1328.0000 - fn: 200.0000 - accuracy: 0.8507 - precision: 0.6167 - recall: 0.2701 - auc: 0.7611 - val_loss: 0.3489 - val_tp: 12.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 62.0000 - val_accuracy: 0.8374 - val_precision: 0.7059 - val_recall: 0.1622 - val_auc: 0.8595\n",
            "Epoch 66/100\n",
            "1/1 [==============================] - 0s 73ms/step - loss: 0.3870 - tp: 79.0000 - fp: 56.0000 - tn: 1318.0000 - fn: 195.0000 - accuracy: 0.8477 - precision: 0.5852 - recall: 0.2883 - auc: 0.7623 - val_loss: 0.3477 - val_tp: 12.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 62.0000 - val_accuracy: 0.8374 - val_precision: 0.7059 - val_recall: 0.1622 - val_auc: 0.8599\n",
            "Epoch 67/100\n",
            "1/1 [==============================] - 0s 70ms/step - loss: 0.3736 - tp: 86.0000 - fp: 49.0000 - tn: 1325.0000 - fn: 188.0000 - accuracy: 0.8562 - precision: 0.6370 - recall: 0.3139 - auc: 0.7784 - val_loss: 0.3464 - val_tp: 12.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 62.0000 - val_accuracy: 0.8374 - val_precision: 0.7059 - val_recall: 0.1622 - val_auc: 0.8615\n",
            "Epoch 68/100\n",
            "1/1 [==============================] - 0s 65ms/step - loss: 0.3735 - tp: 82.0000 - fp: 56.0000 - tn: 1318.0000 - fn: 192.0000 - accuracy: 0.8495 - precision: 0.5942 - recall: 0.2993 - auc: 0.7877 - val_loss: 0.3452 - val_tp: 12.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 62.0000 - val_accuracy: 0.8374 - val_precision: 0.7059 - val_recall: 0.1622 - val_auc: 0.8634\n",
            "Epoch 69/100\n",
            "1/1 [==============================] - 0s 61ms/step - loss: 0.3746 - tp: 79.0000 - fp: 47.0000 - tn: 1327.0000 - fn: 195.0000 - accuracy: 0.8532 - precision: 0.6270 - recall: 0.2883 - auc: 0.7825 - val_loss: 0.3440 - val_tp: 13.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 61.0000 - val_accuracy: 0.8398 - val_precision: 0.7222 - val_recall: 0.1757 - val_auc: 0.8641\n",
            "Epoch 70/100\n",
            "1/1 [==============================] - 0s 249ms/step - loss: 0.3686 - tp: 85.0000 - fp: 48.0000 - tn: 1326.0000 - fn: 189.0000 - accuracy: 0.8562 - precision: 0.6391 - recall: 0.3102 - auc: 0.7829 - val_loss: 0.3428 - val_tp: 13.0000 - val_fp: 5.0000 - val_tn: 333.0000 - val_fn: 61.0000 - val_accuracy: 0.8398 - val_precision: 0.7222 - val_recall: 0.1757 - val_auc: 0.8658\n",
            "Epoch 71/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.3723 - tp: 67.0000 - fp: 48.0000 - tn: 1326.0000 - fn: 207.0000 - accuracy: 0.8453 - precision: 0.5826 - recall: 0.2445 - auc: 0.7840 - val_loss: 0.3416 - val_tp: 14.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 60.0000 - val_accuracy: 0.8398 - val_precision: 0.7000 - val_recall: 0.1892 - val_auc: 0.8680\n",
            "Epoch 72/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.3775 - tp: 73.0000 - fp: 49.0000 - tn: 1325.0000 - fn: 201.0000 - accuracy: 0.8483 - precision: 0.5984 - recall: 0.2664 - auc: 0.7833 - val_loss: 0.3404 - val_tp: 14.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 60.0000 - val_accuracy: 0.8398 - val_precision: 0.7000 - val_recall: 0.1892 - val_auc: 0.8698\n",
            "Epoch 73/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.3719 - tp: 90.0000 - fp: 48.0000 - tn: 1326.0000 - fn: 184.0000 - accuracy: 0.8592 - precision: 0.6522 - recall: 0.3285 - auc: 0.7843 - val_loss: 0.3393 - val_tp: 14.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 60.0000 - val_accuracy: 0.8398 - val_precision: 0.7000 - val_recall: 0.1892 - val_auc: 0.8703\n",
            "Epoch 74/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.3631 - tp: 89.0000 - fp: 50.0000 - tn: 1324.0000 - fn: 185.0000 - accuracy: 0.8574 - precision: 0.6403 - recall: 0.3248 - auc: 0.7985 - val_loss: 0.3381 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8716\n",
            "Epoch 75/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.3487 - tp: 78.0000 - fp: 40.0000 - tn: 1334.0000 - fn: 196.0000 - accuracy: 0.8568 - precision: 0.6610 - recall: 0.2847 - auc: 0.8195 - val_loss: 0.3370 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8729\n",
            "Epoch 76/100\n",
            "1/1 [==============================] - 0s 66ms/step - loss: 0.3826 - tp: 76.0000 - fp: 51.0000 - tn: 1323.0000 - fn: 198.0000 - accuracy: 0.8489 - precision: 0.5984 - recall: 0.2774 - auc: 0.7864 - val_loss: 0.3359 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8741\n",
            "Epoch 77/100\n",
            "1/1 [==============================] - 0s 63ms/step - loss: 0.3514 - tp: 88.0000 - fp: 48.0000 - tn: 1326.0000 - fn: 186.0000 - accuracy: 0.8580 - precision: 0.6471 - recall: 0.3212 - auc: 0.8085 - val_loss: 0.3348 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8746\n",
            "Epoch 78/100\n",
            "1/1 [==============================] - 0s 63ms/step - loss: 0.3598 - tp: 81.0000 - fp: 48.0000 - tn: 1326.0000 - fn: 193.0000 - accuracy: 0.8538 - precision: 0.6279 - recall: 0.2956 - auc: 0.8093 - val_loss: 0.3337 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8764\n",
            "Epoch 79/100\n",
            "1/1 [==============================] - 0s 52ms/step - loss: 0.3515 - tp: 95.0000 - fp: 47.0000 - tn: 1327.0000 - fn: 179.0000 - accuracy: 0.8629 - precision: 0.6690 - recall: 0.3467 - auc: 0.8149 - val_loss: 0.3326 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8773\n",
            "Epoch 80/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 0.3504 - tp: 82.0000 - fp: 45.0000 - tn: 1329.0000 - fn: 192.0000 - accuracy: 0.8562 - precision: 0.6457 - recall: 0.2993 - auc: 0.8184 - val_loss: 0.3316 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8787\n",
            "Epoch 81/100\n",
            "1/1 [==============================] - 0s 66ms/step - loss: 0.3728 - tp: 80.0000 - fp: 49.0000 - tn: 1325.0000 - fn: 194.0000 - accuracy: 0.8525 - precision: 0.6202 - recall: 0.2920 - auc: 0.7889 - val_loss: 0.3306 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8801\n",
            "Epoch 82/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.3559 - tp: 78.0000 - fp: 47.0000 - tn: 1327.0000 - fn: 196.0000 - accuracy: 0.8525 - precision: 0.6240 - recall: 0.2847 - auc: 0.8106 - val_loss: 0.3296 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8809\n",
            "Epoch 83/100\n",
            "1/1 [==============================] - 0s 51ms/step - loss: 0.3603 - tp: 96.0000 - fp: 49.0000 - tn: 1325.0000 - fn: 178.0000 - accuracy: 0.8623 - precision: 0.6621 - recall: 0.3504 - auc: 0.7991 - val_loss: 0.3286 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8817\n",
            "Epoch 84/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.3541 - tp: 83.0000 - fp: 50.0000 - tn: 1324.0000 - fn: 191.0000 - accuracy: 0.8538 - precision: 0.6241 - recall: 0.3029 - auc: 0.8192 - val_loss: 0.3277 - val_tp: 13.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 61.0000 - val_accuracy: 0.8374 - val_precision: 0.6842 - val_recall: 0.1757 - val_auc: 0.8830\n",
            "Epoch 85/100\n",
            "1/1 [==============================] - 0s 66ms/step - loss: 0.3643 - tp: 92.0000 - fp: 50.0000 - tn: 1324.0000 - fn: 182.0000 - accuracy: 0.8592 - precision: 0.6479 - recall: 0.3358 - auc: 0.7903 - val_loss: 0.3268 - val_tp: 14.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 60.0000 - val_accuracy: 0.8398 - val_precision: 0.7000 - val_recall: 0.1892 - val_auc: 0.8847\n",
            "Epoch 86/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.3577 - tp: 83.0000 - fp: 40.0000 - tn: 1334.0000 - fn: 191.0000 - accuracy: 0.8598 - precision: 0.6748 - recall: 0.3029 - auc: 0.7948 - val_loss: 0.3258 - val_tp: 14.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 60.0000 - val_accuracy: 0.8398 - val_precision: 0.7000 - val_recall: 0.1892 - val_auc: 0.8862\n",
            "Epoch 87/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.3571 - tp: 85.0000 - fp: 44.0000 - tn: 1330.0000 - fn: 189.0000 - accuracy: 0.8586 - precision: 0.6589 - recall: 0.3102 - auc: 0.8085 - val_loss: 0.3248 - val_tp: 14.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 60.0000 - val_accuracy: 0.8398 - val_precision: 0.7000 - val_recall: 0.1892 - val_auc: 0.8871\n",
            "Epoch 88/100\n",
            "1/1 [==============================] - 0s 66ms/step - loss: 0.3713 - tp: 88.0000 - fp: 47.0000 - tn: 1327.0000 - fn: 186.0000 - accuracy: 0.8586 - precision: 0.6519 - recall: 0.3212 - auc: 0.7992 - val_loss: 0.3238 - val_tp: 14.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 60.0000 - val_accuracy: 0.8398 - val_precision: 0.7000 - val_recall: 0.1892 - val_auc: 0.8880\n",
            "Epoch 89/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.3484 - tp: 86.0000 - fp: 39.0000 - tn: 1335.0000 - fn: 188.0000 - accuracy: 0.8623 - precision: 0.6880 - recall: 0.3139 - auc: 0.8183 - val_loss: 0.3229 - val_tp: 14.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 60.0000 - val_accuracy: 0.8398 - val_precision: 0.7000 - val_recall: 0.1892 - val_auc: 0.8891\n",
            "Epoch 90/100\n",
            "1/1 [==============================] - 0s 66ms/step - loss: 0.3478 - tp: 87.0000 - fp: 37.0000 - tn: 1337.0000 - fn: 187.0000 - accuracy: 0.8641 - precision: 0.7016 - recall: 0.3175 - auc: 0.8088 - val_loss: 0.3219 - val_tp: 14.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 60.0000 - val_accuracy: 0.8398 - val_precision: 0.7000 - val_recall: 0.1892 - val_auc: 0.8900\n",
            "Epoch 91/100\n",
            "1/1 [==============================] - 0s 61ms/step - loss: 0.3593 - tp: 85.0000 - fp: 46.0000 - tn: 1328.0000 - fn: 189.0000 - accuracy: 0.8574 - precision: 0.6489 - recall: 0.3102 - auc: 0.8098 - val_loss: 0.3210 - val_tp: 14.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 60.0000 - val_accuracy: 0.8398 - val_precision: 0.7000 - val_recall: 0.1892 - val_auc: 0.8911\n",
            "Epoch 92/100\n",
            "1/1 [==============================] - 0s 66ms/step - loss: 0.3547 - tp: 86.0000 - fp: 49.0000 - tn: 1325.0000 - fn: 188.0000 - accuracy: 0.8562 - precision: 0.6370 - recall: 0.3139 - auc: 0.8024 - val_loss: 0.3201 - val_tp: 15.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 59.0000 - val_accuracy: 0.8422 - val_precision: 0.7143 - val_recall: 0.2027 - val_auc: 0.8918\n",
            "Epoch 93/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.3381 - tp: 96.0000 - fp: 39.0000 - tn: 1335.0000 - fn: 178.0000 - accuracy: 0.8683 - precision: 0.7111 - recall: 0.3504 - auc: 0.8354 - val_loss: 0.3191 - val_tp: 15.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 59.0000 - val_accuracy: 0.8422 - val_precision: 0.7143 - val_recall: 0.2027 - val_auc: 0.8929\n",
            "Epoch 94/100\n",
            "1/1 [==============================] - 0s 57ms/step - loss: 0.3473 - tp: 86.0000 - fp: 40.0000 - tn: 1334.0000 - fn: 188.0000 - accuracy: 0.8617 - precision: 0.6825 - recall: 0.3139 - auc: 0.8160 - val_loss: 0.3182 - val_tp: 15.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 59.0000 - val_accuracy: 0.8422 - val_precision: 0.7143 - val_recall: 0.2027 - val_auc: 0.8932\n",
            "Epoch 95/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.3435 - tp: 96.0000 - fp: 45.0000 - tn: 1329.0000 - fn: 178.0000 - accuracy: 0.8647 - precision: 0.6809 - recall: 0.3504 - auc: 0.8187 - val_loss: 0.3173 - val_tp: 16.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 58.0000 - val_accuracy: 0.8447 - val_precision: 0.7273 - val_recall: 0.2162 - val_auc: 0.8942\n",
            "Epoch 96/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.3418 - tp: 90.0000 - fp: 45.0000 - tn: 1329.0000 - fn: 184.0000 - accuracy: 0.8610 - precision: 0.6667 - recall: 0.3285 - auc: 0.8290 - val_loss: 0.3164 - val_tp: 16.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 58.0000 - val_accuracy: 0.8447 - val_precision: 0.7273 - val_recall: 0.2162 - val_auc: 0.8958\n",
            "Epoch 97/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.3539 - tp: 83.0000 - fp: 50.0000 - tn: 1324.0000 - fn: 191.0000 - accuracy: 0.8538 - precision: 0.6241 - recall: 0.3029 - auc: 0.8168 - val_loss: 0.3155 - val_tp: 16.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 58.0000 - val_accuracy: 0.8447 - val_precision: 0.7273 - val_recall: 0.2162 - val_auc: 0.8968\n",
            "Epoch 98/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.3463 - tp: 89.0000 - fp: 37.0000 - tn: 1337.0000 - fn: 185.0000 - accuracy: 0.8653 - precision: 0.7063 - recall: 0.3248 - auc: 0.8118 - val_loss: 0.3146 - val_tp: 16.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 58.0000 - val_accuracy: 0.8447 - val_precision: 0.7273 - val_recall: 0.2162 - val_auc: 0.8976\n",
            "Epoch 99/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.3407 - tp: 94.0000 - fp: 41.0000 - tn: 1333.0000 - fn: 180.0000 - accuracy: 0.8659 - precision: 0.6963 - recall: 0.3431 - auc: 0.8309 - val_loss: 0.3137 - val_tp: 16.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 58.0000 - val_accuracy: 0.8447 - val_precision: 0.7273 - val_recall: 0.2162 - val_auc: 0.8983\n",
            "Epoch 100/100\n",
            "1/1 [==============================] - 0s 240ms/step - loss: 0.3441 - tp: 89.0000 - fp: 50.0000 - tn: 1324.0000 - fn: 185.0000 - accuracy: 0.8574 - precision: 0.6403 - recall: 0.3248 - auc: 0.8243 - val_loss: 0.3129 - val_tp: 16.0000 - val_fp: 6.0000 - val_tn: 332.0000 - val_fn: 58.0000 - val_accuracy: 0.8447 - val_precision: 0.7273 - val_recall: 0.2162 - val_auc: 0.8994\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bqSPeTyO720d"
      },
      "source": [
        "def plot_metrics(history):\r\n",
        "  metrics = ['loss', 'auc', 'precision', 'recall']\r\n",
        "  for n, metric in enumerate(metrics):\r\n",
        "    name = metric.replace(\"_\",\" \").capitalize()\r\n",
        "    plt.subplot(2,2,n+1)\r\n",
        "    plt.plot(history.epoch, history.history[metric], color=colors[0], label='Train')\r\n",
        "    plt.plot(history.epoch, history.history['val_'+metric],\r\n",
        "             color=colors[0], linestyle=\"--\", label='Val')\r\n",
        "    plt.xlabel('Epoch')\r\n",
        "    plt.ylabel(name)\r\n",
        "    if metric == 'loss':\r\n",
        "      plt.ylim([0, plt.ylim()[1]])\r\n",
        "    elif metric == 'auc':\r\n",
        "      plt.ylim([0.8,1])\r\n",
        "    else:\r\n",
        "      plt.ylim([0,1])\r\n",
        "\r\n",
        "    plt.legend()"
      ],
      "execution_count": 133,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 609
        },
        "id": "2E3zY-2c79Zv",
        "outputId": "1584b944-1376-47d0-e1cb-f5b97d0009e9"
      },
      "source": [
        "plot_metrics(baseline_history)"
      ],
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K6lKyIic7_jo"
      },
      "source": [
        "train_predictions_baseline = model.predict(train_features, batch_size=BATCH_SIZE)\r\n",
        "test_predictions_baseline = model.predict(test_features, batch_size=BATCH_SIZE)"
      ],
      "execution_count": 135,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eYAOnIuz8DqX"
      },
      "source": [
        "def plot_cm(labels, predictions, p=0.5):\r\n",
        "  cm = confusion_matrix(labels, predictions > p)\r\n",
        "  plt.figure(figsize=(5,5))\r\n",
        "  sns.heatmap(cm, annot=True, fmt=\"d\")\r\n",
        "  plt.title('Confusion matrix @{:.2f}'.format(p))\r\n",
        "  plt.ylabel('Actual label')\r\n",
        "  plt.xlabel('Predicted label')\r\n",
        "\r\n",
        "  print('Legitimate Transactions Detected (True Negatives): ', cm[0][0])\r\n",
        "  print('Legitimate Transactions Incorrectly Detected (False Positives): ', cm[0][1])\r\n",
        "  print('Fraudulent Transactions Missed (False Negatives): ', cm[1][0])\r\n",
        "  print('Fraudulent Transactions Detected (True Positives): ', cm[1][1])\r\n",
        "  print('Total Fraudulent Transactions: ', np.sum(cm[1]))"
      ],
      "execution_count": 136,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "id": "5GuwB9Pt8Fmy",
        "outputId": "d2440b92-bdf3-42fe-e156-f8ead19857c2"
      },
      "source": [
        "baseline_results = model.evaluate(test_features, test_labels,\r\n",
        "                                  batch_size=BATCH_SIZE, verbose=0)\r\n",
        "for name, value in zip(model.metrics_names, baseline_results):\r\n",
        "  print(name, ': ', value)\r\n",
        "print()\r\n",
        "\r\n",
        "plot_cm(test_labels, test_predictions_baseline)"
      ],
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "loss :  0.28876858949661255\n",
            "tp :  23.0\n",
            "fp :  5.0\n",
            "tn :  425.0\n",
            "fn :  63.0\n",
            "accuracy :  0.8682170510292053\n",
            "precision :  0.8214285969734192\n",
            "recall :  0.26744186878204346\n",
            "auc :  0.9175635576248169\n",
            "\n",
            "Legitimate Transactions Detected (True Negatives):  425\n",
            "Legitimate Transactions Incorrectly Detected (False Positives):  5\n",
            "Fraudulent Transactions Missed (False Negatives):  63\n",
            "Fraudulent Transactions Detected (True Positives):  23\n",
            "Total Fraudulent Transactions:  86\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e1eZ5C2t8Ic9"
      },
      "source": [
        "def plot_roc(name, labels, predictions, **kwargs):\r\n",
        "  fp, tp, _ = sklearn.metrics.roc_curve(labels, predictions)\r\n",
        "\r\n",
        "  plt.plot(100*fp, 100*tp, label=name, linewidth=2, **kwargs)\r\n",
        "  plt.xlabel('False positives [%]')\r\n",
        "  plt.ylabel('True positives [%]')\r\n",
        "  plt.xlim([-0.5,20])\r\n",
        "  plt.ylim([80,100.5])\r\n",
        "  plt.grid(True)\r\n",
        "  ax = plt.gca()\r\n",
        "  ax.set_aspect('equal')"
      ],
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623
        },
        "id": "sKsMv5en8NJs",
        "outputId": "c5d91c8c-c794-4b88-c0c7-5e5c33e34af4"
      },
      "source": [
        "plot_roc(\"Train Baseline\", train_labels, train_predictions_baseline, color=colors[0])\r\n",
        "plot_roc(\"Test Baseline\", test_labels, test_predictions_baseline, color=colors[0], linestyle='--')\r\n",
        "plt.legend(loc='lower right')"
      ],
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f63503fc6d8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 139
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v51ZQAJj8Prh",
        "outputId": "72027aad-f5fe-45ad-9f4f-d7cfa801a95c"
      },
      "source": [
        "# Scaling by total/2 helps keep the loss to a similar magnitude.\r\n",
        "# The sum of the weights of all examples stays the same.\r\n",
        "weight_for_0 = (1 / neg)*(total)/2.0 \r\n",
        "weight_for_1 = (1 / pos)*(total)/2.0\r\n",
        "\r\n",
        "class_weight = {0: weight_for_0, 1: weight_for_1}\r\n",
        "\r\n",
        "print('Weight for class 0: {:.2f}'.format(weight_for_0))\r\n",
        "print('Weight for class 1: {:.2f}'.format(weight_for_1))"
      ],
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Weight for class 0: 0.60\n",
            "Weight for class 1: 3.00\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "96148KGf8UGA",
        "outputId": "4605ebc1-f90e-423b-a774-f7d8290559ab"
      },
      "source": [
        "weighted_model = make_model()\r\n",
        "weighted_model.load_weights(initial_weights)\r\n",
        "\r\n",
        "weighted_history = weighted_model.fit(\r\n",
        "    train_features,\r\n",
        "    train_labels,\r\n",
        "    batch_size=BATCH_SIZE,\r\n",
        "    epochs=EPOCHS,\r\n",
        "    callbacks=[early_stopping],\r\n",
        "    validation_data=(val_features, val_labels),\r\n",
        "    # The class weights go here\r\n",
        "    class_weight=class_weight) "
      ],
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "1/1 [==============================] - 3s 3s/step - loss: 1.1898 - tp: 46.0000 - fp: 149.0000 - tn: 1655.0000 - fn: 314.0000 - accuracy: 0.7860 - precision: 0.2359 - recall: 0.1278 - auc: 0.5884 - val_loss: 0.5281 - val_tp: 2.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 72.0000 - val_accuracy: 0.7961 - val_precision: 0.1429 - val_recall: 0.0270 - val_auc: 0.4863\n",
            "Epoch 2/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 1.1390 - tp: 30.0000 - fp: 146.0000 - tn: 1228.0000 - fn: 244.0000 - accuracy: 0.7633 - precision: 0.1705 - recall: 0.1095 - auc: 0.4862 - val_loss: 0.5237 - val_tp: 2.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 72.0000 - val_accuracy: 0.7961 - val_precision: 0.1429 - val_recall: 0.0270 - val_auc: 0.4975\n",
            "Epoch 3/100\n",
            "1/1 [==============================] - 0s 51ms/step - loss: 1.1527 - tp: 23.0000 - fp: 157.0000 - tn: 1217.0000 - fn: 251.0000 - accuracy: 0.7524 - precision: 0.1278 - recall: 0.0839 - auc: 0.4998 - val_loss: 0.5193 - val_tp: 1.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 73.0000 - val_accuracy: 0.7937 - val_precision: 0.0769 - val_recall: 0.0135 - val_auc: 0.5058\n",
            "Epoch 4/100\n",
            "1/1 [==============================] - 0s 49ms/step - loss: 1.1079 - tp: 33.0000 - fp: 137.0000 - tn: 1237.0000 - fn: 241.0000 - accuracy: 0.7706 - precision: 0.1941 - recall: 0.1204 - auc: 0.5248 - val_loss: 0.5151 - val_tp: 1.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 73.0000 - val_accuracy: 0.7937 - val_precision: 0.0769 - val_recall: 0.0135 - val_auc: 0.5146\n",
            "Epoch 5/100\n",
            "1/1 [==============================] - 0s 50ms/step - loss: 1.0875 - tp: 35.0000 - fp: 144.0000 - tn: 1230.0000 - fn: 239.0000 - accuracy: 0.7676 - precision: 0.1955 - recall: 0.1277 - auc: 0.5274 - val_loss: 0.5108 - val_tp: 1.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 73.0000 - val_accuracy: 0.7937 - val_precision: 0.0769 - val_recall: 0.0135 - val_auc: 0.5266\n",
            "Epoch 6/100\n",
            "1/1 [==============================] - 0s 51ms/step - loss: 1.0963 - tp: 33.0000 - fp: 142.0000 - tn: 1232.0000 - fn: 241.0000 - accuracy: 0.7676 - precision: 0.1886 - recall: 0.1204 - auc: 0.5207 - val_loss: 0.5067 - val_tp: 1.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 73.0000 - val_accuracy: 0.7937 - val_precision: 0.0769 - val_recall: 0.0135 - val_auc: 0.5356\n",
            "Epoch 7/100\n",
            "1/1 [==============================] - 0s 50ms/step - loss: 1.0665 - tp: 36.0000 - fp: 147.0000 - tn: 1227.0000 - fn: 238.0000 - accuracy: 0.7664 - precision: 0.1967 - recall: 0.1314 - auc: 0.5186 - val_loss: 0.5027 - val_tp: 1.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 73.0000 - val_accuracy: 0.7937 - val_precision: 0.0769 - val_recall: 0.0135 - val_auc: 0.5451\n",
            "Epoch 8/100\n",
            "1/1 [==============================] - 0s 49ms/step - loss: 1.0689 - tp: 31.0000 - fp: 147.0000 - tn: 1227.0000 - fn: 243.0000 - accuracy: 0.7633 - precision: 0.1742 - recall: 0.1131 - auc: 0.5441 - val_loss: 0.4988 - val_tp: 1.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 73.0000 - val_accuracy: 0.7937 - val_precision: 0.0769 - val_recall: 0.0135 - val_auc: 0.5561\n",
            "Epoch 9/100\n",
            "1/1 [==============================] - 0s 49ms/step - loss: 1.0628 - tp: 45.0000 - fp: 158.0000 - tn: 1216.0000 - fn: 229.0000 - accuracy: 0.7652 - precision: 0.2217 - recall: 0.1642 - auc: 0.5271 - val_loss: 0.4949 - val_tp: 1.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 73.0000 - val_accuracy: 0.7937 - val_precision: 0.0769 - val_recall: 0.0135 - val_auc: 0.5671\n",
            "Epoch 10/100\n",
            "1/1 [==============================] - 0s 51ms/step - loss: 1.0713 - tp: 48.0000 - fp: 143.0000 - tn: 1231.0000 - fn: 226.0000 - accuracy: 0.7761 - precision: 0.2513 - recall: 0.1752 - auc: 0.5316 - val_loss: 0.4911 - val_tp: 1.0000 - val_fp: 13.0000 - val_tn: 325.0000 - val_fn: 73.0000 - val_accuracy: 0.7913 - val_precision: 0.0714 - val_recall: 0.0135 - val_auc: 0.5787\n",
            "Epoch 11/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 1.0695 - tp: 40.0000 - fp: 153.0000 - tn: 1221.0000 - fn: 234.0000 - accuracy: 0.7652 - precision: 0.2073 - recall: 0.1460 - auc: 0.5390 - val_loss: 0.4873 - val_tp: 2.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 72.0000 - val_accuracy: 0.7961 - val_precision: 0.1429 - val_recall: 0.0270 - val_auc: 0.5916\n",
            "Epoch 12/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 1.0376 - tp: 47.0000 - fp: 152.0000 - tn: 1222.0000 - fn: 227.0000 - accuracy: 0.7700 - precision: 0.2362 - recall: 0.1715 - auc: 0.5370 - val_loss: 0.4836 - val_tp: 2.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 72.0000 - val_accuracy: 0.7961 - val_precision: 0.1429 - val_recall: 0.0270 - val_auc: 0.6025\n",
            "Epoch 13/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 1.0567 - tp: 45.0000 - fp: 142.0000 - tn: 1232.0000 - fn: 229.0000 - accuracy: 0.7749 - precision: 0.2406 - recall: 0.1642 - auc: 0.5369 - val_loss: 0.4800 - val_tp: 2.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 72.0000 - val_accuracy: 0.7961 - val_precision: 0.1429 - val_recall: 0.0270 - val_auc: 0.6130\n",
            "Epoch 14/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 0.9835 - tp: 50.0000 - fp: 141.0000 - tn: 1233.0000 - fn: 224.0000 - accuracy: 0.7785 - precision: 0.2618 - recall: 0.1825 - auc: 0.5737 - val_loss: 0.4766 - val_tp: 2.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 72.0000 - val_accuracy: 0.7961 - val_precision: 0.1429 - val_recall: 0.0270 - val_auc: 0.6211\n",
            "Epoch 15/100\n",
            "1/1 [==============================] - 0s 60ms/step - loss: 0.9767 - tp: 51.0000 - fp: 161.0000 - tn: 1213.0000 - fn: 223.0000 - accuracy: 0.7670 - precision: 0.2406 - recall: 0.1861 - auc: 0.5674 - val_loss: 0.4732 - val_tp: 2.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 72.0000 - val_accuracy: 0.7961 - val_precision: 0.1429 - val_recall: 0.0270 - val_auc: 0.6318\n",
            "Epoch 16/100\n",
            "1/1 [==============================] - 0s 61ms/step - loss: 0.9810 - tp: 48.0000 - fp: 157.0000 - tn: 1217.0000 - fn: 226.0000 - accuracy: 0.7676 - precision: 0.2341 - recall: 0.1752 - auc: 0.5667 - val_loss: 0.4699 - val_tp: 2.0000 - val_fp: 13.0000 - val_tn: 325.0000 - val_fn: 72.0000 - val_accuracy: 0.7937 - val_precision: 0.1333 - val_recall: 0.0270 - val_auc: 0.6394\n",
            "Epoch 17/100\n",
            "1/1 [==============================] - 0s 60ms/step - loss: 0.9742 - tp: 44.0000 - fp: 148.0000 - tn: 1226.0000 - fn: 230.0000 - accuracy: 0.7706 - precision: 0.2292 - recall: 0.1606 - auc: 0.5765 - val_loss: 0.4668 - val_tp: 2.0000 - val_fp: 13.0000 - val_tn: 325.0000 - val_fn: 72.0000 - val_accuracy: 0.7937 - val_precision: 0.1333 - val_recall: 0.0270 - val_auc: 0.6476\n",
            "Epoch 18/100\n",
            "1/1 [==============================] - 0s 272ms/step - loss: 0.9310 - tp: 62.0000 - fp: 152.0000 - tn: 1222.0000 - fn: 212.0000 - accuracy: 0.7791 - precision: 0.2897 - recall: 0.2263 - auc: 0.6039 - val_loss: 0.4637 - val_tp: 2.0000 - val_fp: 13.0000 - val_tn: 325.0000 - val_fn: 72.0000 - val_accuracy: 0.7937 - val_precision: 0.1333 - val_recall: 0.0270 - val_auc: 0.6569\n",
            "Epoch 19/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 0.9880 - tp: 54.0000 - fp: 152.0000 - tn: 1222.0000 - fn: 220.0000 - accuracy: 0.7743 - precision: 0.2621 - recall: 0.1971 - auc: 0.5680 - val_loss: 0.4607 - val_tp: 3.0000 - val_fp: 14.0000 - val_tn: 324.0000 - val_fn: 71.0000 - val_accuracy: 0.7937 - val_precision: 0.1765 - val_recall: 0.0405 - val_auc: 0.6656\n",
            "Epoch 20/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.9360 - tp: 61.0000 - fp: 161.0000 - tn: 1213.0000 - fn: 213.0000 - accuracy: 0.7731 - precision: 0.2748 - recall: 0.2226 - auc: 0.5886 - val_loss: 0.4577 - val_tp: 3.0000 - val_fp: 14.0000 - val_tn: 324.0000 - val_fn: 71.0000 - val_accuracy: 0.7937 - val_precision: 0.1765 - val_recall: 0.0405 - val_auc: 0.6754\n",
            "Epoch 21/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.9281 - tp: 61.0000 - fp: 177.0000 - tn: 1197.0000 - fn: 213.0000 - accuracy: 0.7633 - precision: 0.2563 - recall: 0.2226 - auc: 0.6002 - val_loss: 0.4549 - val_tp: 3.0000 - val_fp: 14.0000 - val_tn: 324.0000 - val_fn: 71.0000 - val_accuracy: 0.7937 - val_precision: 0.1765 - val_recall: 0.0405 - val_auc: 0.6835\n",
            "Epoch 22/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.8754 - tp: 63.0000 - fp: 151.0000 - tn: 1223.0000 - fn: 211.0000 - accuracy: 0.7803 - precision: 0.2944 - recall: 0.2299 - auc: 0.6313 - val_loss: 0.4521 - val_tp: 3.0000 - val_fp: 15.0000 - val_tn: 323.0000 - val_fn: 71.0000 - val_accuracy: 0.7913 - val_precision: 0.1667 - val_recall: 0.0405 - val_auc: 0.6908\n",
            "Epoch 23/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.9047 - tp: 66.0000 - fp: 128.0000 - tn: 1246.0000 - fn: 208.0000 - accuracy: 0.7961 - precision: 0.3402 - recall: 0.2409 - auc: 0.6178 - val_loss: 0.4494 - val_tp: 4.0000 - val_fp: 16.0000 - val_tn: 322.0000 - val_fn: 70.0000 - val_accuracy: 0.7913 - val_precision: 0.2000 - val_recall: 0.0541 - val_auc: 0.7008\n",
            "Epoch 24/100\n",
            "1/1 [==============================] - 0s 52ms/step - loss: 0.8830 - tp: 70.0000 - fp: 151.0000 - tn: 1223.0000 - fn: 204.0000 - accuracy: 0.7846 - precision: 0.3167 - recall: 0.2555 - auc: 0.6194 - val_loss: 0.4468 - val_tp: 5.0000 - val_fp: 17.0000 - val_tn: 321.0000 - val_fn: 69.0000 - val_accuracy: 0.7913 - val_precision: 0.2273 - val_recall: 0.0676 - val_auc: 0.7078\n",
            "Epoch 25/100\n",
            "1/1 [==============================] - 0s 57ms/step - loss: 0.8966 - tp: 69.0000 - fp: 150.0000 - tn: 1224.0000 - fn: 205.0000 - accuracy: 0.7846 - precision: 0.3151 - recall: 0.2518 - auc: 0.6097 - val_loss: 0.4442 - val_tp: 7.0000 - val_fp: 16.0000 - val_tn: 322.0000 - val_fn: 67.0000 - val_accuracy: 0.7985 - val_precision: 0.3043 - val_recall: 0.0946 - val_auc: 0.7145\n",
            "Epoch 26/100\n",
            "1/1 [==============================] - 0s 70ms/step - loss: 0.8581 - tp: 73.0000 - fp: 160.0000 - tn: 1214.0000 - fn: 201.0000 - accuracy: 0.7809 - precision: 0.3133 - recall: 0.2664 - auc: 0.6351 - val_loss: 0.4418 - val_tp: 8.0000 - val_fp: 17.0000 - val_tn: 321.0000 - val_fn: 66.0000 - val_accuracy: 0.7985 - val_precision: 0.3200 - val_recall: 0.1081 - val_auc: 0.7202\n",
            "Epoch 27/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.8556 - tp: 71.0000 - fp: 171.0000 - tn: 1203.0000 - fn: 203.0000 - accuracy: 0.7731 - precision: 0.2934 - recall: 0.2591 - auc: 0.6477 - val_loss: 0.4394 - val_tp: 8.0000 - val_fp: 17.0000 - val_tn: 321.0000 - val_fn: 66.0000 - val_accuracy: 0.7985 - val_precision: 0.3200 - val_recall: 0.1081 - val_auc: 0.7270\n",
            "Epoch 28/100\n",
            "1/1 [==============================] - 0s 52ms/step - loss: 0.8854 - tp: 70.0000 - fp: 151.0000 - tn: 1223.0000 - fn: 204.0000 - accuracy: 0.7846 - precision: 0.3167 - recall: 0.2555 - auc: 0.6309 - val_loss: 0.4371 - val_tp: 8.0000 - val_fp: 17.0000 - val_tn: 321.0000 - val_fn: 66.0000 - val_accuracy: 0.7985 - val_precision: 0.3200 - val_recall: 0.1081 - val_auc: 0.7324\n",
            "Epoch 29/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.8465 - tp: 82.0000 - fp: 161.0000 - tn: 1213.0000 - fn: 192.0000 - accuracy: 0.7858 - precision: 0.3374 - recall: 0.2993 - auc: 0.6414 - val_loss: 0.4349 - val_tp: 9.0000 - val_fp: 18.0000 - val_tn: 320.0000 - val_fn: 65.0000 - val_accuracy: 0.7985 - val_precision: 0.3333 - val_recall: 0.1216 - val_auc: 0.7388\n",
            "Epoch 30/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.8025 - tp: 90.0000 - fp: 144.0000 - tn: 1230.0000 - fn: 184.0000 - accuracy: 0.8010 - precision: 0.3846 - recall: 0.3285 - auc: 0.6818 - val_loss: 0.4328 - val_tp: 12.0000 - val_fp: 20.0000 - val_tn: 318.0000 - val_fn: 62.0000 - val_accuracy: 0.8010 - val_precision: 0.3750 - val_recall: 0.1622 - val_auc: 0.7441\n",
            "Epoch 31/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.8167 - tp: 86.0000 - fp: 163.0000 - tn: 1211.0000 - fn: 188.0000 - accuracy: 0.7870 - precision: 0.3454 - recall: 0.3139 - auc: 0.6630 - val_loss: 0.4308 - val_tp: 12.0000 - val_fp: 19.0000 - val_tn: 319.0000 - val_fn: 62.0000 - val_accuracy: 0.8034 - val_precision: 0.3871 - val_recall: 0.1622 - val_auc: 0.7496\n",
            "Epoch 32/100\n",
            "1/1 [==============================] - 0s 72ms/step - loss: 0.8515 - tp: 73.0000 - fp: 168.0000 - tn: 1206.0000 - fn: 201.0000 - accuracy: 0.7761 - precision: 0.3029 - recall: 0.2664 - auc: 0.6514 - val_loss: 0.4289 - val_tp: 14.0000 - val_fp: 20.0000 - val_tn: 318.0000 - val_fn: 60.0000 - val_accuracy: 0.8058 - val_precision: 0.4118 - val_recall: 0.1892 - val_auc: 0.7546\n",
            "Epoch 33/100\n",
            "1/1 [==============================] - 0s 60ms/step - loss: 0.8158 - tp: 91.0000 - fp: 151.0000 - tn: 1223.0000 - fn: 183.0000 - accuracy: 0.7973 - precision: 0.3760 - recall: 0.3321 - auc: 0.6703 - val_loss: 0.4271 - val_tp: 14.0000 - val_fp: 20.0000 - val_tn: 318.0000 - val_fn: 60.0000 - val_accuracy: 0.8058 - val_precision: 0.4118 - val_recall: 0.1892 - val_auc: 0.7598\n",
            "Epoch 34/100\n",
            "1/1 [==============================] - 0s 73ms/step - loss: 0.8189 - tp: 89.0000 - fp: 150.0000 - tn: 1224.0000 - fn: 185.0000 - accuracy: 0.7967 - precision: 0.3724 - recall: 0.3248 - auc: 0.6571 - val_loss: 0.4253 - val_tp: 14.0000 - val_fp: 20.0000 - val_tn: 318.0000 - val_fn: 60.0000 - val_accuracy: 0.8058 - val_precision: 0.4118 - val_recall: 0.1892 - val_auc: 0.7651\n",
            "Epoch 35/100\n",
            "1/1 [==============================] - 0s 57ms/step - loss: 0.7920 - tp: 92.0000 - fp: 151.0000 - tn: 1223.0000 - fn: 182.0000 - accuracy: 0.7979 - precision: 0.3786 - recall: 0.3358 - auc: 0.6766 - val_loss: 0.4236 - val_tp: 16.0000 - val_fp: 20.0000 - val_tn: 318.0000 - val_fn: 58.0000 - val_accuracy: 0.8107 - val_precision: 0.4444 - val_recall: 0.2162 - val_auc: 0.7701\n",
            "Epoch 36/100\n",
            "1/1 [==============================] - 0s 57ms/step - loss: 0.8222 - tp: 91.0000 - fp: 180.0000 - tn: 1194.0000 - fn: 183.0000 - accuracy: 0.7797 - precision: 0.3358 - recall: 0.3321 - auc: 0.6599 - val_loss: 0.4220 - val_tp: 16.0000 - val_fp: 21.0000 - val_tn: 317.0000 - val_fn: 58.0000 - val_accuracy: 0.8083 - val_precision: 0.4324 - val_recall: 0.2162 - val_auc: 0.7736\n",
            "Epoch 37/100\n",
            "1/1 [==============================] - 0s 60ms/step - loss: 0.7984 - tp: 95.0000 - fp: 164.0000 - tn: 1210.0000 - fn: 179.0000 - accuracy: 0.7919 - precision: 0.3668 - recall: 0.3467 - auc: 0.6674 - val_loss: 0.4204 - val_tp: 17.0000 - val_fp: 22.0000 - val_tn: 316.0000 - val_fn: 57.0000 - val_accuracy: 0.8083 - val_precision: 0.4359 - val_recall: 0.2297 - val_auc: 0.7775\n",
            "Epoch 38/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.8046 - tp: 97.0000 - fp: 162.0000 - tn: 1212.0000 - fn: 177.0000 - accuracy: 0.7943 - precision: 0.3745 - recall: 0.3540 - auc: 0.6676 - val_loss: 0.4190 - val_tp: 17.0000 - val_fp: 23.0000 - val_tn: 315.0000 - val_fn: 57.0000 - val_accuracy: 0.8058 - val_precision: 0.4250 - val_recall: 0.2297 - val_auc: 0.7807\n",
            "Epoch 39/100\n",
            "1/1 [==============================] - 0s 65ms/step - loss: 0.8119 - tp: 87.0000 - fp: 184.0000 - tn: 1190.0000 - fn: 187.0000 - accuracy: 0.7749 - precision: 0.3210 - recall: 0.3175 - auc: 0.6590 - val_loss: 0.4177 - val_tp: 18.0000 - val_fp: 23.0000 - val_tn: 315.0000 - val_fn: 56.0000 - val_accuracy: 0.8083 - val_precision: 0.4390 - val_recall: 0.2432 - val_auc: 0.7850\n",
            "Epoch 40/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.7800 - tp: 103.0000 - fp: 190.0000 - tn: 1184.0000 - fn: 171.0000 - accuracy: 0.7809 - precision: 0.3515 - recall: 0.3759 - auc: 0.6755 - val_loss: 0.4163 - val_tp: 18.0000 - val_fp: 26.0000 - val_tn: 312.0000 - val_fn: 56.0000 - val_accuracy: 0.8010 - val_precision: 0.4091 - val_recall: 0.2432 - val_auc: 0.7888\n",
            "Epoch 41/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.7669 - tp: 98.0000 - fp: 148.0000 - tn: 1226.0000 - fn: 176.0000 - accuracy: 0.8034 - precision: 0.3984 - recall: 0.3577 - auc: 0.6943 - val_loss: 0.4150 - val_tp: 19.0000 - val_fp: 27.0000 - val_tn: 311.0000 - val_fn: 55.0000 - val_accuracy: 0.8010 - val_precision: 0.4130 - val_recall: 0.2568 - val_auc: 0.7915\n",
            "Epoch 42/100\n",
            "1/1 [==============================] - 0s 50ms/step - loss: 0.7587 - tp: 106.0000 - fp: 171.0000 - tn: 1203.0000 - fn: 168.0000 - accuracy: 0.7943 - precision: 0.3827 - recall: 0.3869 - auc: 0.6905 - val_loss: 0.4138 - val_tp: 20.0000 - val_fp: 26.0000 - val_tn: 312.0000 - val_fn: 54.0000 - val_accuracy: 0.8058 - val_precision: 0.4348 - val_recall: 0.2703 - val_auc: 0.7953\n",
            "Epoch 43/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.7363 - tp: 108.0000 - fp: 175.0000 - tn: 1199.0000 - fn: 166.0000 - accuracy: 0.7931 - precision: 0.3816 - recall: 0.3942 - auc: 0.7108 - val_loss: 0.4126 - val_tp: 22.0000 - val_fp: 26.0000 - val_tn: 312.0000 - val_fn: 52.0000 - val_accuracy: 0.8107 - val_precision: 0.4583 - val_recall: 0.2973 - val_auc: 0.7989\n",
            "Epoch 44/100\n",
            "1/1 [==============================] - 0s 53ms/step - loss: 0.7551 - tp: 110.0000 - fp: 174.0000 - tn: 1200.0000 - fn: 164.0000 - accuracy: 0.7949 - precision: 0.3873 - recall: 0.4015 - auc: 0.7029 - val_loss: 0.4115 - val_tp: 24.0000 - val_fp: 27.0000 - val_tn: 311.0000 - val_fn: 50.0000 - val_accuracy: 0.8131 - val_precision: 0.4706 - val_recall: 0.3243 - val_auc: 0.8020\n",
            "Epoch 45/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 0.7642 - tp: 97.0000 - fp: 184.0000 - tn: 1190.0000 - fn: 177.0000 - accuracy: 0.7809 - precision: 0.3452 - recall: 0.3540 - auc: 0.6901 - val_loss: 0.4104 - val_tp: 25.0000 - val_fp: 28.0000 - val_tn: 310.0000 - val_fn: 49.0000 - val_accuracy: 0.8131 - val_precision: 0.4717 - val_recall: 0.3378 - val_auc: 0.8052\n",
            "Epoch 46/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.7398 - tp: 108.0000 - fp: 175.0000 - tn: 1199.0000 - fn: 166.0000 - accuracy: 0.7931 - precision: 0.3816 - recall: 0.3942 - auc: 0.7110 - val_loss: 0.4094 - val_tp: 27.0000 - val_fp: 28.0000 - val_tn: 310.0000 - val_fn: 47.0000 - val_accuracy: 0.8180 - val_precision: 0.4909 - val_recall: 0.3649 - val_auc: 0.8082\n",
            "Epoch 47/100\n",
            "1/1 [==============================] - 0s 60ms/step - loss: 0.7571 - tp: 105.0000 - fp: 163.0000 - tn: 1211.0000 - fn: 169.0000 - accuracy: 0.7985 - precision: 0.3918 - recall: 0.3832 - auc: 0.7020 - val_loss: 0.4084 - val_tp: 27.0000 - val_fp: 28.0000 - val_tn: 310.0000 - val_fn: 47.0000 - val_accuracy: 0.8180 - val_precision: 0.4909 - val_recall: 0.3649 - val_auc: 0.8113\n",
            "Epoch 48/100\n",
            "1/1 [==============================] - 0s 60ms/step - loss: 0.7091 - tp: 117.0000 - fp: 191.0000 - tn: 1183.0000 - fn: 157.0000 - accuracy: 0.7888 - precision: 0.3799 - recall: 0.4270 - auc: 0.7202 - val_loss: 0.4074 - val_tp: 27.0000 - val_fp: 29.0000 - val_tn: 309.0000 - val_fn: 47.0000 - val_accuracy: 0.8155 - val_precision: 0.4821 - val_recall: 0.3649 - val_auc: 0.8128\n",
            "Epoch 49/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.7717 - tp: 105.0000 - fp: 182.0000 - tn: 1192.0000 - fn: 169.0000 - accuracy: 0.7870 - precision: 0.3659 - recall: 0.3832 - auc: 0.6815 - val_loss: 0.4065 - val_tp: 27.0000 - val_fp: 30.0000 - val_tn: 308.0000 - val_fn: 47.0000 - val_accuracy: 0.8131 - val_precision: 0.4737 - val_recall: 0.3649 - val_auc: 0.8161\n",
            "Epoch 50/100\n",
            "1/1 [==============================] - 0s 266ms/step - loss: 0.6989 - tp: 130.0000 - fp: 172.0000 - tn: 1202.0000 - fn: 144.0000 - accuracy: 0.8083 - precision: 0.4305 - recall: 0.4745 - auc: 0.7263 - val_loss: 0.4055 - val_tp: 27.0000 - val_fp: 31.0000 - val_tn: 307.0000 - val_fn: 47.0000 - val_accuracy: 0.8107 - val_precision: 0.4655 - val_recall: 0.3649 - val_auc: 0.8180\n",
            "Epoch 51/100\n",
            "1/1 [==============================] - 0s 67ms/step - loss: 0.6618 - tp: 133.0000 - fp: 185.0000 - tn: 1189.0000 - fn: 141.0000 - accuracy: 0.8022 - precision: 0.4182 - recall: 0.4854 - auc: 0.7446 - val_loss: 0.4046 - val_tp: 27.0000 - val_fp: 31.0000 - val_tn: 307.0000 - val_fn: 47.0000 - val_accuracy: 0.8107 - val_precision: 0.4655 - val_recall: 0.3649 - val_auc: 0.8200\n",
            "Epoch 52/100\n",
            "1/1 [==============================] - 0s 57ms/step - loss: 0.6898 - tp: 124.0000 - fp: 162.0000 - tn: 1212.0000 - fn: 150.0000 - accuracy: 0.8107 - precision: 0.4336 - recall: 0.4526 - auc: 0.7322 - val_loss: 0.4038 - val_tp: 29.0000 - val_fp: 32.0000 - val_tn: 306.0000 - val_fn: 45.0000 - val_accuracy: 0.8131 - val_precision: 0.4754 - val_recall: 0.3919 - val_auc: 0.8223\n",
            "Epoch 53/100\n",
            "1/1 [==============================] - 0s 51ms/step - loss: 0.6890 - tp: 129.0000 - fp: 187.0000 - tn: 1187.0000 - fn: 145.0000 - accuracy: 0.7985 - precision: 0.4082 - recall: 0.4708 - auc: 0.7288 - val_loss: 0.4030 - val_tp: 30.0000 - val_fp: 32.0000 - val_tn: 306.0000 - val_fn: 44.0000 - val_accuracy: 0.8155 - val_precision: 0.4839 - val_recall: 0.4054 - val_auc: 0.8250\n",
            "Epoch 54/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.6851 - tp: 122.0000 - fp: 157.0000 - tn: 1217.0000 - fn: 152.0000 - accuracy: 0.8125 - precision: 0.4373 - recall: 0.4453 - auc: 0.7403 - val_loss: 0.4023 - val_tp: 32.0000 - val_fp: 32.0000 - val_tn: 306.0000 - val_fn: 42.0000 - val_accuracy: 0.8204 - val_precision: 0.5000 - val_recall: 0.4324 - val_auc: 0.8274\n",
            "Epoch 55/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.6685 - tp: 126.0000 - fp: 173.0000 - tn: 1201.0000 - fn: 148.0000 - accuracy: 0.8052 - precision: 0.4214 - recall: 0.4599 - auc: 0.7530 - val_loss: 0.4016 - val_tp: 32.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 42.0000 - val_accuracy: 0.8180 - val_precision: 0.4923 - val_recall: 0.4324 - val_auc: 0.8291\n",
            "Epoch 56/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.7150 - tp: 119.0000 - fp: 193.0000 - tn: 1181.0000 - fn: 155.0000 - accuracy: 0.7888 - precision: 0.3814 - recall: 0.4343 - auc: 0.7093 - val_loss: 0.4009 - val_tp: 34.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 40.0000 - val_accuracy: 0.8228 - val_precision: 0.5075 - val_recall: 0.4595 - val_auc: 0.8310\n",
            "Epoch 57/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 0.6740 - tp: 122.0000 - fp: 175.0000 - tn: 1199.0000 - fn: 152.0000 - accuracy: 0.8016 - precision: 0.4108 - recall: 0.4453 - auc: 0.7421 - val_loss: 0.4003 - val_tp: 34.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 40.0000 - val_accuracy: 0.8228 - val_precision: 0.5075 - val_recall: 0.4595 - val_auc: 0.8338\n",
            "Epoch 58/100\n",
            "1/1 [==============================] - 0s 61ms/step - loss: 0.6543 - tp: 131.0000 - fp: 190.0000 - tn: 1184.0000 - fn: 143.0000 - accuracy: 0.7979 - precision: 0.4081 - recall: 0.4781 - auc: 0.7582 - val_loss: 0.3996 - val_tp: 34.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 40.0000 - val_accuracy: 0.8204 - val_precision: 0.5000 - val_recall: 0.4595 - val_auc: 0.8350\n",
            "Epoch 59/100\n",
            "1/1 [==============================] - 0s 67ms/step - loss: 0.6493 - tp: 130.0000 - fp: 196.0000 - tn: 1178.0000 - fn: 144.0000 - accuracy: 0.7937 - precision: 0.3988 - recall: 0.4745 - auc: 0.7592 - val_loss: 0.3990 - val_tp: 34.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 40.0000 - val_accuracy: 0.8204 - val_precision: 0.5000 - val_recall: 0.4595 - val_auc: 0.8375\n",
            "Epoch 60/100\n",
            "1/1 [==============================] - 0s 69ms/step - loss: 0.6693 - tp: 129.0000 - fp: 175.0000 - tn: 1199.0000 - fn: 145.0000 - accuracy: 0.8058 - precision: 0.4243 - recall: 0.4708 - auc: 0.7480 - val_loss: 0.3984 - val_tp: 36.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 38.0000 - val_accuracy: 0.8277 - val_precision: 0.5217 - val_recall: 0.4865 - val_auc: 0.8393\n",
            "Epoch 61/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.6715 - tp: 123.0000 - fp: 187.0000 - tn: 1187.0000 - fn: 151.0000 - accuracy: 0.7949 - precision: 0.3968 - recall: 0.4489 - auc: 0.7434 - val_loss: 0.3978 - val_tp: 37.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 37.0000 - val_accuracy: 0.8301 - val_precision: 0.5286 - val_recall: 0.5000 - val_auc: 0.8410\n",
            "Epoch 62/100\n",
            "1/1 [==============================] - 0s 60ms/step - loss: 0.6461 - tp: 141.0000 - fp: 198.0000 - tn: 1176.0000 - fn: 133.0000 - accuracy: 0.7992 - precision: 0.4159 - recall: 0.5146 - auc: 0.7565 - val_loss: 0.3972 - val_tp: 38.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 36.0000 - val_accuracy: 0.8325 - val_precision: 0.5352 - val_recall: 0.5135 - val_auc: 0.8435\n",
            "Epoch 63/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.6910 - tp: 132.0000 - fp: 206.0000 - tn: 1168.0000 - fn: 142.0000 - accuracy: 0.7888 - precision: 0.3905 - recall: 0.4818 - auc: 0.7360 - val_loss: 0.3967 - val_tp: 39.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 35.0000 - val_accuracy: 0.8325 - val_precision: 0.5342 - val_recall: 0.5270 - val_auc: 0.8447\n",
            "Epoch 64/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 0.6780 - tp: 127.0000 - fp: 191.0000 - tn: 1183.0000 - fn: 147.0000 - accuracy: 0.7949 - precision: 0.3994 - recall: 0.4635 - auc: 0.7437 - val_loss: 0.3962 - val_tp: 40.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 34.0000 - val_accuracy: 0.8350 - val_precision: 0.5405 - val_recall: 0.5405 - val_auc: 0.8460\n",
            "Epoch 65/100\n",
            "1/1 [==============================] - 0s 57ms/step - loss: 0.6579 - tp: 141.0000 - fp: 202.0000 - tn: 1172.0000 - fn: 133.0000 - accuracy: 0.7967 - precision: 0.4111 - recall: 0.5146 - auc: 0.7501 - val_loss: 0.3957 - val_tp: 40.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 34.0000 - val_accuracy: 0.8350 - val_precision: 0.5405 - val_recall: 0.5405 - val_auc: 0.8474\n",
            "Epoch 66/100\n",
            "1/1 [==============================] - 0s 63ms/step - loss: 0.6493 - tp: 138.0000 - fp: 192.0000 - tn: 1182.0000 - fn: 136.0000 - accuracy: 0.8010 - precision: 0.4182 - recall: 0.5036 - auc: 0.7578 - val_loss: 0.3952 - val_tp: 40.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 34.0000 - val_accuracy: 0.8350 - val_precision: 0.5405 - val_recall: 0.5405 - val_auc: 0.8490\n",
            "Epoch 67/100\n",
            "1/1 [==============================] - 0s 63ms/step - loss: 0.6119 - tp: 142.0000 - fp: 185.0000 - tn: 1189.0000 - fn: 132.0000 - accuracy: 0.8076 - precision: 0.4343 - recall: 0.5182 - auc: 0.7824 - val_loss: 0.3947 - val_tp: 41.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 33.0000 - val_accuracy: 0.8374 - val_precision: 0.5467 - val_recall: 0.5541 - val_auc: 0.8499\n",
            "Epoch 68/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 0.6618 - tp: 125.0000 - fp: 189.0000 - tn: 1185.0000 - fn: 149.0000 - accuracy: 0.7949 - precision: 0.3981 - recall: 0.4562 - auc: 0.7556 - val_loss: 0.3942 - val_tp: 41.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 33.0000 - val_accuracy: 0.8398 - val_precision: 0.5541 - val_recall: 0.5541 - val_auc: 0.8508\n",
            "Epoch 69/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.6164 - tp: 143.0000 - fp: 188.0000 - tn: 1186.0000 - fn: 131.0000 - accuracy: 0.8064 - precision: 0.4320 - recall: 0.5219 - auc: 0.7796 - val_loss: 0.3937 - val_tp: 41.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 33.0000 - val_accuracy: 0.8398 - val_precision: 0.5541 - val_recall: 0.5541 - val_auc: 0.8519\n",
            "Epoch 70/100\n",
            "1/1 [==============================] - 0s 54ms/step - loss: 0.6110 - tp: 144.0000 - fp: 197.0000 - tn: 1177.0000 - fn: 130.0000 - accuracy: 0.8016 - precision: 0.4223 - recall: 0.5255 - auc: 0.7776 - val_loss: 0.3932 - val_tp: 42.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 32.0000 - val_accuracy: 0.8422 - val_precision: 0.5600 - val_recall: 0.5676 - val_auc: 0.8534\n",
            "Epoch 71/100\n",
            "1/1 [==============================] - 0s 67ms/step - loss: 0.6134 - tp: 138.0000 - fp: 196.0000 - tn: 1178.0000 - fn: 136.0000 - accuracy: 0.7985 - precision: 0.4132 - recall: 0.5036 - auc: 0.7817 - val_loss: 0.3927 - val_tp: 42.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 32.0000 - val_accuracy: 0.8422 - val_precision: 0.5600 - val_recall: 0.5676 - val_auc: 0.8545\n",
            "Epoch 72/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.6091 - tp: 153.0000 - fp: 191.0000 - tn: 1183.0000 - fn: 121.0000 - accuracy: 0.8107 - precision: 0.4448 - recall: 0.5584 - auc: 0.7855 - val_loss: 0.3922 - val_tp: 42.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 32.0000 - val_accuracy: 0.8422 - val_precision: 0.5600 - val_recall: 0.5676 - val_auc: 0.8556\n",
            "Epoch 73/100\n",
            "1/1 [==============================] - 0s 69ms/step - loss: 0.6136 - tp: 147.0000 - fp: 191.0000 - tn: 1183.0000 - fn: 127.0000 - accuracy: 0.8070 - precision: 0.4349 - recall: 0.5365 - auc: 0.7770 - val_loss: 0.3918 - val_tp: 42.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 32.0000 - val_accuracy: 0.8422 - val_precision: 0.5600 - val_recall: 0.5676 - val_auc: 0.8564\n",
            "Epoch 74/100\n",
            "1/1 [==============================] - 0s 78ms/step - loss: 0.6246 - tp: 143.0000 - fp: 190.0000 - tn: 1184.0000 - fn: 131.0000 - accuracy: 0.8052 - precision: 0.4294 - recall: 0.5219 - auc: 0.7737 - val_loss: 0.3913 - val_tp: 42.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 32.0000 - val_accuracy: 0.8422 - val_precision: 0.5600 - val_recall: 0.5676 - val_auc: 0.8581\n",
            "Epoch 75/100\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.5949 - tp: 157.0000 - fp: 195.0000 - tn: 1179.0000 - fn: 117.0000 - accuracy: 0.8107 - precision: 0.4460 - recall: 0.5730 - auc: 0.7886 - val_loss: 0.3909 - val_tp: 42.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 32.0000 - val_accuracy: 0.8422 - val_precision: 0.5600 - val_recall: 0.5676 - val_auc: 0.8593\n",
            "Epoch 76/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.6604 - tp: 131.0000 - fp: 184.0000 - tn: 1190.0000 - fn: 143.0000 - accuracy: 0.8016 - precision: 0.4159 - recall: 0.4781 - auc: 0.7509 - val_loss: 0.3904 - val_tp: 42.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 32.0000 - val_accuracy: 0.8422 - val_precision: 0.5600 - val_recall: 0.5676 - val_auc: 0.8600\n",
            "Epoch 77/100\n",
            "1/1 [==============================] - 0s 247ms/step - loss: 0.5950 - tp: 145.0000 - fp: 185.0000 - tn: 1189.0000 - fn: 129.0000 - accuracy: 0.8095 - precision: 0.4394 - recall: 0.5292 - auc: 0.7952 - val_loss: 0.3900 - val_tp: 42.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 32.0000 - val_accuracy: 0.8398 - val_precision: 0.5526 - val_recall: 0.5676 - val_auc: 0.8616\n",
            "Epoch 78/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.6028 - tp: 152.0000 - fp: 189.0000 - tn: 1185.0000 - fn: 122.0000 - accuracy: 0.8113 - precision: 0.4457 - recall: 0.5547 - auc: 0.7849 - val_loss: 0.3895 - val_tp: 42.0000 - val_fp: 35.0000 - val_tn: 303.0000 - val_fn: 32.0000 - val_accuracy: 0.8374 - val_precision: 0.5455 - val_recall: 0.5676 - val_auc: 0.8629\n",
            "Epoch 79/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.5772 - tp: 159.0000 - fp: 179.0000 - tn: 1195.0000 - fn: 115.0000 - accuracy: 0.8216 - precision: 0.4704 - recall: 0.5803 - auc: 0.8056 - val_loss: 0.3890 - val_tp: 42.0000 - val_fp: 35.0000 - val_tn: 303.0000 - val_fn: 32.0000 - val_accuracy: 0.8374 - val_precision: 0.5455 - val_recall: 0.5676 - val_auc: 0.8641\n",
            "Epoch 80/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.5781 - tp: 156.0000 - fp: 206.0000 - tn: 1168.0000 - fn: 118.0000 - accuracy: 0.8034 - precision: 0.4309 - recall: 0.5693 - auc: 0.8059 - val_loss: 0.3886 - val_tp: 42.0000 - val_fp: 35.0000 - val_tn: 303.0000 - val_fn: 32.0000 - val_accuracy: 0.8374 - val_precision: 0.5455 - val_recall: 0.5676 - val_auc: 0.8656\n",
            "Epoch 81/100\n",
            "1/1 [==============================] - 0s 59ms/step - loss: 0.6109 - tp: 150.0000 - fp: 209.0000 - tn: 1165.0000 - fn: 124.0000 - accuracy: 0.7979 - precision: 0.4178 - recall: 0.5474 - auc: 0.7845 - val_loss: 0.3881 - val_tp: 42.0000 - val_fp: 35.0000 - val_tn: 303.0000 - val_fn: 32.0000 - val_accuracy: 0.8374 - val_precision: 0.5455 - val_recall: 0.5676 - val_auc: 0.8660\n",
            "Epoch 82/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.5775 - tp: 166.0000 - fp: 189.0000 - tn: 1185.0000 - fn: 108.0000 - accuracy: 0.8198 - precision: 0.4676 - recall: 0.6058 - auc: 0.8047 - val_loss: 0.3876 - val_tp: 43.0000 - val_fp: 35.0000 - val_tn: 303.0000 - val_fn: 31.0000 - val_accuracy: 0.8398 - val_precision: 0.5513 - val_recall: 0.5811 - val_auc: 0.8672\n",
            "Epoch 83/100\n",
            "1/1 [==============================] - 0s 67ms/step - loss: 0.6250 - tp: 149.0000 - fp: 209.0000 - tn: 1165.0000 - fn: 125.0000 - accuracy: 0.7973 - precision: 0.4162 - recall: 0.5438 - auc: 0.7764 - val_loss: 0.3872 - val_tp: 44.0000 - val_fp: 35.0000 - val_tn: 303.0000 - val_fn: 30.0000 - val_accuracy: 0.8422 - val_precision: 0.5570 - val_recall: 0.5946 - val_auc: 0.8685\n",
            "Epoch 84/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.5938 - tp: 159.0000 - fp: 202.0000 - tn: 1172.0000 - fn: 115.0000 - accuracy: 0.8076 - precision: 0.4404 - recall: 0.5803 - auc: 0.7895 - val_loss: 0.3867 - val_tp: 45.0000 - val_fp: 35.0000 - val_tn: 303.0000 - val_fn: 29.0000 - val_accuracy: 0.8447 - val_precision: 0.5625 - val_recall: 0.6081 - val_auc: 0.8697\n",
            "Epoch 85/100\n",
            "1/1 [==============================] - 0s 63ms/step - loss: 0.5893 - tp: 154.0000 - fp: 185.0000 - tn: 1189.0000 - fn: 120.0000 - accuracy: 0.8149 - precision: 0.4543 - recall: 0.5620 - auc: 0.7918 - val_loss: 0.3863 - val_tp: 45.0000 - val_fp: 35.0000 - val_tn: 303.0000 - val_fn: 29.0000 - val_accuracy: 0.8447 - val_precision: 0.5625 - val_recall: 0.6081 - val_auc: 0.8703\n",
            "Epoch 86/100\n",
            "1/1 [==============================] - 0s 63ms/step - loss: 0.5932 - tp: 159.0000 - fp: 184.0000 - tn: 1190.0000 - fn: 115.0000 - accuracy: 0.8186 - precision: 0.4636 - recall: 0.5803 - auc: 0.7964 - val_loss: 0.3859 - val_tp: 45.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 29.0000 - val_accuracy: 0.8471 - val_precision: 0.5696 - val_recall: 0.6081 - val_auc: 0.8715\n",
            "Epoch 87/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.5852 - tp: 161.0000 - fp: 204.0000 - tn: 1170.0000 - fn: 113.0000 - accuracy: 0.8076 - precision: 0.4411 - recall: 0.5876 - auc: 0.7937 - val_loss: 0.3854 - val_tp: 45.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 29.0000 - val_accuracy: 0.8471 - val_precision: 0.5696 - val_recall: 0.6081 - val_auc: 0.8724\n",
            "Epoch 88/100\n",
            "1/1 [==============================] - 0s 64ms/step - loss: 0.5754 - tp: 161.0000 - fp: 194.0000 - tn: 1180.0000 - fn: 113.0000 - accuracy: 0.8137 - precision: 0.4535 - recall: 0.5876 - auc: 0.8030 - val_loss: 0.3850 - val_tp: 45.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 29.0000 - val_accuracy: 0.8422 - val_precision: 0.5556 - val_recall: 0.6081 - val_auc: 0.8734\n",
            "Epoch 89/100\n",
            "1/1 [==============================] - 0s 61ms/step - loss: 0.5745 - tp: 164.0000 - fp: 205.0000 - tn: 1169.0000 - fn: 110.0000 - accuracy: 0.8089 - precision: 0.4444 - recall: 0.5985 - auc: 0.8020 - val_loss: 0.3845 - val_tp: 45.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 29.0000 - val_accuracy: 0.8422 - val_precision: 0.5556 - val_recall: 0.6081 - val_auc: 0.8739\n",
            "Epoch 90/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.5900 - tp: 164.0000 - fp: 187.0000 - tn: 1187.0000 - fn: 110.0000 - accuracy: 0.8198 - precision: 0.4672 - recall: 0.5985 - auc: 0.7943 - val_loss: 0.3841 - val_tp: 47.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 27.0000 - val_accuracy: 0.8471 - val_precision: 0.5663 - val_recall: 0.6351 - val_auc: 0.8752\n",
            "Epoch 91/100\n",
            "1/1 [==============================] - 0s 58ms/step - loss: 0.5512 - tp: 167.0000 - fp: 167.0000 - tn: 1207.0000 - fn: 107.0000 - accuracy: 0.8337 - precision: 0.5000 - recall: 0.6095 - auc: 0.8220 - val_loss: 0.3837 - val_tp: 47.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 27.0000 - val_accuracy: 0.8471 - val_precision: 0.5663 - val_recall: 0.6351 - val_auc: 0.8762\n",
            "Epoch 92/100\n",
            "1/1 [==============================] - 0s 55ms/step - loss: 0.5352 - tp: 165.0000 - fp: 180.0000 - tn: 1194.0000 - fn: 109.0000 - accuracy: 0.8246 - precision: 0.4783 - recall: 0.6022 - auc: 0.8326 - val_loss: 0.3833 - val_tp: 47.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 27.0000 - val_accuracy: 0.8471 - val_precision: 0.5663 - val_recall: 0.6351 - val_auc: 0.8765\n",
            "Epoch 93/100\n",
            "1/1 [==============================] - 0s 67ms/step - loss: 0.5643 - tp: 161.0000 - fp: 202.0000 - tn: 1172.0000 - fn: 113.0000 - accuracy: 0.8089 - precision: 0.4435 - recall: 0.5876 - auc: 0.8075 - val_loss: 0.3829 - val_tp: 47.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 27.0000 - val_accuracy: 0.8471 - val_precision: 0.5663 - val_recall: 0.6351 - val_auc: 0.8773\n",
            "Epoch 94/100\n",
            "1/1 [==============================] - 0s 61ms/step - loss: 0.5590 - tp: 166.0000 - fp: 220.0000 - tn: 1154.0000 - fn: 108.0000 - accuracy: 0.8010 - precision: 0.4301 - recall: 0.6058 - auc: 0.8104 - val_loss: 0.3825 - val_tp: 47.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 27.0000 - val_accuracy: 0.8471 - val_precision: 0.5663 - val_recall: 0.6351 - val_auc: 0.8782\n",
            "Epoch 95/100\n",
            "1/1 [==============================] - 0s 57ms/step - loss: 0.5849 - tp: 152.0000 - fp: 183.0000 - tn: 1191.0000 - fn: 122.0000 - accuracy: 0.8149 - precision: 0.4537 - recall: 0.5547 - auc: 0.8006 - val_loss: 0.3821 - val_tp: 47.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 27.0000 - val_accuracy: 0.8471 - val_precision: 0.5663 - val_recall: 0.6351 - val_auc: 0.8795\n",
            "Epoch 96/100\n",
            "1/1 [==============================] - 0s 62ms/step - loss: 0.5768 - tp: 159.0000 - fp: 204.0000 - tn: 1170.0000 - fn: 115.0000 - accuracy: 0.8064 - precision: 0.4380 - recall: 0.5803 - auc: 0.8046 - val_loss: 0.3817 - val_tp: 47.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 27.0000 - val_accuracy: 0.8471 - val_precision: 0.5663 - val_recall: 0.6351 - val_auc: 0.8797\n",
            "Epoch 97/100\n",
            "1/1 [==============================] - 0s 60ms/step - loss: 0.5551 - tp: 166.0000 - fp: 199.0000 - tn: 1175.0000 - fn: 108.0000 - accuracy: 0.8137 - precision: 0.4548 - recall: 0.6058 - auc: 0.8171 - val_loss: 0.3812 - val_tp: 47.0000 - val_fp: 37.0000 - val_tn: 301.0000 - val_fn: 27.0000 - val_accuracy: 0.8447 - val_precision: 0.5595 - val_recall: 0.6351 - val_auc: 0.8802\n",
            "Epoch 98/100\n",
            "1/1 [==============================] - 0s 61ms/step - loss: 0.5443 - tp: 165.0000 - fp: 205.0000 - tn: 1169.0000 - fn: 109.0000 - accuracy: 0.8095 - precision: 0.4459 - recall: 0.6022 - auc: 0.8154 - val_loss: 0.3808 - val_tp: 47.0000 - val_fp: 37.0000 - val_tn: 301.0000 - val_fn: 27.0000 - val_accuracy: 0.8447 - val_precision: 0.5595 - val_recall: 0.6351 - val_auc: 0.8813\n",
            "Epoch 99/100\n",
            "1/1 [==============================] - 0s 68ms/step - loss: 0.5994 - tp: 149.0000 - fp: 186.0000 - tn: 1188.0000 - fn: 125.0000 - accuracy: 0.8113 - precision: 0.4448 - recall: 0.5438 - auc: 0.7856 - val_loss: 0.3804 - val_tp: 47.0000 - val_fp: 37.0000 - val_tn: 301.0000 - val_fn: 27.0000 - val_accuracy: 0.8447 - val_precision: 0.5595 - val_recall: 0.6351 - val_auc: 0.8817\n",
            "Epoch 100/100\n",
            "1/1 [==============================] - 0s 70ms/step - loss: 0.5744 - tp: 153.0000 - fp: 200.0000 - tn: 1174.0000 - fn: 121.0000 - accuracy: 0.8052 - precision: 0.4334 - recall: 0.5584 - auc: 0.8048 - val_loss: 0.3799 - val_tp: 47.0000 - val_fp: 37.0000 - val_tn: 301.0000 - val_fn: 27.0000 - val_accuracy: 0.8447 - val_precision: 0.5595 - val_recall: 0.6351 - val_auc: 0.8828\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 609
        },
        "id": "3yC4NsR18WzX",
        "outputId": "123f8d57-4051-4fb0-facd-9ac3f9c1161a"
      },
      "source": [
        "plot_metrics(weighted_history)"
      ],
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2mJjVDbn8bze"
      },
      "source": [
        "train_predictions_weighted = weighted_model.predict(train_features, batch_size=BATCH_SIZE)\r\n",
        "test_predictions_weighted = weighted_model.predict(test_features, batch_size=BATCH_SIZE)"
      ],
      "execution_count": 143,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "id": "1dVQsk4P8fqx",
        "outputId": "a246d77c-7c1c-4864-f82b-e7401470488c"
      },
      "source": [
        "weighted_results = weighted_model.evaluate(test_features, test_labels,\r\n",
        "                                           batch_size=BATCH_SIZE, verbose=0)\r\n",
        "for name, value in zip(weighted_model.metrics_names, weighted_results):\r\n",
        "  print(name, ': ', value)\r\n",
        "print()\r\n",
        "\r\n",
        "plot_cm(test_labels, test_predictions_weighted)"
      ],
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "loss :  0.3581790030002594\n",
            "tp :  55.0\n",
            "fp :  35.0\n",
            "tn :  395.0\n",
            "fn :  31.0\n",
            "accuracy :  0.8720930218696594\n",
            "precision :  0.6111111044883728\n",
            "recall :  0.6395348906517029\n",
            "auc :  0.8962817788124084\n",
            "\n",
            "Legitimate Transactions Detected (True Negatives):  395\n",
            "Legitimate Transactions Incorrectly Detected (False Positives):  35\n",
            "Fraudulent Transactions Missed (False Negatives):  31\n",
            "Fraudulent Transactions Detected (True Positives):  55\n",
            "Total Fraudulent Transactions:  86\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623
        },
        "id": "jqSh2Ybj8hca",
        "outputId": "840750de-6f61-4ec1-8a67-96c679c3a8a9"
      },
      "source": [
        "plot_roc(\"Train Baseline\", train_labels, train_predictions_baseline, color=colors[0])\r\n",
        "plot_roc(\"Test Baseline\", test_labels, test_predictions_baseline, color=colors[0], linestyle='--')\r\n",
        "\r\n",
        "plot_roc(\"Train Weighted\", train_labels, train_predictions_weighted, color=colors[1])\r\n",
        "plot_roc(\"Test Weighted\", test_labels, test_predictions_weighted, color=colors[1], linestyle='--')\r\n",
        "\r\n",
        "\r\n",
        "plt.legend(loc='lower right')"
      ],
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f635036ac18>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 145
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h3LsPHa98knC"
      },
      "source": [
        "pos_features = train_features[bool_train_labels]\r\n",
        "neg_features = train_features[~bool_train_labels]\r\n",
        "\r\n",
        "pos_labels = train_labels[bool_train_labels]\r\n",
        "neg_labels = train_labels[~bool_train_labels]"
      ],
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8rBY5Zsx8oFu",
        "outputId": "345ba32b-004a-4b09-9368-cb7923924909"
      },
      "source": [
        "ids = np.arange(len(pos_features))\r\n",
        "choices = np.random.choice(ids, len(neg_features))\r\n",
        "\r\n",
        "res_pos_features = pos_features[choices]\r\n",
        "res_pos_labels = pos_labels[choices]\r\n",
        "\r\n",
        "res_pos_features.shape"
      ],
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1374, 33)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WHajLokr8qb2",
        "outputId": "ce8c984c-4b53-48e0-b92f-6948e3baa2c3"
      },
      "source": [
        "resampled_features = np.concatenate([res_pos_features, neg_features], axis=0)\r\n",
        "resampled_labels = np.concatenate([res_pos_labels, neg_labels], axis=0)\r\n",
        "\r\n",
        "order = np.arange(len(resampled_labels))\r\n",
        "np.random.shuffle(order)\r\n",
        "resampled_features = resampled_features[order]\r\n",
        "resampled_labels = resampled_labels[order]\r\n",
        "\r\n",
        "resampled_features.shape"
      ],
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2748, 33)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y8ptuT0l8sw3"
      },
      "source": [
        "BUFFER_SIZE = 100000\r\n",
        "\r\n",
        "def make_ds(features, labels):\r\n",
        "  ds = tf.data.Dataset.from_tensor_slices((features, labels))#.cache()\r\n",
        "  ds = ds.shuffle(BUFFER_SIZE).repeat()\r\n",
        "  return ds\r\n",
        "\r\n",
        "pos_ds = make_ds(pos_features, pos_labels)\r\n",
        "neg_ds = make_ds(neg_features, neg_labels)"
      ],
      "execution_count": 149,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GHP870ag8u_j",
        "outputId": "038c8c21-8b37-45a8-f3e0-e6784ff40cae"
      },
      "source": [
        "for features, label in pos_ds.take(1):\r\n",
        "  print(\"Features:\\n\", features.numpy())\r\n",
        "  print()\r\n",
        "  print(\"Label: \", label.numpy())"
      ],
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Features:\n",
            " [-0.97248824 -1.23064829  1.79086367 -0.54822972  0.94889827 -0.15730243\n",
            " -2.70964587  0.93550082 -1.03462873  0.31859664 -0.50169921  0.09771367\n",
            "  0.90608745  1.70916677  0.76728572 -0.92738619 -0.89064782  4.0431879\n",
            " -0.08916877 -0.07410232 -0.06044899 -0.48403048 -0.22175994  1.03842333\n",
            " -0.56741859  0.09744714 -0.13616684 -0.52303951 -0.78971218 -0.09256312\n",
            "  0.58368769 -0.12438515  1.33634814]\n",
            "\n",
            "Label:  1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AS_x0pwR8w8t"
      },
      "source": [
        "resampled_ds = tf.data.experimental.sample_from_datasets([pos_ds, neg_ds], weights=[0.5, 0.5])\r\n",
        "resampled_ds = resampled_ds.batch(BATCH_SIZE).prefetch(2)"
      ],
      "execution_count": 151,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oUgfGK2D8zZt",
        "outputId": "6047b8a4-73e1-402f-8347-d753502bf10c"
      },
      "source": [
        "for features, label in resampled_ds.take(1):\r\n",
        "  print(label.numpy().mean())"
      ],
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.4921875\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yo1ybmSn81RO",
        "outputId": "bf02c811-afc8-4f39-c7f4-fce6d0956f7b"
      },
      "source": [
        "resampled_steps_per_epoch = np.ceil(2.0*neg/BATCH_SIZE)\r\n",
        "resampled_steps_per_epoch"
      ],
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wt2SQXjN83B7",
        "outputId": "1097a94d-7a41-4e10-cd3f-3988ecba5a46"
      },
      "source": [
        "resampled_model = make_model()\r\n",
        "resampled_model.load_weights(initial_weights)\r\n",
        "\r\n",
        "# Reset the bias to zero, since this dataset is balanced.\r\n",
        "output_layer = resampled_model.layers[-1] \r\n",
        "output_layer.bias.assign([0])\r\n",
        "\r\n",
        "val_ds = tf.data.Dataset.from_tensor_slices((val_features, val_labels)).cache()\r\n",
        "val_ds = val_ds.batch(BATCH_SIZE).prefetch(2) \r\n",
        "\r\n",
        "resampled_history = resampled_model.fit(\r\n",
        "    resampled_ds,\r\n",
        "    epochs=EPOCHS,\r\n",
        "    steps_per_epoch=resampled_steps_per_epoch,\r\n",
        "    callbacks=[early_stopping],\r\n",
        "    validation_data=val_ds)"
      ],
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "3/3 [==============================] - 3s 415ms/step - loss: 0.9264 - tp: 1117.7500 - fp: 1176.2500 - tn: 1618.0000 - fn: 1212.0000 - accuracy: 0.5397 - precision: 0.4873 - recall: 0.4821 - auc: 0.5405 - val_loss: 0.7603 - val_tp: 37.0000 - val_fp: 167.0000 - val_tn: 171.0000 - val_fn: 37.0000 - val_accuracy: 0.5049 - val_precision: 0.1814 - val_recall: 0.5000 - val_auc: 0.5100\n",
            "Epoch 2/100\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 0.8814 - tp: 1066.2500 - fp: 1081.7500 - tn: 1277.2500 - fn: 1182.7500 - accuracy: 0.5075 - precision: 0.4945 - recall: 0.4729 - auc: 0.5095 - val_loss: 0.7399 - val_tp: 41.0000 - val_fp: 156.0000 - val_tn: 182.0000 - val_fn: 33.0000 - val_accuracy: 0.5413 - val_precision: 0.2081 - val_recall: 0.5541 - val_auc: 0.5460\n",
            "Epoch 3/100\n",
            "3/3 [==============================] - 0s 151ms/step - loss: 0.8460 - tp: 1203.7500 - fp: 1076.7500 - tn: 1231.5000 - fn: 1096.0000 - accuracy: 0.5288 - precision: 0.5281 - recall: 0.5224 - auc: 0.5420 - val_loss: 0.7210 - val_tp: 44.0000 - val_fp: 149.0000 - val_tn: 189.0000 - val_fn: 30.0000 - val_accuracy: 0.5655 - val_precision: 0.2280 - val_recall: 0.5946 - val_auc: 0.5844\n",
            "Epoch 4/100\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 0.8334 - tp: 1214.0000 - fp: 1037.2500 - tn: 1254.0000 - fn: 1102.7500 - accuracy: 0.5334 - precision: 0.5390 - recall: 0.5212 - auc: 0.5480 - val_loss: 0.7037 - val_tp: 49.0000 - val_fp: 141.0000 - val_tn: 197.0000 - val_fn: 25.0000 - val_accuracy: 0.5971 - val_precision: 0.2579 - val_recall: 0.6622 - val_auc: 0.6219\n",
            "Epoch 5/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.7981 - tp: 1242.7500 - fp: 1037.2500 - tn: 1322.5000 - fn: 1005.5000 - accuracy: 0.5579 - precision: 0.5458 - recall: 0.5552 - auc: 0.5817 - val_loss: 0.6868 - val_tp: 50.0000 - val_fp: 135.0000 - val_tn: 203.0000 - val_fn: 24.0000 - val_accuracy: 0.6141 - val_precision: 0.2703 - val_recall: 0.6757 - val_auc: 0.6537\n",
            "Epoch 6/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.7734 - tp: 1328.7500 - fp: 990.5000 - tn: 1270.7500 - fn: 1018.0000 - accuracy: 0.5627 - precision: 0.5706 - recall: 0.5648 - auc: 0.5991 - val_loss: 0.6714 - val_tp: 52.0000 - val_fp: 130.0000 - val_tn: 208.0000 - val_fn: 22.0000 - val_accuracy: 0.6311 - val_precision: 0.2857 - val_recall: 0.7027 - val_auc: 0.6832\n",
            "Epoch 7/100\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.7522 - tp: 1350.7500 - fp: 995.5000 - tn: 1327.0000 - fn: 934.7500 - accuracy: 0.5816 - precision: 0.5761 - recall: 0.5905 - auc: 0.6190 - val_loss: 0.6572 - val_tp: 53.0000 - val_fp: 128.0000 - val_tn: 210.0000 - val_fn: 21.0000 - val_accuracy: 0.6383 - val_precision: 0.2928 - val_recall: 0.7162 - val_auc: 0.7116\n",
            "Epoch 8/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.7461 - tp: 1341.5000 - fp: 967.0000 - tn: 1332.5000 - fn: 967.0000 - accuracy: 0.5792 - precision: 0.5777 - recall: 0.5815 - auc: 0.6228 - val_loss: 0.6438 - val_tp: 54.0000 - val_fp: 124.0000 - val_tn: 214.0000 - val_fn: 20.0000 - val_accuracy: 0.6505 - val_precision: 0.3034 - val_recall: 0.7297 - val_auc: 0.7345\n",
            "Epoch 9/100\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 0.7358 - tp: 1381.0000 - fp: 969.2500 - tn: 1335.2500 - fn: 922.5000 - accuracy: 0.5866 - precision: 0.5837 - recall: 0.5980 - auc: 0.6309 - val_loss: 0.6312 - val_tp: 53.0000 - val_fp: 113.0000 - val_tn: 225.0000 - val_fn: 21.0000 - val_accuracy: 0.6748 - val_precision: 0.3193 - val_recall: 0.7162 - val_auc: 0.7550\n",
            "Epoch 10/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.7017 - tp: 1386.5000 - fp: 915.5000 - tn: 1414.0000 - fn: 892.0000 - accuracy: 0.6059 - precision: 0.6017 - recall: 0.6072 - auc: 0.6579 - val_loss: 0.6196 - val_tp: 55.0000 - val_fp: 110.0000 - val_tn: 228.0000 - val_fn: 19.0000 - val_accuracy: 0.6869 - val_precision: 0.3333 - val_recall: 0.7432 - val_auc: 0.7721\n",
            "Epoch 11/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.6911 - tp: 1420.2500 - fp: 967.5000 - tn: 1391.0000 - fn: 829.2500 - accuracy: 0.6098 - precision: 0.5950 - recall: 0.6304 - auc: 0.6699 - val_loss: 0.6082 - val_tp: 56.0000 - val_fp: 106.0000 - val_tn: 232.0000 - val_fn: 18.0000 - val_accuracy: 0.6990 - val_precision: 0.3457 - val_recall: 0.7568 - val_auc: 0.7856\n",
            "Epoch 12/100\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.6681 - tp: 1442.0000 - fp: 847.2500 - tn: 1464.0000 - fn: 854.7500 - accuracy: 0.6314 - precision: 0.6335 - recall: 0.6269 - auc: 0.6887 - val_loss: 0.5975 - val_tp: 56.0000 - val_fp: 98.0000 - val_tn: 240.0000 - val_fn: 18.0000 - val_accuracy: 0.7184 - val_precision: 0.3636 - val_recall: 0.7568 - val_auc: 0.7978\n",
            "Epoch 13/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.6586 - tp: 1484.5000 - fp: 867.7500 - tn: 1449.0000 - fn: 806.7500 - accuracy: 0.6364 - precision: 0.6304 - recall: 0.6502 - auc: 0.7004 - val_loss: 0.5873 - val_tp: 57.0000 - val_fp: 95.0000 - val_tn: 243.0000 - val_fn: 17.0000 - val_accuracy: 0.7282 - val_precision: 0.3750 - val_recall: 0.7703 - val_auc: 0.8076\n",
            "Epoch 14/100\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.6532 - tp: 1501.7500 - fp: 848.5000 - tn: 1471.0000 - fn: 786.7500 - accuracy: 0.6461 - precision: 0.6426 - recall: 0.6557 - auc: 0.7075 - val_loss: 0.5777 - val_tp: 58.0000 - val_fp: 90.0000 - val_tn: 248.0000 - val_fn: 16.0000 - val_accuracy: 0.7427 - val_precision: 0.3919 - val_recall: 0.7838 - val_auc: 0.8168\n",
            "Epoch 15/100\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.6315 - tp: 1499.0000 - fp: 809.5000 - tn: 1496.5000 - fn: 803.0000 - accuracy: 0.6493 - precision: 0.6495 - recall: 0.6514 - auc: 0.7208 - val_loss: 0.5684 - val_tp: 58.0000 - val_fp: 91.0000 - val_tn: 247.0000 - val_fn: 16.0000 - val_accuracy: 0.7403 - val_precision: 0.3893 - val_recall: 0.7838 - val_auc: 0.8252\n",
            "Epoch 16/100\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.6394 - tp: 1533.0000 - fp: 846.2500 - tn: 1478.2500 - fn: 750.5000 - accuracy: 0.6516 - precision: 0.6426 - recall: 0.6685 - auc: 0.7177 - val_loss: 0.5595 - val_tp: 58.0000 - val_fp: 87.0000 - val_tn: 251.0000 - val_fn: 16.0000 - val_accuracy: 0.7500 - val_precision: 0.4000 - val_recall: 0.7838 - val_auc: 0.8320\n",
            "Epoch 17/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.6074 - tp: 1533.5000 - fp: 765.0000 - tn: 1582.2500 - fn: 727.2500 - accuracy: 0.6770 - precision: 0.6706 - recall: 0.6783 - auc: 0.7464 - val_loss: 0.5511 - val_tp: 59.0000 - val_fp: 86.0000 - val_tn: 252.0000 - val_fn: 15.0000 - val_accuracy: 0.7549 - val_precision: 0.4069 - val_recall: 0.7973 - val_auc: 0.8381\n",
            "Epoch 18/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.6081 - tp: 1542.5000 - fp: 792.0000 - tn: 1561.5000 - fn: 712.0000 - accuracy: 0.6716 - precision: 0.6579 - recall: 0.6839 - auc: 0.7478 - val_loss: 0.5427 - val_tp: 60.0000 - val_fp: 79.0000 - val_tn: 259.0000 - val_fn: 14.0000 - val_accuracy: 0.7743 - val_precision: 0.4317 - val_recall: 0.8108 - val_auc: 0.8434\n",
            "Epoch 19/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.5848 - tp: 1601.0000 - fp: 741.7500 - tn: 1580.7500 - fn: 684.5000 - accuracy: 0.6912 - precision: 0.6861 - recall: 0.7001 - auc: 0.7658 - val_loss: 0.5348 - val_tp: 60.0000 - val_fp: 77.0000 - val_tn: 261.0000 - val_fn: 14.0000 - val_accuracy: 0.7791 - val_precision: 0.4380 - val_recall: 0.8108 - val_auc: 0.8480\n",
            "Epoch 20/100\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.5886 - tp: 1649.5000 - fp: 712.5000 - tn: 1536.5000 - fn: 709.5000 - accuracy: 0.6919 - precision: 0.7007 - recall: 0.6996 - auc: 0.7670 - val_loss: 0.5278 - val_tp: 59.0000 - val_fp: 76.0000 - val_tn: 262.0000 - val_fn: 15.0000 - val_accuracy: 0.7791 - val_precision: 0.4370 - val_recall: 0.7973 - val_auc: 0.8530\n",
            "Epoch 21/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.5842 - tp: 1577.5000 - fp: 728.7500 - tn: 1608.5000 - fn: 693.2500 - accuracy: 0.6917 - precision: 0.6840 - recall: 0.6945 - auc: 0.7681 - val_loss: 0.5210 - val_tp: 59.0000 - val_fp: 74.0000 - val_tn: 264.0000 - val_fn: 15.0000 - val_accuracy: 0.7840 - val_precision: 0.4436 - val_recall: 0.7973 - val_auc: 0.8563\n",
            "Epoch 22/100\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.5804 - tp: 1633.0000 - fp: 708.7500 - tn: 1579.5000 - fn: 686.7500 - accuracy: 0.6978 - precision: 0.6973 - recall: 0.7048 - auc: 0.7719 - val_loss: 0.5148 - val_tp: 60.0000 - val_fp: 72.0000 - val_tn: 266.0000 - val_fn: 14.0000 - val_accuracy: 0.7913 - val_precision: 0.4545 - val_recall: 0.8108 - val_auc: 0.8598\n",
            "Epoch 23/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.5622 - tp: 1632.2500 - fp: 671.7500 - tn: 1629.7500 - fn: 674.2500 - accuracy: 0.7077 - precision: 0.7094 - recall: 0.7065 - auc: 0.7872 - val_loss: 0.5091 - val_tp: 60.0000 - val_fp: 71.0000 - val_tn: 267.0000 - val_fn: 14.0000 - val_accuracy: 0.7937 - val_precision: 0.4580 - val_recall: 0.8108 - val_auc: 0.8641\n",
            "Epoch 24/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.5512 - tp: 1679.7500 - fp: 658.2500 - tn: 1620.2500 - fn: 649.7500 - accuracy: 0.7170 - precision: 0.7196 - recall: 0.7220 - auc: 0.7969 - val_loss: 0.5036 - val_tp: 60.0000 - val_fp: 70.0000 - val_tn: 268.0000 - val_fn: 14.0000 - val_accuracy: 0.7961 - val_precision: 0.4615 - val_recall: 0.8108 - val_auc: 0.8674\n",
            "Epoch 25/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.5628 - tp: 1685.5000 - fp: 678.7500 - tn: 1580.7500 - fn: 663.0000 - accuracy: 0.7072 - precision: 0.7108 - recall: 0.7174 - auc: 0.7864 - val_loss: 0.4983 - val_tp: 60.0000 - val_fp: 66.0000 - val_tn: 272.0000 - val_fn: 14.0000 - val_accuracy: 0.8058 - val_precision: 0.4762 - val_recall: 0.8108 - val_auc: 0.8704\n",
            "Epoch 26/100\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.5404 - tp: 1704.0000 - fp: 614.0000 - tn: 1670.7500 - fn: 619.2500 - accuracy: 0.7337 - precision: 0.7365 - recall: 0.7359 - auc: 0.8077 - val_loss: 0.4933 - val_tp: 61.0000 - val_fp: 64.0000 - val_tn: 274.0000 - val_fn: 13.0000 - val_accuracy: 0.8131 - val_precision: 0.4880 - val_recall: 0.8243 - val_auc: 0.8732\n",
            "Epoch 27/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.5357 - tp: 1702.5000 - fp: 609.0000 - tn: 1671.5000 - fn: 625.0000 - accuracy: 0.7319 - precision: 0.7380 - recall: 0.7307 - auc: 0.8103 - val_loss: 0.4884 - val_tp: 60.0000 - val_fp: 64.0000 - val_tn: 274.0000 - val_fn: 14.0000 - val_accuracy: 0.8107 - val_precision: 0.4839 - val_recall: 0.8108 - val_auc: 0.8751\n",
            "Epoch 28/100\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.5409 - tp: 1645.2500 - fp: 616.2500 - tn: 1712.5000 - fn: 634.0000 - accuracy: 0.7276 - precision: 0.7267 - recall: 0.7200 - auc: 0.8077 - val_loss: 0.4835 - val_tp: 60.0000 - val_fp: 65.0000 - val_tn: 273.0000 - val_fn: 14.0000 - val_accuracy: 0.8083 - val_precision: 0.4800 - val_recall: 0.8108 - val_auc: 0.8782\n",
            "Epoch 29/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.5311 - tp: 1676.2500 - fp: 603.5000 - tn: 1684.5000 - fn: 643.7500 - accuracy: 0.7289 - precision: 0.7367 - recall: 0.7215 - auc: 0.8129 - val_loss: 0.4791 - val_tp: 60.0000 - val_fp: 63.0000 - val_tn: 275.0000 - val_fn: 14.0000 - val_accuracy: 0.8131 - val_precision: 0.4878 - val_recall: 0.8108 - val_auc: 0.8809\n",
            "Epoch 30/100\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.5124 - tp: 1623.5000 - fp: 611.7500 - tn: 1792.7500 - fn: 580.0000 - accuracy: 0.7402 - precision: 0.7239 - recall: 0.7353 - auc: 0.8276 - val_loss: 0.4741 - val_tp: 60.0000 - val_fp: 61.0000 - val_tn: 277.0000 - val_fn: 14.0000 - val_accuracy: 0.8180 - val_precision: 0.4959 - val_recall: 0.8108 - val_auc: 0.8830\n",
            "Epoch 31/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.5152 - tp: 1715.7500 - fp: 585.7500 - tn: 1702.5000 - fn: 604.0000 - accuracy: 0.7409 - precision: 0.7445 - recall: 0.7393 - auc: 0.8262 - val_loss: 0.4693 - val_tp: 60.0000 - val_fp: 59.0000 - val_tn: 279.0000 - val_fn: 14.0000 - val_accuracy: 0.8228 - val_precision: 0.5042 - val_recall: 0.8108 - val_auc: 0.8858\n",
            "Epoch 32/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.5067 - tp: 1691.7500 - fp: 578.7500 - tn: 1739.7500 - fn: 597.7500 - accuracy: 0.7443 - precision: 0.7447 - recall: 0.7384 - auc: 0.8308 - val_loss: 0.4647 - val_tp: 61.0000 - val_fp: 58.0000 - val_tn: 280.0000 - val_fn: 13.0000 - val_accuracy: 0.8277 - val_precision: 0.5126 - val_recall: 0.8243 - val_auc: 0.8877\n",
            "Epoch 33/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.5023 - tp: 1687.2500 - fp: 568.0000 - tn: 1760.5000 - fn: 592.2500 - accuracy: 0.7482 - precision: 0.7472 - recall: 0.7407 - auc: 0.8373 - val_loss: 0.4601 - val_tp: 61.0000 - val_fp: 56.0000 - val_tn: 282.0000 - val_fn: 13.0000 - val_accuracy: 0.8325 - val_precision: 0.5214 - val_recall: 0.8243 - val_auc: 0.8898\n",
            "Epoch 34/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.5006 - tp: 1714.2500 - fp: 552.7500 - tn: 1754.5000 - fn: 586.5000 - accuracy: 0.7526 - precision: 0.7551 - recall: 0.7450 - auc: 0.8376 - val_loss: 0.4556 - val_tp: 61.0000 - val_fp: 56.0000 - val_tn: 282.0000 - val_fn: 13.0000 - val_accuracy: 0.8325 - val_precision: 0.5214 - val_recall: 0.8243 - val_auc: 0.8916\n",
            "Epoch 35/100\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.5033 - tp: 1701.0000 - fp: 581.7500 - tn: 1738.7500 - fn: 586.5000 - accuracy: 0.7454 - precision: 0.7437 - recall: 0.7425 - auc: 0.8344 - val_loss: 0.4513 - val_tp: 61.0000 - val_fp: 55.0000 - val_tn: 283.0000 - val_fn: 13.0000 - val_accuracy: 0.8350 - val_precision: 0.5259 - val_recall: 0.8243 - val_auc: 0.8941\n",
            "Epoch 36/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.4881 - tp: 1741.7500 - fp: 526.2500 - tn: 1762.0000 - fn: 578.0000 - accuracy: 0.7611 - precision: 0.7687 - recall: 0.7518 - auc: 0.8464 - val_loss: 0.4471 - val_tp: 61.0000 - val_fp: 53.0000 - val_tn: 285.0000 - val_fn: 13.0000 - val_accuracy: 0.8398 - val_precision: 0.5351 - val_recall: 0.8243 - val_auc: 0.8955\n",
            "Epoch 37/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.4862 - tp: 1740.7500 - fp: 501.0000 - tn: 1776.7500 - fn: 589.5000 - accuracy: 0.7628 - precision: 0.7770 - recall: 0.7462 - auc: 0.8480 - val_loss: 0.4432 - val_tp: 61.0000 - val_fp: 53.0000 - val_tn: 285.0000 - val_fn: 13.0000 - val_accuracy: 0.8398 - val_precision: 0.5351 - val_recall: 0.8243 - val_auc: 0.8972\n",
            "Epoch 38/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.4756 - tp: 1794.5000 - fp: 487.7500 - tn: 1781.0000 - fn: 544.7500 - accuracy: 0.7759 - precision: 0.7855 - recall: 0.7673 - auc: 0.8554 - val_loss: 0.4397 - val_tp: 61.0000 - val_fp: 54.0000 - val_tn: 284.0000 - val_fn: 13.0000 - val_accuracy: 0.8374 - val_precision: 0.5304 - val_recall: 0.8243 - val_auc: 0.8991\n",
            "Epoch 39/100\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.4853 - tp: 1776.2500 - fp: 540.7500 - tn: 1728.0000 - fn: 563.0000 - accuracy: 0.7589 - precision: 0.7650 - recall: 0.7584 - auc: 0.8489 - val_loss: 0.4361 - val_tp: 61.0000 - val_fp: 54.0000 - val_tn: 284.0000 - val_fn: 13.0000 - val_accuracy: 0.8374 - val_precision: 0.5304 - val_recall: 0.8243 - val_auc: 0.9008\n",
            "Epoch 40/100\n",
            "3/3 [==============================] - 0s 56ms/step - loss: 0.4671 - tp: 1770.5000 - fp: 492.7500 - tn: 1812.0000 - fn: 532.7500 - accuracy: 0.7761 - precision: 0.7820 - recall: 0.7664 - auc: 0.8628 - val_loss: 0.4326 - val_tp: 61.0000 - val_fp: 54.0000 - val_tn: 284.0000 - val_fn: 13.0000 - val_accuracy: 0.8374 - val_precision: 0.5304 - val_recall: 0.8243 - val_auc: 0.9023\n",
            "Epoch 41/100\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.4640 - tp: 1824.2500 - fp: 511.5000 - tn: 1757.0000 - fn: 515.2500 - accuracy: 0.7768 - precision: 0.7811 - recall: 0.7796 - auc: 0.8616 - val_loss: 0.4288 - val_tp: 61.0000 - val_fp: 54.0000 - val_tn: 284.0000 - val_fn: 13.0000 - val_accuracy: 0.8374 - val_precision: 0.5304 - val_recall: 0.8243 - val_auc: 0.9037\n",
            "Epoch 42/100\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.4589 - tp: 1764.2500 - fp: 501.7500 - tn: 1825.5000 - fn: 516.5000 - accuracy: 0.7799 - precision: 0.7787 - recall: 0.7745 - auc: 0.8667 - val_loss: 0.4248 - val_tp: 61.0000 - val_fp: 53.0000 - val_tn: 285.0000 - val_fn: 13.0000 - val_accuracy: 0.8398 - val_precision: 0.5351 - val_recall: 0.8243 - val_auc: 0.9059\n",
            "Epoch 43/100\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.4628 - tp: 1803.7500 - fp: 487.7500 - tn: 1791.2500 - fn: 525.2500 - accuracy: 0.7801 - precision: 0.7878 - recall: 0.7745 - auc: 0.8634 - val_loss: 0.4209 - val_tp: 61.0000 - val_fp: 53.0000 - val_tn: 285.0000 - val_fn: 13.0000 - val_accuracy: 0.8398 - val_precision: 0.5351 - val_recall: 0.8243 - val_auc: 0.9075\n",
            "Epoch 44/100\n",
            "3/3 [==============================] - 0s 154ms/step - loss: 0.4560 - tp: 1795.5000 - fp: 477.0000 - tn: 1834.0000 - fn: 501.5000 - accuracy: 0.7873 - precision: 0.7906 - recall: 0.7804 - auc: 0.8700 - val_loss: 0.4170 - val_tp: 62.0000 - val_fp: 52.0000 - val_tn: 286.0000 - val_fn: 12.0000 - val_accuracy: 0.8447 - val_precision: 0.5439 - val_recall: 0.8378 - val_auc: 0.9092\n",
            "Epoch 45/100\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.4480 - tp: 1793.2500 - fp: 479.0000 - tn: 1818.5000 - fn: 517.2500 - accuracy: 0.7820 - precision: 0.7873 - recall: 0.7761 - auc: 0.8720 - val_loss: 0.4133 - val_tp: 62.0000 - val_fp: 52.0000 - val_tn: 286.0000 - val_fn: 12.0000 - val_accuracy: 0.8447 - val_precision: 0.5439 - val_recall: 0.8378 - val_auc: 0.9109\n",
            "Epoch 46/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.4413 - tp: 1804.0000 - fp: 458.7500 - tn: 1838.7500 - fn: 506.5000 - accuracy: 0.7906 - precision: 0.7987 - recall: 0.7799 - auc: 0.8796 - val_loss: 0.4095 - val_tp: 62.0000 - val_fp: 52.0000 - val_tn: 286.0000 - val_fn: 12.0000 - val_accuracy: 0.8447 - val_precision: 0.5439 - val_recall: 0.8378 - val_auc: 0.9124\n",
            "Epoch 47/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.4411 - tp: 1786.7500 - fp: 445.7500 - tn: 1859.0000 - fn: 516.5000 - accuracy: 0.7906 - precision: 0.8020 - recall: 0.7741 - auc: 0.8786 - val_loss: 0.4060 - val_tp: 62.0000 - val_fp: 51.0000 - val_tn: 287.0000 - val_fn: 12.0000 - val_accuracy: 0.8471 - val_precision: 0.5487 - val_recall: 0.8378 - val_auc: 0.9141\n",
            "Epoch 48/100\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 0.4463 - tp: 1812.5000 - fp: 474.2500 - tn: 1830.0000 - fn: 491.2500 - accuracy: 0.7894 - precision: 0.7929 - recall: 0.7843 - auc: 0.8760 - val_loss: 0.4022 - val_tp: 62.0000 - val_fp: 51.0000 - val_tn: 287.0000 - val_fn: 12.0000 - val_accuracy: 0.8471 - val_precision: 0.5487 - val_recall: 0.8378 - val_auc: 0.9161\n",
            "Epoch 49/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.4325 - tp: 1798.0000 - fp: 468.7500 - tn: 1869.7500 - fn: 471.5000 - accuracy: 0.7943 - precision: 0.7916 - recall: 0.7902 - auc: 0.8836 - val_loss: 0.3984 - val_tp: 63.0000 - val_fp: 51.0000 - val_tn: 287.0000 - val_fn: 11.0000 - val_accuracy: 0.8495 - val_precision: 0.5526 - val_recall: 0.8514 - val_auc: 0.9175\n",
            "Epoch 50/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.4299 - tp: 1825.5000 - fp: 450.7500 - tn: 1837.0000 - fn: 494.7500 - accuracy: 0.7933 - precision: 0.8007 - recall: 0.7845 - auc: 0.8861 - val_loss: 0.3946 - val_tp: 63.0000 - val_fp: 51.0000 - val_tn: 287.0000 - val_fn: 11.0000 - val_accuracy: 0.8495 - val_precision: 0.5526 - val_recall: 0.8514 - val_auc: 0.9191\n",
            "Epoch 51/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.4345 - tp: 1826.5000 - fp: 457.2500 - tn: 1851.5000 - fn: 472.7500 - accuracy: 0.7981 - precision: 0.8001 - recall: 0.7937 - auc: 0.8822 - val_loss: 0.3907 - val_tp: 63.0000 - val_fp: 50.0000 - val_tn: 288.0000 - val_fn: 11.0000 - val_accuracy: 0.8519 - val_precision: 0.5575 - val_recall: 0.8514 - val_auc: 0.9203\n",
            "Epoch 52/100\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 0.4193 - tp: 1850.5000 - fp: 435.5000 - tn: 1880.0000 - fn: 442.0000 - accuracy: 0.8101 - precision: 0.8113 - recall: 0.8060 - auc: 0.8946 - val_loss: 0.3867 - val_tp: 64.0000 - val_fp: 50.0000 - val_tn: 288.0000 - val_fn: 10.0000 - val_accuracy: 0.8544 - val_precision: 0.5614 - val_recall: 0.8649 - val_auc: 0.9222\n",
            "Epoch 53/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.4181 - tp: 1859.0000 - fp: 425.0000 - tn: 1848.0000 - fn: 476.0000 - accuracy: 0.8062 - precision: 0.8167 - recall: 0.7970 - auc: 0.8925 - val_loss: 0.3828 - val_tp: 64.0000 - val_fp: 50.0000 - val_tn: 288.0000 - val_fn: 10.0000 - val_accuracy: 0.8544 - val_precision: 0.5614 - val_recall: 0.8649 - val_auc: 0.9233\n",
            "Epoch 54/100\n",
            "3/3 [==============================] - 0s 51ms/step - loss: 0.4144 - tp: 1841.7500 - fp: 431.2500 - tn: 1877.5000 - fn: 457.5000 - accuracy: 0.8075 - precision: 0.8110 - recall: 0.8018 - auc: 0.8963 - val_loss: 0.3790 - val_tp: 64.0000 - val_fp: 50.0000 - val_tn: 288.0000 - val_fn: 10.0000 - val_accuracy: 0.8544 - val_precision: 0.5614 - val_recall: 0.8649 - val_auc: 0.9250\n",
            "Epoch 55/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.4113 - tp: 1840.7500 - fp: 438.2500 - tn: 1868.2500 - fn: 460.7500 - accuracy: 0.8057 - precision: 0.8091 - recall: 0.8010 - auc: 0.8968 - val_loss: 0.3751 - val_tp: 64.0000 - val_fp: 50.0000 - val_tn: 288.0000 - val_fn: 10.0000 - val_accuracy: 0.8544 - val_precision: 0.5614 - val_recall: 0.8649 - val_auc: 0.9265\n",
            "Epoch 56/100\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.4011 - tp: 1838.5000 - fp: 423.5000 - tn: 1900.5000 - fn: 445.5000 - accuracy: 0.8119 - precision: 0.8127 - recall: 0.8046 - auc: 0.9023 - val_loss: 0.3713 - val_tp: 64.0000 - val_fp: 49.0000 - val_tn: 289.0000 - val_fn: 10.0000 - val_accuracy: 0.8568 - val_precision: 0.5664 - val_recall: 0.8649 - val_auc: 0.9278\n",
            "Epoch 57/100\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.4078 - tp: 1827.2500 - fp: 422.2500 - tn: 1906.7500 - fn: 451.7500 - accuracy: 0.8095 - precision: 0.8119 - recall: 0.8010 - auc: 0.8986 - val_loss: 0.3676 - val_tp: 64.0000 - val_fp: 48.0000 - val_tn: 290.0000 - val_fn: 10.0000 - val_accuracy: 0.8592 - val_precision: 0.5714 - val_recall: 0.8649 - val_auc: 0.9294\n",
            "Epoch 58/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.4056 - tp: 1848.7500 - fp: 404.0000 - tn: 1908.5000 - fn: 446.7500 - accuracy: 0.8142 - precision: 0.8197 - recall: 0.8045 - auc: 0.9000 - val_loss: 0.3640 - val_tp: 64.0000 - val_fp: 48.0000 - val_tn: 290.0000 - val_fn: 10.0000 - val_accuracy: 0.8592 - val_precision: 0.5714 - val_recall: 0.8649 - val_auc: 0.9310\n",
            "Epoch 59/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.4013 - tp: 1799.5000 - fp: 416.2500 - tn: 1948.7500 - fn: 443.5000 - accuracy: 0.8135 - precision: 0.8115 - recall: 0.8022 - auc: 0.9033 - val_loss: 0.3605 - val_tp: 64.0000 - val_fp: 47.0000 - val_tn: 291.0000 - val_fn: 10.0000 - val_accuracy: 0.8617 - val_precision: 0.5766 - val_recall: 0.8649 - val_auc: 0.9325\n",
            "Epoch 60/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.3817 - tp: 1946.0000 - fp: 346.2500 - tn: 1878.0000 - fn: 437.7500 - accuracy: 0.8310 - precision: 0.8531 - recall: 0.8161 - auc: 0.9145 - val_loss: 0.3573 - val_tp: 65.0000 - val_fp: 47.0000 - val_tn: 291.0000 - val_fn: 9.0000 - val_accuracy: 0.8641 - val_precision: 0.5804 - val_recall: 0.8784 - val_auc: 0.9338\n",
            "Epoch 61/100\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.3918 - tp: 1884.0000 - fp: 384.7500 - tn: 1904.2500 - fn: 435.0000 - accuracy: 0.8222 - precision: 0.8297 - recall: 0.8117 - auc: 0.9082 - val_loss: 0.3542 - val_tp: 65.0000 - val_fp: 48.0000 - val_tn: 290.0000 - val_fn: 9.0000 - val_accuracy: 0.8617 - val_precision: 0.5752 - val_recall: 0.8784 - val_auc: 0.9353\n",
            "Epoch 62/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.3910 - tp: 1935.5000 - fp: 397.7500 - tn: 1866.2500 - fn: 408.5000 - accuracy: 0.8256 - precision: 0.8297 - recall: 0.8263 - auc: 0.9099 - val_loss: 0.3512 - val_tp: 65.0000 - val_fp: 48.0000 - val_tn: 290.0000 - val_fn: 9.0000 - val_accuracy: 0.8617 - val_precision: 0.5752 - val_recall: 0.8784 - val_auc: 0.9365\n",
            "Epoch 63/100\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.3816 - tp: 1894.0000 - fp: 368.2500 - tn: 1951.7500 - fn: 394.0000 - accuracy: 0.8360 - precision: 0.8377 - recall: 0.8296 - auc: 0.9148 - val_loss: 0.3481 - val_tp: 65.0000 - val_fp: 48.0000 - val_tn: 290.0000 - val_fn: 9.0000 - val_accuracy: 0.8617 - val_precision: 0.5752 - val_recall: 0.8784 - val_auc: 0.9379\n",
            "Epoch 64/100\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.3843 - tp: 1891.7500 - fp: 371.5000 - tn: 1920.7500 - fn: 424.0000 - accuracy: 0.8269 - precision: 0.8339 - recall: 0.8179 - auc: 0.9128 - val_loss: 0.3449 - val_tp: 66.0000 - val_fp: 48.0000 - val_tn: 290.0000 - val_fn: 8.0000 - val_accuracy: 0.8641 - val_precision: 0.5789 - val_recall: 0.8919 - val_auc: 0.9387\n",
            "Epoch 65/100\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.3784 - tp: 1889.0000 - fp: 363.5000 - tn: 1952.5000 - fn: 403.0000 - accuracy: 0.8334 - precision: 0.8381 - recall: 0.8230 - auc: 0.9154 - val_loss: 0.3418 - val_tp: 66.0000 - val_fp: 47.0000 - val_tn: 291.0000 - val_fn: 8.0000 - val_accuracy: 0.8665 - val_precision: 0.5841 - val_recall: 0.8919 - val_auc: 0.9403\n",
            "Epoch 66/100\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 0.3730 - tp: 1930.2500 - fp: 372.0000 - tn: 1925.5000 - fn: 380.2500 - accuracy: 0.8380 - precision: 0.8382 - recall: 0.8375 - auc: 0.9198 - val_loss: 0.3387 - val_tp: 66.0000 - val_fp: 46.0000 - val_tn: 292.0000 - val_fn: 8.0000 - val_accuracy: 0.8689 - val_precision: 0.5893 - val_recall: 0.8919 - val_auc: 0.9415\n",
            "Epoch 67/100\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.3701 - tp: 1963.7500 - fp: 388.7500 - tn: 1862.5000 - fn: 393.0000 - accuracy: 0.8299 - precision: 0.8337 - recall: 0.8347 - auc: 0.9193 - val_loss: 0.3357 - val_tp: 66.0000 - val_fp: 46.0000 - val_tn: 292.0000 - val_fn: 8.0000 - val_accuracy: 0.8689 - val_precision: 0.5893 - val_recall: 0.8919 - val_auc: 0.9434\n",
            "Epoch 68/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.3628 - tp: 1933.0000 - fp: 350.5000 - tn: 1954.0000 - fn: 370.5000 - accuracy: 0.8435 - precision: 0.8476 - recall: 0.8392 - auc: 0.9235 - val_loss: 0.3328 - val_tp: 67.0000 - val_fp: 45.0000 - val_tn: 293.0000 - val_fn: 7.0000 - val_accuracy: 0.8738 - val_precision: 0.5982 - val_recall: 0.9054 - val_auc: 0.9447\n",
            "Epoch 69/100\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.3617 - tp: 1954.2500 - fp: 347.7500 - tn: 1918.2500 - fn: 387.7500 - accuracy: 0.8405 - precision: 0.8484 - recall: 0.8355 - auc: 0.9251 - val_loss: 0.3299 - val_tp: 67.0000 - val_fp: 45.0000 - val_tn: 293.0000 - val_fn: 7.0000 - val_accuracy: 0.8738 - val_precision: 0.5982 - val_recall: 0.9054 - val_auc: 0.9460\n",
            "Epoch 70/100\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.3596 - tp: 1943.2500 - fp: 353.5000 - tn: 1937.5000 - fn: 373.7500 - accuracy: 0.8425 - precision: 0.8454 - recall: 0.8391 - auc: 0.9254 - val_loss: 0.3269 - val_tp: 67.0000 - val_fp: 42.0000 - val_tn: 296.0000 - val_fn: 7.0000 - val_accuracy: 0.8811 - val_precision: 0.6147 - val_recall: 0.9054 - val_auc: 0.9467\n",
            "Epoch 71/100\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.3535 - tp: 1952.0000 - fp: 351.2500 - tn: 1951.0000 - fn: 353.7500 - accuracy: 0.8465 - precision: 0.8482 - recall: 0.8459 - auc: 0.9291 - val_loss: 0.3239 - val_tp: 67.0000 - val_fp: 40.0000 - val_tn: 298.0000 - val_fn: 7.0000 - val_accuracy: 0.8859 - val_precision: 0.6262 - val_recall: 0.9054 - val_auc: 0.9479\n",
            "Epoch 72/100\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.3594 - tp: 1898.0000 - fp: 357.0000 - tn: 1983.7500 - fn: 369.2500 - accuracy: 0.8424 - precision: 0.8411 - recall: 0.8384 - auc: 0.9266 - val_loss: 0.3205 - val_tp: 67.0000 - val_fp: 40.0000 - val_tn: 298.0000 - val_fn: 7.0000 - val_accuracy: 0.8859 - val_precision: 0.6262 - val_recall: 0.9054 - val_auc: 0.9492\n",
            "Epoch 73/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.3571 - tp: 1932.5000 - fp: 344.7500 - tn: 1959.7500 - fn: 371.0000 - accuracy: 0.8437 - precision: 0.8482 - recall: 0.8366 - auc: 0.9268 - val_loss: 0.3170 - val_tp: 67.0000 - val_fp: 39.0000 - val_tn: 299.0000 - val_fn: 7.0000 - val_accuracy: 0.8883 - val_precision: 0.6321 - val_recall: 0.9054 - val_auc: 0.9503\n",
            "Epoch 74/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.3440 - tp: 1943.7500 - fp: 316.5000 - tn: 2006.2500 - fn: 341.5000 - accuracy: 0.8588 - precision: 0.8605 - recall: 0.8529 - auc: 0.9346 - val_loss: 0.3136 - val_tp: 67.0000 - val_fp: 38.0000 - val_tn: 300.0000 - val_fn: 7.0000 - val_accuracy: 0.8908 - val_precision: 0.6381 - val_recall: 0.9054 - val_auc: 0.9518\n",
            "Epoch 75/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.3449 - tp: 1937.0000 - fp: 339.5000 - tn: 1972.0000 - fn: 359.5000 - accuracy: 0.8485 - precision: 0.8516 - recall: 0.8427 - auc: 0.9331 - val_loss: 0.3104 - val_tp: 67.0000 - val_fp: 38.0000 - val_tn: 300.0000 - val_fn: 7.0000 - val_accuracy: 0.8908 - val_precision: 0.6381 - val_recall: 0.9054 - val_auc: 0.9527\n",
            "Epoch 76/100\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.3366 - tp: 1953.2500 - fp: 340.5000 - tn: 2010.2500 - fn: 304.0000 - accuracy: 0.8604 - precision: 0.8504 - recall: 0.8669 - auc: 0.9388 - val_loss: 0.3070 - val_tp: 67.0000 - val_fp: 38.0000 - val_tn: 300.0000 - val_fn: 7.0000 - val_accuracy: 0.8908 - val_precision: 0.6381 - val_recall: 0.9054 - val_auc: 0.9542\n",
            "Epoch 77/100\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 0.3348 - tp: 1955.2500 - fp: 321.7500 - tn: 1999.0000 - fn: 332.0000 - accuracy: 0.8587 - precision: 0.8576 - recall: 0.8579 - auc: 0.9387 - val_loss: 0.3036 - val_tp: 67.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 7.0000 - val_accuracy: 0.8956 - val_precision: 0.6505 - val_recall: 0.9054 - val_auc: 0.9554\n",
            "Epoch 78/100\n",
            "3/3 [==============================] - 0s 143ms/step - loss: 0.3287 - tp: 2016.5000 - fp: 331.5000 - tn: 1944.7500 - fn: 315.2500 - accuracy: 0.8596 - precision: 0.8588 - recall: 0.8648 - auc: 0.9413 - val_loss: 0.3004 - val_tp: 67.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 7.0000 - val_accuracy: 0.8956 - val_precision: 0.6505 - val_recall: 0.9054 - val_auc: 0.9568\n",
            "Epoch 79/100\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.3255 - tp: 2011.2500 - fp: 289.2500 - tn: 1977.5000 - fn: 330.0000 - accuracy: 0.8650 - precision: 0.8742 - recall: 0.8565 - auc: 0.9430 - val_loss: 0.2975 - val_tp: 67.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 7.0000 - val_accuracy: 0.8956 - val_precision: 0.6505 - val_recall: 0.9054 - val_auc: 0.9579\n",
            "Epoch 80/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.3303 - tp: 2052.0000 - fp: 308.5000 - tn: 1915.7500 - fn: 331.7500 - accuracy: 0.8608 - precision: 0.8700 - recall: 0.8597 - auc: 0.9400 - val_loss: 0.2949 - val_tp: 67.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 7.0000 - val_accuracy: 0.8956 - val_precision: 0.6505 - val_recall: 0.9054 - val_auc: 0.9587\n",
            "Epoch 81/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.3183 - tp: 2013.7500 - fp: 316.7500 - tn: 1993.0000 - fn: 284.5000 - accuracy: 0.8700 - precision: 0.8640 - recall: 0.8768 - auc: 0.9460 - val_loss: 0.2921 - val_tp: 67.0000 - val_fp: 36.0000 - val_tn: 302.0000 - val_fn: 7.0000 - val_accuracy: 0.8956 - val_precision: 0.6505 - val_recall: 0.9054 - val_auc: 0.9595\n",
            "Epoch 82/100\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.3194 - tp: 2016.0000 - fp: 321.7500 - tn: 1965.7500 - fn: 304.5000 - accuracy: 0.8639 - precision: 0.8629 - recall: 0.8669 - auc: 0.9446 - val_loss: 0.2893 - val_tp: 67.0000 - val_fp: 35.0000 - val_tn: 303.0000 - val_fn: 7.0000 - val_accuracy: 0.8981 - val_precision: 0.6569 - val_recall: 0.9054 - val_auc: 0.9608\n",
            "Epoch 83/100\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.3123 - tp: 2031.7500 - fp: 309.7500 - tn: 1997.2500 - fn: 269.2500 - accuracy: 0.8753 - precision: 0.8687 - recall: 0.8843 - auc: 0.9487 - val_loss: 0.2863 - val_tp: 67.0000 - val_fp: 35.0000 - val_tn: 303.0000 - val_fn: 7.0000 - val_accuracy: 0.8981 - val_precision: 0.6569 - val_recall: 0.9054 - val_auc: 0.9616\n",
            "Epoch 84/100\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.3120 - tp: 2063.0000 - fp: 292.0000 - tn: 1953.5000 - fn: 299.5000 - accuracy: 0.8728 - precision: 0.8767 - recall: 0.8754 - auc: 0.9480 - val_loss: 0.2834 - val_tp: 67.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 7.0000 - val_accuracy: 0.9005 - val_precision: 0.6634 - val_recall: 0.9054 - val_auc: 0.9627\n",
            "Epoch 85/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.3132 - tp: 2055.0000 - fp: 299.5000 - tn: 1944.5000 - fn: 309.0000 - accuracy: 0.8674 - precision: 0.8727 - recall: 0.8692 - auc: 0.9474 - val_loss: 0.2807 - val_tp: 67.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 7.0000 - val_accuracy: 0.9005 - val_precision: 0.6634 - val_recall: 0.9054 - val_auc: 0.9632\n",
            "Epoch 86/100\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.3083 - tp: 1971.0000 - fp: 302.7500 - tn: 2049.7500 - fn: 284.5000 - accuracy: 0.8720 - precision: 0.8669 - recall: 0.8732 - auc: 0.9497 - val_loss: 0.2779 - val_tp: 68.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 6.0000 - val_accuracy: 0.9029 - val_precision: 0.6667 - val_recall: 0.9189 - val_auc: 0.9642\n",
            "Epoch 87/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.3015 - tp: 2075.2500 - fp: 242.0000 - tn: 1994.5000 - fn: 296.2500 - accuracy: 0.8837 - precision: 0.8972 - recall: 0.8747 - auc: 0.9537 - val_loss: 0.2752 - val_tp: 68.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 6.0000 - val_accuracy: 0.9029 - val_precision: 0.6667 - val_recall: 0.9189 - val_auc: 0.9648\n",
            "Epoch 88/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.3018 - tp: 1999.0000 - fp: 299.0000 - tn: 2048.0000 - fn: 262.0000 - accuracy: 0.8778 - precision: 0.8679 - recall: 0.8845 - auc: 0.9524 - val_loss: 0.2723 - val_tp: 68.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 6.0000 - val_accuracy: 0.9053 - val_precision: 0.6733 - val_recall: 0.9189 - val_auc: 0.9658\n",
            "Epoch 89/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.2989 - tp: 2003.0000 - fp: 294.0000 - tn: 2033.0000 - fn: 278.0000 - accuracy: 0.8750 - precision: 0.8722 - recall: 0.8767 - auc: 0.9531 - val_loss: 0.2694 - val_tp: 68.0000 - val_fp: 33.0000 - val_tn: 305.0000 - val_fn: 6.0000 - val_accuracy: 0.9053 - val_precision: 0.6733 - val_recall: 0.9189 - val_auc: 0.9667\n",
            "Epoch 90/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2986 - tp: 2019.5000 - fp: 273.7500 - tn: 2034.7500 - fn: 280.0000 - accuracy: 0.8809 - precision: 0.8810 - recall: 0.8800 - auc: 0.9532 - val_loss: 0.2663 - val_tp: 68.0000 - val_fp: 32.0000 - val_tn: 306.0000 - val_fn: 6.0000 - val_accuracy: 0.9078 - val_precision: 0.6800 - val_recall: 0.9189 - val_auc: 0.9673\n",
            "Epoch 91/100\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2836 - tp: 2028.2500 - fp: 255.7500 - tn: 2064.7500 - fn: 259.2500 - accuracy: 0.8892 - precision: 0.8893 - recall: 0.8879 - auc: 0.9607 - val_loss: 0.2635 - val_tp: 68.0000 - val_fp: 32.0000 - val_tn: 306.0000 - val_fn: 6.0000 - val_accuracy: 0.9078 - val_precision: 0.6800 - val_recall: 0.9189 - val_auc: 0.9680\n",
            "Epoch 92/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.2786 - tp: 2015.0000 - fp: 254.5000 - tn: 2082.7500 - fn: 255.7500 - accuracy: 0.8902 - precision: 0.8891 - recall: 0.8886 - auc: 0.9619 - val_loss: 0.2607 - val_tp: 68.0000 - val_fp: 31.0000 - val_tn: 307.0000 - val_fn: 6.0000 - val_accuracy: 0.9102 - val_precision: 0.6869 - val_recall: 0.9189 - val_auc: 0.9688\n",
            "Epoch 93/100\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.2985 - tp: 2037.5000 - fp: 270.0000 - tn: 2008.7500 - fn: 291.7500 - accuracy: 0.8762 - precision: 0.8807 - recall: 0.8726 - auc: 0.9531 - val_loss: 0.2578 - val_tp: 68.0000 - val_fp: 29.0000 - val_tn: 309.0000 - val_fn: 6.0000 - val_accuracy: 0.9150 - val_precision: 0.7010 - val_recall: 0.9189 - val_auc: 0.9696\n",
            "Epoch 94/100\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.2859 - tp: 2097.5000 - fp: 253.0000 - tn: 1969.2500 - fn: 288.2500 - accuracy: 0.8822 - precision: 0.8926 - recall: 0.8783 - auc: 0.9578 - val_loss: 0.2553 - val_tp: 68.0000 - val_fp: 29.0000 - val_tn: 309.0000 - val_fn: 6.0000 - val_accuracy: 0.9150 - val_precision: 0.7010 - val_recall: 0.9189 - val_auc: 0.9703\n",
            "Epoch 95/100\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.2781 - tp: 2007.7500 - fp: 254.2500 - tn: 2086.7500 - fn: 259.2500 - accuracy: 0.8890 - precision: 0.8885 - recall: 0.8854 - auc: 0.9619 - val_loss: 0.2527 - val_tp: 68.0000 - val_fp: 29.0000 - val_tn: 309.0000 - val_fn: 6.0000 - val_accuracy: 0.9150 - val_precision: 0.7010 - val_recall: 0.9189 - val_auc: 0.9710\n",
            "Epoch 96/100\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.2771 - tp: 2042.0000 - fp: 257.2500 - tn: 2046.5000 - fn: 262.2500 - accuracy: 0.8869 - precision: 0.8874 - recall: 0.8862 - auc: 0.9618 - val_loss: 0.2501 - val_tp: 68.0000 - val_fp: 28.0000 - val_tn: 310.0000 - val_fn: 6.0000 - val_accuracy: 0.9175 - val_precision: 0.7083 - val_recall: 0.9189 - val_auc: 0.9719\n",
            "Epoch 97/100\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.2831 - tp: 2046.7500 - fp: 265.7500 - tn: 2023.2500 - fn: 272.2500 - accuracy: 0.8836 - precision: 0.8855 - recall: 0.8825 - auc: 0.9591 - val_loss: 0.2474 - val_tp: 68.0000 - val_fp: 27.0000 - val_tn: 311.0000 - val_fn: 6.0000 - val_accuracy: 0.9199 - val_precision: 0.7158 - val_recall: 0.9189 - val_auc: 0.9727\n",
            "Epoch 98/100\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.2676 - tp: 2057.2500 - fp: 243.5000 - tn: 2057.7500 - fn: 249.5000 - accuracy: 0.8923 - precision: 0.8946 - recall: 0.8909 - auc: 0.9641 - val_loss: 0.2447 - val_tp: 68.0000 - val_fp: 27.0000 - val_tn: 311.0000 - val_fn: 6.0000 - val_accuracy: 0.9199 - val_precision: 0.7158 - val_recall: 0.9189 - val_auc: 0.9736\n",
            "Epoch 99/100\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.2704 - tp: 2093.0000 - fp: 234.7500 - tn: 2045.2500 - fn: 235.0000 - accuracy: 0.8972 - precision: 0.8972 - recall: 0.8989 - auc: 0.9648 - val_loss: 0.2421 - val_tp: 68.0000 - val_fp: 26.0000 - val_tn: 312.0000 - val_fn: 6.0000 - val_accuracy: 0.9223 - val_precision: 0.7234 - val_recall: 0.9189 - val_auc: 0.9741\n",
            "Epoch 100/100\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.2661 - tp: 2036.0000 - fp: 237.5000 - tn: 2120.2500 - fn: 214.2500 - accuracy: 0.9020 - precision: 0.8966 - recall: 0.9040 - auc: 0.9662 - val_loss: 0.2394 - val_tp: 68.0000 - val_fp: 25.0000 - val_tn: 313.0000 - val_fn: 6.0000 - val_accuracy: 0.9248 - val_precision: 0.7312 - val_recall: 0.9189 - val_auc: 0.9744\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 609
        },
        "id": "Cv22FftO85V5",
        "outputId": "2f29fb19-f959-4661-8561-674a1a550494"
      },
      "source": [
        "plot_metrics(resampled_history)"
      ],
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sPRm9b2489LX",
        "outputId": "00f12f0e-4bdc-4d8b-d350-a25f831f8add"
      },
      "source": [
        "resampled_model = make_model()\r\n",
        "resampled_model.load_weights(initial_weights)\r\n",
        "\r\n",
        "# Reset the bias to zero, since this dataset is balanced.\r\n",
        "output_layer = resampled_model.layers[-1] \r\n",
        "output_layer.bias.assign([0])\r\n",
        "\r\n",
        "resampled_history = resampled_model.fit(\r\n",
        "    resampled_ds,\r\n",
        "    # These are not real epochs\r\n",
        "    steps_per_epoch=20,\r\n",
        "    epochs=10*EPOCHS,\r\n",
        "    callbacks=[early_stopping],\r\n",
        "    validation_data=(val_ds))"
      ],
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/1000\n",
            "20/20 [==============================] - 3s 76ms/step - loss: 0.8773 - tp: 6084.0952 - fp: 5318.3333 - tn: 6148.0476 - fn: 5292.0000 - accuracy: 0.5326 - precision: 0.5262 - recall: 0.5233 - auc: 0.5407 - val_loss: 0.6686 - val_tp: 53.0000 - val_fp: 133.0000 - val_tn: 205.0000 - val_fn: 21.0000 - val_accuracy: 0.6262 - val_precision: 0.2849 - val_recall: 0.7162 - val_auc: 0.7025\n",
            "Epoch 2/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.7158 - tp: 7173.4762 - fp: 4639.3333 - tn: 6552.4762 - fn: 4065.1905 - accuracy: 0.6087 - precision: 0.6053 - recall: 0.6358 - auc: 0.6506 - val_loss: 0.5889 - val_tp: 58.0000 - val_fp: 96.0000 - val_tn: 242.0000 - val_fn: 16.0000 - val_accuracy: 0.7282 - val_precision: 0.3766 - val_recall: 0.7838 - val_auc: 0.8099\n",
            "Epoch 3/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.6292 - tp: 7582.2857 - fp: 3987.0000 - tn: 7303.0000 - fn: 3558.1905 - accuracy: 0.6590 - precision: 0.6482 - recall: 0.6785 - auc: 0.7285 - val_loss: 0.5315 - val_tp: 59.0000 - val_fp: 76.0000 - val_tn: 262.0000 - val_fn: 15.0000 - val_accuracy: 0.7791 - val_precision: 0.4370 - val_recall: 0.7973 - val_auc: 0.8507\n",
            "Epoch 4/1000\n",
            "20/20 [==============================] - 1s 26ms/step - loss: 0.5713 - tp: 8019.0476 - fp: 3364.2857 - tn: 7819.2381 - fn: 3227.9048 - accuracy: 0.7035 - precision: 0.7008 - recall: 0.7116 - auc: 0.7812 - val_loss: 0.4925 - val_tp: 60.0000 - val_fp: 66.0000 - val_tn: 272.0000 - val_fn: 14.0000 - val_accuracy: 0.8058 - val_precision: 0.4762 - val_recall: 0.8108 - val_auc: 0.8745\n",
            "Epoch 5/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.5225 - tp: 8410.5238 - fp: 2895.8571 - tn: 8223.1429 - fn: 2900.9524 - accuracy: 0.7409 - precision: 0.7426 - recall: 0.7434 - auc: 0.8218 - val_loss: 0.4611 - val_tp: 61.0000 - val_fp: 58.0000 - val_tn: 280.0000 - val_fn: 13.0000 - val_accuracy: 0.8277 - val_precision: 0.5126 - val_recall: 0.8243 - val_auc: 0.8901\n",
            "Epoch 6/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.4896 - tp: 8619.8571 - fp: 2674.3333 - tn: 8487.3333 - fn: 2648.9524 - accuracy: 0.7615 - precision: 0.7634 - recall: 0.7636 - auc: 0.8463 - val_loss: 0.4322 - val_tp: 61.0000 - val_fp: 53.0000 - val_tn: 285.0000 - val_fn: 13.0000 - val_accuracy: 0.8398 - val_precision: 0.5351 - val_recall: 0.8243 - val_auc: 0.9021\n",
            "Epoch 7/1000\n",
            "20/20 [==============================] - 0s 25ms/step - loss: 0.4624 - tp: 8650.8095 - fp: 2415.5714 - tn: 8840.3810 - fn: 2523.7143 - accuracy: 0.7770 - precision: 0.7791 - recall: 0.7707 - auc: 0.8651 - val_loss: 0.4048 - val_tp: 61.0000 - val_fp: 51.0000 - val_tn: 287.0000 - val_fn: 13.0000 - val_accuracy: 0.8447 - val_precision: 0.5446 - val_recall: 0.8243 - val_auc: 0.9132\n",
            "Epoch 8/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.4310 - tp: 8831.9048 - fp: 2157.7619 - tn: 9092.1429 - fn: 2348.6667 - accuracy: 0.7993 - precision: 0.8054 - recall: 0.7887 - auc: 0.8853 - val_loss: 0.3800 - val_tp: 64.0000 - val_fp: 50.0000 - val_tn: 288.0000 - val_fn: 10.0000 - val_accuracy: 0.8544 - val_precision: 0.5614 - val_recall: 0.8649 - val_auc: 0.9236\n",
            "Epoch 9/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.4063 - tp: 9023.3333 - fp: 2005.1429 - tn: 9260.4762 - fn: 2141.5238 - accuracy: 0.8138 - precision: 0.8162 - recall: 0.8068 - auc: 0.9005 - val_loss: 0.3575 - val_tp: 64.0000 - val_fp: 48.0000 - val_tn: 290.0000 - val_fn: 10.0000 - val_accuracy: 0.8592 - val_precision: 0.5714 - val_recall: 0.8649 - val_auc: 0.9328\n",
            "Epoch 10/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.3799 - tp: 9198.0952 - fp: 1841.5238 - tn: 9388.4762 - fn: 2002.3810 - accuracy: 0.8279 - precision: 0.8326 - recall: 0.8204 - auc: 0.9148 - val_loss: 0.3365 - val_tp: 66.0000 - val_fp: 45.0000 - val_tn: 293.0000 - val_fn: 8.0000 - val_accuracy: 0.8714 - val_precision: 0.5946 - val_recall: 0.8919 - val_auc: 0.9416\n",
            "Epoch 11/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.3590 - tp: 9488.9524 - fp: 1738.0000 - tn: 9428.1429 - fn: 1775.3810 - accuracy: 0.8430 - precision: 0.8447 - recall: 0.8425 - auc: 0.9264 - val_loss: 0.3160 - val_tp: 67.0000 - val_fp: 40.0000 - val_tn: 298.0000 - val_fn: 7.0000 - val_accuracy: 0.8859 - val_precision: 0.6262 - val_recall: 0.9054 - val_auc: 0.9500\n",
            "Epoch 12/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.3400 - tp: 9605.9048 - fp: 1589.4286 - tn: 9588.7143 - fn: 1646.4286 - accuracy: 0.8554 - precision: 0.8581 - recall: 0.8532 - auc: 0.9363 - val_loss: 0.2956 - val_tp: 67.0000 - val_fp: 37.0000 - val_tn: 301.0000 - val_fn: 7.0000 - val_accuracy: 0.8932 - val_precision: 0.6442 - val_recall: 0.9054 - val_auc: 0.9585\n",
            "Epoch 13/1000\n",
            "20/20 [==============================] - 1s 27ms/step - loss: 0.3154 - tp: 9767.0000 - fp: 1472.3810 - tn: 9769.7143 - fn: 1421.3810 - accuracy: 0.8710 - precision: 0.8683 - recall: 0.8733 - auc: 0.9469 - val_loss: 0.2755 - val_tp: 68.0000 - val_fp: 34.0000 - val_tn: 304.0000 - val_fn: 6.0000 - val_accuracy: 0.9029 - val_precision: 0.6667 - val_recall: 0.9189 - val_auc: 0.9648\n",
            "Epoch 14/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.2986 - tp: 9975.0000 - fp: 1318.4286 - tn: 9807.9524 - fn: 1329.0952 - accuracy: 0.8809 - precision: 0.8818 - recall: 0.8819 - auc: 0.9540 - val_loss: 0.2578 - val_tp: 68.0000 - val_fp: 28.0000 - val_tn: 310.0000 - val_fn: 6.0000 - val_accuracy: 0.9175 - val_precision: 0.7083 - val_recall: 0.9189 - val_auc: 0.9701\n",
            "Epoch 15/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.2811 - tp: 9975.7619 - fp: 1251.2857 - tn: 9972.1905 - fn: 1231.2381 - accuracy: 0.8887 - precision: 0.8873 - recall: 0.8897 - auc: 0.9601 - val_loss: 0.2400 - val_tp: 68.0000 - val_fp: 26.0000 - val_tn: 312.0000 - val_fn: 6.0000 - val_accuracy: 0.9223 - val_precision: 0.7234 - val_recall: 0.9189 - val_auc: 0.9747\n",
            "Epoch 16/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.2624 - tp: 10177.4286 - fp: 1162.5714 - tn: 9986.1905 - fn: 1104.2857 - accuracy: 0.8980 - precision: 0.8968 - recall: 0.9012 - auc: 0.9665 - val_loss: 0.2238 - val_tp: 69.0000 - val_fp: 22.0000 - val_tn: 316.0000 - val_fn: 5.0000 - val_accuracy: 0.9345 - val_precision: 0.7582 - val_recall: 0.9324 - val_auc: 0.9781\n",
            "Epoch 17/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.2495 - tp: 10087.8571 - fp: 1029.4762 - tn: 10252.9524 - fn: 1060.1905 - accuracy: 0.9064 - precision: 0.9059 - recall: 0.9050 - auc: 0.9705 - val_loss: 0.2089 - val_tp: 69.0000 - val_fp: 20.0000 - val_tn: 318.0000 - val_fn: 5.0000 - val_accuracy: 0.9393 - val_precision: 0.7753 - val_recall: 0.9324 - val_auc: 0.9808\n",
            "Epoch 18/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.2331 - tp: 10297.2381 - fp: 964.6190 - tn: 10224.0952 - fn: 944.5238 - accuracy: 0.9141 - precision: 0.9149 - recall: 0.9143 - auc: 0.9746 - val_loss: 0.1947 - val_tp: 69.0000 - val_fp: 17.0000 - val_tn: 321.0000 - val_fn: 5.0000 - val_accuracy: 0.9466 - val_precision: 0.8023 - val_recall: 0.9324 - val_auc: 0.9838\n",
            "Epoch 19/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.2202 - tp: 10305.9524 - fp: 905.4286 - tn: 10338.2857 - fn: 880.8095 - accuracy: 0.9197 - precision: 0.9179 - recall: 0.9208 - auc: 0.9783 - val_loss: 0.1821 - val_tp: 71.0000 - val_fp: 15.0000 - val_tn: 323.0000 - val_fn: 3.0000 - val_accuracy: 0.9563 - val_precision: 0.8256 - val_recall: 0.9595 - val_auc: 0.9862\n",
            "Epoch 20/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.2072 - tp: 10476.9524 - fp: 830.3810 - tn: 10293.7619 - fn: 829.3810 - accuracy: 0.9259 - precision: 0.9269 - recall: 0.9263 - auc: 0.9809 - val_loss: 0.1715 - val_tp: 71.0000 - val_fp: 14.0000 - val_tn: 324.0000 - val_fn: 3.0000 - val_accuracy: 0.9587 - val_precision: 0.8353 - val_recall: 0.9595 - val_auc: 0.9882\n",
            "Epoch 21/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.1998 - tp: 10497.3333 - fp: 793.4762 - tn: 10374.5714 - fn: 765.0952 - accuracy: 0.9300 - precision: 0.9288 - recall: 0.9312 - auc: 0.9821 - val_loss: 0.1615 - val_tp: 71.0000 - val_fp: 13.0000 - val_tn: 325.0000 - val_fn: 3.0000 - val_accuracy: 0.9612 - val_precision: 0.8452 - val_recall: 0.9595 - val_auc: 0.9894\n",
            "Epoch 22/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.1871 - tp: 10555.4762 - fp: 756.0952 - tn: 10427.9524 - fn: 690.9524 - accuracy: 0.9354 - precision: 0.9326 - recall: 0.9393 - auc: 0.9846 - val_loss: 0.1522 - val_tp: 71.0000 - val_fp: 13.0000 - val_tn: 325.0000 - val_fn: 3.0000 - val_accuracy: 0.9612 - val_precision: 0.8452 - val_recall: 0.9595 - val_auc: 0.9910\n",
            "Epoch 23/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.1789 - tp: 10644.5714 - fp: 698.6190 - tn: 10445.6667 - fn: 641.6190 - accuracy: 0.9395 - precision: 0.9376 - recall: 0.9423 - auc: 0.9862 - val_loss: 0.1438 - val_tp: 71.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 3.0000 - val_accuracy: 0.9636 - val_precision: 0.8554 - val_recall: 0.9595 - val_auc: 0.9923\n",
            "Epoch 24/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.1713 - tp: 10621.1905 - fp: 668.8095 - tn: 10506.7619 - fn: 633.7143 - accuracy: 0.9416 - precision: 0.9408 - recall: 0.9428 - auc: 0.9872 - val_loss: 0.1366 - val_tp: 71.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 3.0000 - val_accuracy: 0.9636 - val_precision: 0.8554 - val_recall: 0.9595 - val_auc: 0.9931\n",
            "Epoch 25/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.1608 - tp: 10632.0952 - fp: 651.1429 - tn: 10565.6190 - fn: 581.6190 - accuracy: 0.9449 - precision: 0.9428 - recall: 0.9473 - auc: 0.9887 - val_loss: 0.1301 - val_tp: 71.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 3.0000 - val_accuracy: 0.9636 - val_precision: 0.8554 - val_recall: 0.9595 - val_auc: 0.9939\n",
            "Epoch 26/1000\n",
            "20/20 [==============================] - 1s 27ms/step - loss: 0.1545 - tp: 10698.9048 - fp: 608.3810 - tn: 10592.7143 - fn: 530.4762 - accuracy: 0.9484 - precision: 0.9451 - recall: 0.9523 - auc: 0.9897 - val_loss: 0.1253 - val_tp: 71.0000 - val_fp: 11.0000 - val_tn: 327.0000 - val_fn: 3.0000 - val_accuracy: 0.9660 - val_precision: 0.8659 - val_recall: 0.9595 - val_auc: 0.9941\n",
            "Epoch 27/1000\n",
            "20/20 [==============================] - 1s 27ms/step - loss: 0.1502 - tp: 10737.9524 - fp: 597.8095 - tn: 10584.6190 - fn: 510.0952 - accuracy: 0.9499 - precision: 0.9469 - recall: 0.9535 - auc: 0.9902 - val_loss: 0.1192 - val_tp: 71.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 3.0000 - val_accuracy: 0.9636 - val_precision: 0.8554 - val_recall: 0.9595 - val_auc: 0.9947\n",
            "Epoch 28/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.1430 - tp: 10739.4286 - fp: 564.9524 - tn: 10645.9048 - fn: 480.1905 - accuracy: 0.9522 - precision: 0.9484 - recall: 0.9567 - auc: 0.9911 - val_loss: 0.1145 - val_tp: 71.0000 - val_fp: 12.0000 - val_tn: 326.0000 - val_fn: 3.0000 - val_accuracy: 0.9636 - val_precision: 0.8554 - val_recall: 0.9595 - val_auc: 0.9949\n",
            "Epoch 29/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.1380 - tp: 10863.8571 - fp: 551.7143 - tn: 10588.4762 - fn: 426.4286 - accuracy: 0.9556 - precision: 0.9509 - recall: 0.9613 - auc: 0.9916 - val_loss: 0.1096 - val_tp: 71.0000 - val_fp: 11.0000 - val_tn: 327.0000 - val_fn: 3.0000 - val_accuracy: 0.9660 - val_precision: 0.8659 - val_recall: 0.9595 - val_auc: 0.9951\n",
            "Epoch 30/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.1311 - tp: 10817.3333 - fp: 532.7143 - tn: 10668.1429 - fn: 412.2857 - accuracy: 0.9581 - precision: 0.9527 - recall: 0.9640 - auc: 0.9924 - val_loss: 0.1050 - val_tp: 71.0000 - val_fp: 11.0000 - val_tn: 327.0000 - val_fn: 3.0000 - val_accuracy: 0.9660 - val_precision: 0.8659 - val_recall: 0.9595 - val_auc: 0.9954\n",
            "Epoch 31/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.1253 - tp: 10859.7143 - fp: 482.0000 - tn: 10679.6190 - fn: 409.1429 - accuracy: 0.9601 - precision: 0.9580 - recall: 0.9629 - auc: 0.9931 - val_loss: 0.1016 - val_tp: 71.0000 - val_fp: 11.0000 - val_tn: 327.0000 - val_fn: 3.0000 - val_accuracy: 0.9660 - val_precision: 0.8659 - val_recall: 0.9595 - val_auc: 0.9956\n",
            "Epoch 32/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.1246 - tp: 10791.4762 - fp: 468.4762 - tn: 10784.1429 - fn: 386.3810 - accuracy: 0.9614 - precision: 0.9580 - recall: 0.9649 - auc: 0.9932 - val_loss: 0.0971 - val_tp: 71.0000 - val_fp: 11.0000 - val_tn: 327.0000 - val_fn: 3.0000 - val_accuracy: 0.9660 - val_precision: 0.8659 - val_recall: 0.9595 - val_auc: 0.9961\n",
            "Epoch 33/1000\n",
            "20/20 [==============================] - 1s 34ms/step - loss: 0.1183 - tp: 10847.1905 - fp: 480.5714 - tn: 10745.6667 - fn: 357.0476 - accuracy: 0.9626 - precision: 0.9576 - recall: 0.9683 - auc: 0.9939 - val_loss: 0.0949 - val_tp: 71.0000 - val_fp: 11.0000 - val_tn: 327.0000 - val_fn: 3.0000 - val_accuracy: 0.9660 - val_precision: 0.8659 - val_recall: 0.9595 - val_auc: 0.9962\n",
            "Epoch 34/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.1151 - tp: 10862.2381 - fp: 450.4286 - tn: 10751.1905 - fn: 366.6190 - accuracy: 0.9637 - precision: 0.9606 - recall: 0.9673 - auc: 0.9943 - val_loss: 0.0910 - val_tp: 71.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 3.0000 - val_accuracy: 0.9684 - val_precision: 0.8765 - val_recall: 0.9595 - val_auc: 0.9963\n",
            "Epoch 35/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.1110 - tp: 10873.1429 - fp: 452.3810 - tn: 10775.0476 - fn: 329.9048 - accuracy: 0.9645 - precision: 0.9594 - recall: 0.9696 - auc: 0.9947 - val_loss: 0.0884 - val_tp: 71.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 3.0000 - val_accuracy: 0.9684 - val_precision: 0.8765 - val_recall: 0.9595 - val_auc: 0.9965\n",
            "Epoch 36/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.1068 - tp: 10961.2857 - fp: 416.5238 - tn: 10747.2857 - fn: 305.3810 - accuracy: 0.9679 - precision: 0.9633 - recall: 0.9730 - auc: 0.9950 - val_loss: 0.0860 - val_tp: 71.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 3.0000 - val_accuracy: 0.9684 - val_precision: 0.8765 - val_recall: 0.9595 - val_auc: 0.9966\n",
            "Epoch 37/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.1026 - tp: 10944.0000 - fp: 420.6667 - tn: 10762.9048 - fn: 302.9048 - accuracy: 0.9675 - precision: 0.9627 - recall: 0.9727 - auc: 0.9957 - val_loss: 0.0835 - val_tp: 71.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 3.0000 - val_accuracy: 0.9684 - val_precision: 0.8765 - val_recall: 0.9595 - val_auc: 0.9966\n",
            "Epoch 38/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0996 - tp: 10996.8571 - fp: 390.1429 - tn: 10761.0476 - fn: 282.4286 - accuracy: 0.9699 - precision: 0.9659 - recall: 0.9746 - auc: 0.9957 - val_loss: 0.0809 - val_tp: 72.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 2.0000 - val_accuracy: 0.9709 - val_precision: 0.8780 - val_recall: 0.9730 - val_auc: 0.9968\n",
            "Epoch 39/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0957 - tp: 10936.2857 - fp: 357.9048 - tn: 10856.3333 - fn: 279.9524 - accuracy: 0.9713 - precision: 0.9681 - recall: 0.9748 - auc: 0.9963 - val_loss: 0.0790 - val_tp: 72.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 2.0000 - val_accuracy: 0.9709 - val_precision: 0.8780 - val_recall: 0.9730 - val_auc: 0.9969\n",
            "Epoch 40/1000\n",
            "20/20 [==============================] - 1s 28ms/step - loss: 0.0945 - tp: 10852.8095 - fp: 390.9524 - tn: 10928.0952 - fn: 258.6190 - accuracy: 0.9701 - precision: 0.9644 - recall: 0.9757 - auc: 0.9963 - val_loss: 0.0764 - val_tp: 72.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 2.0000 - val_accuracy: 0.9709 - val_precision: 0.8780 - val_recall: 0.9730 - val_auc: 0.9971\n",
            "Epoch 41/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.0885 - tp: 11046.1429 - fp: 345.8095 - tn: 10828.0952 - fn: 210.4286 - accuracy: 0.9756 - precision: 0.9697 - recall: 0.9820 - auc: 0.9967 - val_loss: 0.0745 - val_tp: 72.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 2.0000 - val_accuracy: 0.9709 - val_precision: 0.8780 - val_recall: 0.9730 - val_auc: 0.9974\n",
            "Epoch 42/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0873 - tp: 10993.5238 - fp: 348.5238 - tn: 10849.0476 - fn: 239.3810 - accuracy: 0.9740 - precision: 0.9696 - recall: 0.9787 - auc: 0.9968 - val_loss: 0.0729 - val_tp: 72.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 2.0000 - val_accuracy: 0.9709 - val_precision: 0.8780 - val_recall: 0.9730 - val_auc: 0.9973\n",
            "Epoch 43/1000\n",
            "20/20 [==============================] - 1s 26ms/step - loss: 0.0856 - tp: 10957.7619 - fp: 330.5714 - tn: 10887.1429 - fn: 255.0000 - accuracy: 0.9735 - precision: 0.9701 - recall: 0.9770 - auc: 0.9969 - val_loss: 0.0717 - val_tp: 73.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 1.0000 - val_accuracy: 0.9733 - val_precision: 0.8795 - val_recall: 0.9865 - val_auc: 0.9974\n",
            "Epoch 44/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0846 - tp: 11024.3333 - fp: 327.4762 - tn: 10830.6190 - fn: 248.0476 - accuracy: 0.9741 - precision: 0.9706 - recall: 0.9781 - auc: 0.9968 - val_loss: 0.0703 - val_tp: 73.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 1.0000 - val_accuracy: 0.9733 - val_precision: 0.8795 - val_recall: 0.9865 - val_auc: 0.9974\n",
            "Epoch 45/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0808 - tp: 10982.3333 - fp: 330.6667 - tn: 10885.8571 - fn: 231.6190 - accuracy: 0.9748 - precision: 0.9709 - recall: 0.9791 - auc: 0.9973 - val_loss: 0.0690 - val_tp: 73.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 1.0000 - val_accuracy: 0.9733 - val_precision: 0.8795 - val_recall: 0.9865 - val_auc: 0.9975\n",
            "Epoch 46/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0788 - tp: 11027.5714 - fp: 345.0476 - tn: 10831.1429 - fn: 226.7143 - accuracy: 0.9743 - precision: 0.9695 - recall: 0.9795 - auc: 0.9974 - val_loss: 0.0674 - val_tp: 73.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 1.0000 - val_accuracy: 0.9733 - val_precision: 0.8795 - val_recall: 0.9865 - val_auc: 0.9976\n",
            "Epoch 47/1000\n",
            "20/20 [==============================] - 1s 29ms/step - loss: 0.0745 - tp: 11001.5714 - fp: 307.9048 - tn: 10925.0476 - fn: 195.9524 - accuracy: 0.9773 - precision: 0.9720 - recall: 0.9829 - auc: 0.9977 - val_loss: 0.0656 - val_tp: 73.0000 - val_fp: 10.0000 - val_tn: 328.0000 - val_fn: 1.0000 - val_accuracy: 0.9733 - val_precision: 0.8795 - val_recall: 0.9865 - val_auc: 0.9977\n",
            "Epoch 48/1000\n",
            "20/20 [==============================] - 1s 29ms/step - loss: 0.0734 - tp: 10998.6667 - fp: 272.3333 - tn: 10962.1905 - fn: 197.2857 - accuracy: 0.9783 - precision: 0.9753 - recall: 0.9813 - auc: 0.9979 - val_loss: 0.0644 - val_tp: 74.0000 - val_fp: 9.0000 - val_tn: 329.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9782 - val_precision: 0.8916 - val_recall: 1.0000 - val_auc: 0.9978\n",
            "Epoch 49/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0719 - tp: 10990.3810 - fp: 284.5238 - tn: 10953.7143 - fn: 201.8571 - accuracy: 0.9783 - precision: 0.9744 - recall: 0.9823 - auc: 0.9978 - val_loss: 0.0632 - val_tp: 74.0000 - val_fp: 9.0000 - val_tn: 329.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9782 - val_precision: 0.8916 - val_recall: 1.0000 - val_auc: 0.9978\n",
            "Epoch 50/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0679 - tp: 11006.0476 - fp: 251.7143 - tn: 10975.7619 - fn: 196.9524 - accuracy: 0.9796 - precision: 0.9774 - recall: 0.9818 - auc: 0.9983 - val_loss: 0.0627 - val_tp: 74.0000 - val_fp: 9.0000 - val_tn: 329.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9782 - val_precision: 0.8916 - val_recall: 1.0000 - val_auc: 0.9979\n",
            "Epoch 51/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0662 - tp: 11133.7619 - fp: 247.5714 - tn: 10867.5238 - fn: 181.6190 - accuracy: 0.9809 - precision: 0.9786 - recall: 0.9838 - auc: 0.9981 - val_loss: 0.0616 - val_tp: 74.0000 - val_fp: 8.0000 - val_tn: 330.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9806 - val_precision: 0.9024 - val_recall: 1.0000 - val_auc: 0.9980\n",
            "Epoch 52/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.0647 - tp: 11016.8095 - fp: 244.4286 - tn: 10991.5714 - fn: 177.6667 - accuracy: 0.9816 - precision: 0.9785 - recall: 0.9848 - auc: 0.9983 - val_loss: 0.0597 - val_tp: 74.0000 - val_fp: 8.0000 - val_tn: 330.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9806 - val_precision: 0.9024 - val_recall: 1.0000 - val_auc: 0.9980\n",
            "Epoch 53/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.0635 - tp: 11132.4286 - fp: 249.5714 - tn: 10882.8095 - fn: 165.6667 - accuracy: 0.9812 - precision: 0.9778 - recall: 0.9850 - auc: 0.9984 - val_loss: 0.0588 - val_tp: 74.0000 - val_fp: 8.0000 - val_tn: 330.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9806 - val_precision: 0.9024 - val_recall: 1.0000 - val_auc: 0.9980\n",
            "Epoch 54/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0633 - tp: 11046.8095 - fp: 244.8095 - tn: 10956.8571 - fn: 182.0000 - accuracy: 0.9808 - precision: 0.9781 - recall: 0.9838 - auc: 0.9983 - val_loss: 0.0581 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9980\n",
            "Epoch 55/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0609 - tp: 11048.3810 - fp: 239.1429 - tn: 10984.4762 - fn: 158.4762 - accuracy: 0.9823 - precision: 0.9789 - recall: 0.9859 - auc: 0.9985 - val_loss: 0.0570 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9980\n",
            "Epoch 56/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.0603 - tp: 11043.3333 - fp: 231.4762 - tn: 10986.7143 - fn: 168.9524 - accuracy: 0.9822 - precision: 0.9793 - recall: 0.9851 - auc: 0.9986 - val_loss: 0.0568 - val_tp: 73.0000 - val_fp: 8.0000 - val_tn: 330.0000 - val_fn: 1.0000 - val_accuracy: 0.9782 - val_precision: 0.9012 - val_recall: 0.9865 - val_auc: 0.9980\n",
            "Epoch 57/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0602 - tp: 11024.2381 - fp: 227.0952 - tn: 11007.3333 - fn: 171.8095 - accuracy: 0.9819 - precision: 0.9792 - recall: 0.9847 - auc: 0.9985 - val_loss: 0.0560 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9981\n",
            "Epoch 58/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0581 - tp: 10932.0000 - fp: 218.4762 - tn: 11110.5238 - fn: 169.4762 - accuracy: 0.9826 - precision: 0.9803 - recall: 0.9846 - auc: 0.9987 - val_loss: 0.0554 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9981\n",
            "Epoch 59/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0574 - tp: 11070.9524 - fp: 217.0952 - tn: 10982.1905 - fn: 160.2381 - accuracy: 0.9829 - precision: 0.9805 - recall: 0.9853 - auc: 0.9987 - val_loss: 0.0546 - val_tp: 74.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9830 - val_precision: 0.9136 - val_recall: 1.0000 - val_auc: 0.9981\n",
            "Epoch 60/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0567 - tp: 11080.1429 - fp: 204.9048 - tn: 10976.7143 - fn: 168.7143 - accuracy: 0.9832 - precision: 0.9822 - recall: 0.9844 - auc: 0.9988 - val_loss: 0.0548 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9980\n",
            "Epoch 61/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0533 - tp: 10964.9048 - fp: 201.5714 - tn: 11104.0476 - fn: 159.9524 - accuracy: 0.9843 - precision: 0.9821 - recall: 0.9862 - auc: 0.9990 - val_loss: 0.0547 - val_tp: 74.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9830 - val_precision: 0.9136 - val_recall: 1.0000 - val_auc: 0.9981\n",
            "Epoch 62/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0536 - tp: 11022.3333 - fp: 204.7143 - tn: 11048.9524 - fn: 154.4762 - accuracy: 0.9841 - precision: 0.9818 - recall: 0.9865 - auc: 0.9988 - val_loss: 0.0531 - val_tp: 74.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9830 - val_precision: 0.9136 - val_recall: 1.0000 - val_auc: 0.9981\n",
            "Epoch 63/1000\n",
            "20/20 [==============================] - 1s 27ms/step - loss: 0.0510 - tp: 10978.7143 - fp: 203.0952 - tn: 11114.0952 - fn: 134.5714 - accuracy: 0.9851 - precision: 0.9826 - recall: 0.9875 - auc: 0.9991 - val_loss: 0.0519 - val_tp: 74.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9830 - val_precision: 0.9136 - val_recall: 1.0000 - val_auc: 0.9982\n",
            "Epoch 64/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0523 - tp: 11066.5714 - fp: 193.5238 - tn: 11012.0952 - fn: 158.2857 - accuracy: 0.9844 - precision: 0.9824 - recall: 0.9864 - auc: 0.9987 - val_loss: 0.0527 - val_tp: 74.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9830 - val_precision: 0.9136 - val_recall: 1.0000 - val_auc: 0.9982\n",
            "Epoch 65/1000\n",
            "20/20 [==============================] - 1s 35ms/step - loss: 0.0505 - tp: 11080.0952 - fp: 187.4286 - tn: 11015.0000 - fn: 147.9524 - accuracy: 0.9851 - precision: 0.9833 - recall: 0.9869 - auc: 0.9990 - val_loss: 0.0523 - val_tp: 74.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9830 - val_precision: 0.9136 - val_recall: 1.0000 - val_auc: 0.9982\n",
            "Epoch 66/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0490 - tp: 11124.6190 - fp: 179.5714 - tn: 10983.2381 - fn: 143.0476 - accuracy: 0.9858 - precision: 0.9841 - recall: 0.9876 - auc: 0.9992 - val_loss: 0.0523 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9982\n",
            "Epoch 67/1000\n",
            "20/20 [==============================] - 0s 25ms/step - loss: 0.0478 - tp: 11124.7143 - fp: 178.7143 - tn: 10990.0952 - fn: 136.9524 - accuracy: 0.9860 - precision: 0.9845 - recall: 0.9877 - auc: 0.9991 - val_loss: 0.0514 - val_tp: 74.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 0.0000e+00 - val_accuracy: 0.9830 - val_precision: 0.9136 - val_recall: 1.0000 - val_auc: 0.9983\n",
            "Epoch 68/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0503 - tp: 10988.0000 - fp: 204.2857 - tn: 11083.2857 - fn: 154.9048 - accuracy: 0.9840 - precision: 0.9818 - recall: 0.9861 - auc: 0.9989 - val_loss: 0.0501 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9982\n",
            "Epoch 69/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0476 - tp: 11178.8571 - fp: 168.9524 - tn: 10944.1429 - fn: 138.5238 - accuracy: 0.9866 - precision: 0.9860 - recall: 0.9876 - auc: 0.9992 - val_loss: 0.0505 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9981\n",
            "Epoch 70/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0469 - tp: 11036.6667 - fp: 167.3810 - tn: 11091.0476 - fn: 135.3810 - accuracy: 0.9868 - precision: 0.9848 - recall: 0.9889 - auc: 0.9991 - val_loss: 0.0511 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9981\n",
            "Epoch 71/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0464 - tp: 11136.2381 - fp: 174.2857 - tn: 10994.8095 - fn: 125.1429 - accuracy: 0.9866 - precision: 0.9844 - recall: 0.9891 - auc: 0.9992 - val_loss: 0.0495 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9982\n",
            "Epoch 72/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0471 - tp: 10998.5714 - fp: 181.2857 - tn: 11097.7619 - fn: 152.8571 - accuracy: 0.9853 - precision: 0.9838 - recall: 0.9866 - auc: 0.9991 - val_loss: 0.0502 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9982\n",
            "Epoch 73/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0456 - tp: 11067.7619 - fp: 178.0000 - tn: 11045.0952 - fn: 139.6190 - accuracy: 0.9855 - precision: 0.9837 - recall: 0.9873 - auc: 0.9992 - val_loss: 0.0489 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9982\n",
            "Epoch 74/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0447 - tp: 11182.7619 - fp: 139.5238 - tn: 10966.5238 - fn: 141.6667 - accuracy: 0.9872 - precision: 0.9875 - recall: 0.9872 - auc: 0.9992 - val_loss: 0.0482 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9983\n",
            "Epoch 75/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0443 - tp: 10950.3810 - fp: 162.7143 - tn: 11198.0952 - fn: 119.2857 - accuracy: 0.9873 - precision: 0.9849 - recall: 0.9894 - auc: 0.9993 - val_loss: 0.0477 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9983\n",
            "Epoch 76/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0432 - tp: 11042.6190 - fp: 194.5238 - tn: 11076.4762 - fn: 116.8571 - accuracy: 0.9862 - precision: 0.9833 - recall: 0.9889 - auc: 0.9993 - val_loss: 0.0475 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9983\n",
            "Epoch 77/1000\n",
            "20/20 [==============================] - 1s 29ms/step - loss: 0.0412 - tp: 11190.4762 - fp: 210.4762 - tn: 10973.9048 - fn: 55.6190 - accuracy: 0.9881 - precision: 0.9815 - recall: 0.9951 - auc: 0.9994 - val_loss: 0.0482 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9983\n",
            "Epoch 78/1000\n",
            "20/20 [==============================] - 1s 26ms/step - loss: 0.0424 - tp: 11201.9048 - fp: 203.8571 - tn: 10968.7619 - fn: 55.9524 - accuracy: 0.9880 - precision: 0.9817 - recall: 0.9948 - auc: 0.9993 - val_loss: 0.0481 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9983\n",
            "Epoch 79/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0401 - tp: 11071.2857 - fp: 190.2857 - tn: 11121.4286 - fn: 47.4762 - accuracy: 0.9894 - precision: 0.9828 - recall: 0.9960 - auc: 0.9995 - val_loss: 0.0470 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9984\n",
            "Epoch 80/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0415 - tp: 11176.0000 - fp: 197.0476 - tn: 10991.8095 - fn: 65.6190 - accuracy: 0.9882 - precision: 0.9828 - recall: 0.9940 - auc: 0.9993 - val_loss: 0.0462 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9984\n",
            "Epoch 81/1000\n",
            "20/20 [==============================] - 0s 25ms/step - loss: 0.0398 - tp: 11170.8571 - fp: 203.2381 - tn: 10996.1905 - fn: 60.1905 - accuracy: 0.9881 - precision: 0.9820 - recall: 0.9945 - auc: 0.9994 - val_loss: 0.0468 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9984\n",
            "Epoch 82/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0411 - tp: 11288.9048 - fp: 208.2857 - tn: 10883.2381 - fn: 50.0476 - accuracy: 0.9882 - precision: 0.9812 - recall: 0.9957 - auc: 0.9993 - val_loss: 0.0462 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9984\n",
            "Epoch 83/1000\n",
            "20/20 [==============================] - 1s 29ms/step - loss: 0.0391 - tp: 11170.3810 - fp: 204.4762 - tn: 11008.9048 - fn: 46.7143 - accuracy: 0.9887 - precision: 0.9818 - recall: 0.9958 - auc: 0.9994 - val_loss: 0.0454 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9984\n",
            "Epoch 84/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0391 - tp: 11216.3333 - fp: 193.6667 - tn: 10968.0476 - fn: 52.4286 - accuracy: 0.9888 - precision: 0.9830 - recall: 0.9950 - auc: 0.9994 - val_loss: 0.0450 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9986\n",
            "Epoch 85/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0382 - tp: 11260.9524 - fp: 192.4286 - tn: 10930.0952 - fn: 47.0000 - accuracy: 0.9892 - precision: 0.9830 - recall: 0.9959 - auc: 0.9994 - val_loss: 0.0455 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9985\n",
            "Epoch 86/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0381 - tp: 11214.0000 - fp: 188.0952 - tn: 10980.8095 - fn: 47.5714 - accuracy: 0.9895 - precision: 0.9838 - recall: 0.9954 - auc: 0.9994 - val_loss: 0.0454 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9985\n",
            "Epoch 87/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0376 - tp: 11119.5714 - fp: 186.3810 - tn: 11072.1905 - fn: 52.3333 - accuracy: 0.9894 - precision: 0.9836 - recall: 0.9954 - auc: 0.9994 - val_loss: 0.0446 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9986\n",
            "Epoch 88/1000\n",
            "20/20 [==============================] - 1s 26ms/step - loss: 0.0367 - tp: 11163.7619 - fp: 202.8571 - tn: 11014.1905 - fn: 49.6667 - accuracy: 0.9887 - precision: 0.9820 - recall: 0.9956 - auc: 0.9996 - val_loss: 0.0446 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9987\n",
            "Epoch 89/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0355 - tp: 11206.7619 - fp: 173.8095 - tn: 11002.5238 - fn: 47.3810 - accuracy: 0.9906 - precision: 0.9858 - recall: 0.9957 - auc: 0.9995 - val_loss: 0.0436 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9988\n",
            "Epoch 90/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.0362 - tp: 11187.1429 - fp: 195.7619 - tn: 11013.9048 - fn: 33.6667 - accuracy: 0.9895 - precision: 0.9825 - recall: 0.9968 - auc: 0.9995 - val_loss: 0.0436 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9987\n",
            "Epoch 91/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.0358 - tp: 11179.0000 - fp: 191.1905 - tn: 11024.5238 - fn: 35.7619 - accuracy: 0.9898 - precision: 0.9830 - recall: 0.9969 - auc: 0.9995 - val_loss: 0.0436 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9989\n",
            "Epoch 92/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0360 - tp: 11162.5238 - fp: 192.9048 - tn: 11033.1905 - fn: 41.8571 - accuracy: 0.9893 - precision: 0.9826 - recall: 0.9962 - auc: 0.9995 - val_loss: 0.0444 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9987\n",
            "Epoch 93/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0342 - tp: 11301.8571 - fp: 165.4762 - tn: 10924.3333 - fn: 38.8095 - accuracy: 0.9911 - precision: 0.9858 - recall: 0.9968 - auc: 0.9996 - val_loss: 0.0425 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9990\n",
            "Epoch 94/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0337 - tp: 11199.7619 - fp: 177.1429 - tn: 11026.4762 - fn: 27.0952 - accuracy: 0.9911 - precision: 0.9846 - recall: 0.9977 - auc: 0.9996 - val_loss: 0.0429 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9989\n",
            "Epoch 95/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0326 - tp: 11133.7143 - fp: 177.3810 - tn: 11096.5238 - fn: 22.8571 - accuracy: 0.9914 - precision: 0.9848 - recall: 0.9980 - auc: 0.9996 - val_loss: 0.0434 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9989\n",
            "Epoch 96/1000\n",
            "20/20 [==============================] - 1s 29ms/step - loss: 0.0339 - tp: 11174.0952 - fp: 189.5238 - tn: 11031.7619 - fn: 35.0952 - accuracy: 0.9902 - precision: 0.9833 - recall: 0.9973 - auc: 0.9996 - val_loss: 0.0432 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9990\n",
            "Epoch 97/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0329 - tp: 11192.9048 - fp: 186.0476 - tn: 11021.8571 - fn: 29.6667 - accuracy: 0.9903 - precision: 0.9835 - recall: 0.9973 - auc: 0.9996 - val_loss: 0.0425 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9989\n",
            "Epoch 98/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0323 - tp: 11191.6190 - fp: 180.5238 - tn: 11026.8571 - fn: 31.4762 - accuracy: 0.9907 - precision: 0.9843 - recall: 0.9974 - auc: 0.9996 - val_loss: 0.0413 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 99/1000\n",
            "20/20 [==============================] - 0s 25ms/step - loss: 0.0328 - tp: 11083.7619 - fp: 175.6667 - tn: 11133.0476 - fn: 38.0000 - accuracy: 0.9905 - precision: 0.9845 - recall: 0.9966 - auc: 0.9996 - val_loss: 0.0419 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9990\n",
            "Epoch 100/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0322 - tp: 11189.7143 - fp: 178.9524 - tn: 11026.4286 - fn: 35.3810 - accuracy: 0.9903 - precision: 0.9841 - recall: 0.9967 - auc: 0.9996 - val_loss: 0.0413 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9990\n",
            "Epoch 101/1000\n",
            "20/20 [==============================] - 0s 22ms/step - loss: 0.0308 - tp: 11171.8095 - fp: 177.4762 - tn: 11049.5714 - fn: 31.6190 - accuracy: 0.9912 - precision: 0.9852 - recall: 0.9974 - auc: 0.9997 - val_loss: 0.0404 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 102/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0308 - tp: 11182.8095 - fp: 158.9524 - tn: 11056.1905 - fn: 32.5238 - accuracy: 0.9917 - precision: 0.9863 - recall: 0.9971 - auc: 0.9997 - val_loss: 0.0414 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9990\n",
            "Epoch 103/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0316 - tp: 11152.2857 - fp: 166.0000 - tn: 11090.4286 - fn: 21.7619 - accuracy: 0.9916 - precision: 0.9852 - recall: 0.9981 - auc: 0.9996 - val_loss: 0.0412 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 104/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0317 - tp: 11161.1905 - fp: 171.1429 - tn: 11068.9048 - fn: 29.2381 - accuracy: 0.9908 - precision: 0.9846 - recall: 0.9973 - auc: 0.9996 - val_loss: 0.0399 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9992\n",
            "Epoch 105/1000\n",
            "20/20 [==============================] - 1s 26ms/step - loss: 0.0307 - tp: 11217.7143 - fp: 178.7143 - tn: 11009.2381 - fn: 24.8095 - accuracy: 0.9906 - precision: 0.9834 - recall: 0.9981 - auc: 0.9997 - val_loss: 0.0404 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 106/1000\n",
            "20/20 [==============================] - 0s 25ms/step - loss: 0.0309 - tp: 11207.6667 - fp: 174.4762 - tn: 11022.8095 - fn: 25.5238 - accuracy: 0.9910 - precision: 0.9845 - recall: 0.9977 - auc: 0.9997 - val_loss: 0.0400 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 107/1000\n",
            "20/20 [==============================] - 1s 26ms/step - loss: 0.0290 - tp: 11260.6667 - fp: 152.0952 - tn: 10999.0476 - fn: 18.6667 - accuracy: 0.9927 - precision: 0.9873 - recall: 0.9983 - auc: 0.9997 - val_loss: 0.0398 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 108/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0297 - tp: 11231.2381 - fp: 165.3810 - tn: 11009.8571 - fn: 24.0000 - accuracy: 0.9917 - precision: 0.9857 - recall: 0.9980 - auc: 0.9997 - val_loss: 0.0392 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9992\n",
            "Epoch 109/1000\n",
            "20/20 [==============================] - 0s 25ms/step - loss: 0.0288 - tp: 11158.3810 - fp: 162.3333 - tn: 11079.2857 - fn: 30.4762 - accuracy: 0.9917 - precision: 0.9863 - recall: 0.9972 - auc: 0.9997 - val_loss: 0.0408 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 110/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0294 - tp: 11240.8571 - fp: 154.7619 - tn: 11009.0476 - fn: 25.8095 - accuracy: 0.9919 - precision: 0.9863 - recall: 0.9977 - auc: 0.9997 - val_loss: 0.0396 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 111/1000\n",
            "20/20 [==============================] - 1s 34ms/step - loss: 0.0286 - tp: 11114.2381 - fp: 167.0000 - tn: 11121.9048 - fn: 27.3333 - accuracy: 0.9914 - precision: 0.9852 - recall: 0.9977 - auc: 0.9997 - val_loss: 0.0404 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 112/1000\n",
            "20/20 [==============================] - 1s 29ms/step - loss: 0.0280 - tp: 11327.9048 - fp: 155.5238 - tn: 10925.9048 - fn: 21.1429 - accuracy: 0.9920 - precision: 0.9861 - recall: 0.9982 - auc: 0.9997 - val_loss: 0.0401 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 113/1000\n",
            "20/20 [==============================] - 1s 33ms/step - loss: 0.0288 - tp: 11134.9524 - fp: 166.0952 - tn: 11106.3810 - fn: 23.0476 - accuracy: 0.9914 - precision: 0.9852 - recall: 0.9979 - auc: 0.9997 - val_loss: 0.0401 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 114/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0283 - tp: 11153.1429 - fp: 165.3333 - tn: 11083.1429 - fn: 28.8571 - accuracy: 0.9910 - precision: 0.9850 - recall: 0.9972 - auc: 0.9997 - val_loss: 0.0395 - val_tp: 73.0000 - val_fp: 8.0000 - val_tn: 330.0000 - val_fn: 1.0000 - val_accuracy: 0.9782 - val_precision: 0.9012 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 115/1000\n",
            "20/20 [==============================] - 0s 24ms/step - loss: 0.0269 - tp: 11113.7619 - fp: 148.3333 - tn: 11148.3333 - fn: 20.0476 - accuracy: 0.9927 - precision: 0.9873 - recall: 0.9981 - auc: 0.9998 - val_loss: 0.0400 - val_tp: 73.0000 - val_fp: 7.0000 - val_tn: 331.0000 - val_fn: 1.0000 - val_accuracy: 0.9806 - val_precision: 0.9125 - val_recall: 0.9865 - val_auc: 0.9990\n",
            "Epoch 116/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0276 - tp: 11309.7619 - fp: 157.5238 - tn: 10938.9524 - fn: 24.2381 - accuracy: 0.9917 - precision: 0.9861 - recall: 0.9978 - auc: 0.9997 - val_loss: 0.0389 - val_tp: 73.0000 - val_fp: 8.0000 - val_tn: 330.0000 - val_fn: 1.0000 - val_accuracy: 0.9782 - val_precision: 0.9012 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Epoch 117/1000\n",
            "20/20 [==============================] - 0s 25ms/step - loss: 0.0264 - tp: 11272.4762 - fp: 148.6667 - tn: 10989.2381 - fn: 20.0952 - accuracy: 0.9924 - precision: 0.9869 - recall: 0.9982 - auc: 0.9998 - val_loss: 0.0396 - val_tp: 73.0000 - val_fp: 8.0000 - val_tn: 330.0000 - val_fn: 1.0000 - val_accuracy: 0.9782 - val_precision: 0.9012 - val_recall: 0.9865 - val_auc: 0.9990\n",
            "Epoch 118/1000\n",
            "20/20 [==============================] - 0s 23ms/step - loss: 0.0259 - tp: 11282.4762 - fp: 137.1429 - tn: 10988.3810 - fn: 22.4762 - accuracy: 0.9931 - precision: 0.9883 - recall: 0.9982 - auc: 0.9998 - val_loss: 0.0394 - val_tp: 73.0000 - val_fp: 8.0000 - val_tn: 330.0000 - val_fn: 1.0000 - val_accuracy: 0.9782 - val_precision: 0.9012 - val_recall: 0.9865 - val_auc: 0.9991\n",
            "Restoring model weights from the end of the best epoch.\n",
            "Epoch 00118: early stopping\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 609
        },
        "id": "u4IeQU6K9BOS",
        "outputId": "5c5b227b-4c20-4890-9066-3bbf075d3858"
      },
      "source": [
        "plot_metrics(resampled_history)"
      ],
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f8cipc_O9HEA"
      },
      "source": [
        "train_predictions_resampled = resampled_model.predict(train_features, batch_size=BATCH_SIZE)\r\n",
        "test_predictions_resampled = resampled_model.predict(test_features, batch_size=BATCH_SIZE)"
      ],
      "execution_count": 158,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "id": "rY2E9S9A9KWE",
        "outputId": "5f2727c4-fcb5-4892-99fc-c5144ea4a065"
      },
      "source": [
        "resampled_results = resampled_model.evaluate(test_features, test_labels,\r\n",
        "                                             batch_size=BATCH_SIZE, verbose=0)\r\n",
        "for name, value in zip(resampled_model.metrics_names, resampled_results):\r\n",
        "  print(name, ': ', value)\r\n",
        "print()\r\n",
        "\r\n",
        "plot_cm(test_labels, test_predictions_resampled)"
      ],
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "loss :  0.04786211624741554\n",
            "tp :  86.0\n",
            "fp :  9.0\n",
            "tn :  421.0\n",
            "fn :  0.0\n",
            "accuracy :  0.9825581312179565\n",
            "precision :  0.9052631855010986\n",
            "recall :  1.0\n",
            "auc :  0.9979583024978638\n",
            "\n",
            "Legitimate Transactions Detected (True Negatives):  421\n",
            "Legitimate Transactions Incorrectly Detected (False Positives):  9\n",
            "Fraudulent Transactions Missed (False Negatives):  0\n",
            "Fraudulent Transactions Detected (True Positives):  86\n",
            "Total Fraudulent Transactions:  86\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623
        },
        "id": "GUZaJ6Nb9MXp",
        "outputId": "4e62e57d-2d7a-435e-836a-197f8c1e4d02"
      },
      "source": [
        "plot_roc(\"Train Baseline\", train_labels, train_predictions_baseline, color=colors[0])\r\n",
        "plot_roc(\"Test Baseline\", test_labels, test_predictions_baseline, color=colors[0], linestyle='--')\r\n",
        "\r\n",
        "plot_roc(\"Train Weighted\", train_labels, train_predictions_weighted, color=colors[1])\r\n",
        "plot_roc(\"Test Weighted\", test_labels, test_predictions_weighted, color=colors[1], linestyle='--')\r\n",
        "\r\n",
        "plot_roc(\"Train Resampled\", train_labels, train_predictions_resampled, color=colors[2])\r\n",
        "plot_roc(\"Test Resampled\", test_labels, test_predictions_resampled, color=colors[2], linestyle='--')\r\n",
        "plt.legend(loc='lower right')"
      ],
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f634e1ca588>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 160
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lJslDMzh9OtK"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}